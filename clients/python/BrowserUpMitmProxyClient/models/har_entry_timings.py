# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.26.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HarEntryTimings(BaseModel):
    """
    HarEntryTimings
    """ # noqa: E501
    dns: Annotated[int, Field(strict=True, ge=-1)]
    connect: Annotated[int, Field(strict=True, ge=-1)]
    blocked: Annotated[int, Field(strict=True, ge=-1)]
    send: Annotated[int, Field(strict=True, ge=-1)]
    wait: Annotated[int, Field(strict=True, ge=-1)]
    receive: Annotated[int, Field(strict=True, ge=-1)]
    ssl: Annotated[int, Field(strict=True, ge=-1)]
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["dns", "connect", "blocked", "send", "wait", "receive", "ssl", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HarEntryTimings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HarEntryTimings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dns": obj.get("dns") if obj.get("dns") is not None else -1,
            "connect": obj.get("connect") if obj.get("connect") is not None else -1,
            "blocked": obj.get("blocked") if obj.get("blocked") is not None else -1,
            "send": obj.get("send") if obj.get("send") is not None else -1,
            "wait": obj.get("wait") if obj.get("wait") is not None else -1,
            "receive": obj.get("receive") if obj.get("receive") is not None else -1,
            "ssl": obj.get("ssl") if obj.get("ssl") is not None else -1,
            "comment": obj.get("comment")
        })
        return _obj


