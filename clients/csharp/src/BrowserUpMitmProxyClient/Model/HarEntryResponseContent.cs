// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryResponseContent
    /// </summary>
    public partial class HarEntryResponseContent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryResponseContent" /> class.
        /// </summary>
        /// <param name="size">size</param>
        /// <param name="mimeType">mimeType</param>
        /// <param name="compression">compression</param>
        /// <param name="text">text</param>
        /// <param name="encoding">encoding</param>
        /// <param name="videoBufferedPercent">videoBufferedPercent (default to -1)</param>
        /// <param name="videoStallCount">videoStallCount (default to -1)</param>
        /// <param name="videoDecodedByteCount">videoDecodedByteCount (default to -1)</param>
        /// <param name="videoWaitingCount">videoWaitingCount (default to -1)</param>
        /// <param name="videoErrorCount">videoErrorCount (default to -1)</param>
        /// <param name="videoDroppedFrames">videoDroppedFrames (default to -1)</param>
        /// <param name="videoTotalFrames">videoTotalFrames (default to -1)</param>
        /// <param name="videoAudioBytesDecoded">videoAudioBytesDecoded (default to -1)</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryResponseContent(int size, string mimeType, Option<int?> compression = default, Option<string?> text = default, Option<string?> encoding = default, Option<long?> videoBufferedPercent = default, Option<long?> videoStallCount = default, Option<long?> videoDecodedByteCount = default, Option<long?> videoWaitingCount = default, Option<long?> videoErrorCount = default, Option<long?> videoDroppedFrames = default, Option<long?> videoTotalFrames = default, Option<long?> videoAudioBytesDecoded = default, Option<string?> comment = default)
        {
            Size = size;
            MimeType = mimeType;
            CompressionOption = compression;
            TextOption = text;
            EncodingOption = encoding;
            VideoBufferedPercentOption = videoBufferedPercent;
            VideoStallCountOption = videoStallCount;
            VideoDecodedByteCountOption = videoDecodedByteCount;
            VideoWaitingCountOption = videoWaitingCount;
            VideoErrorCountOption = videoErrorCount;
            VideoDroppedFramesOption = videoDroppedFrames;
            VideoTotalFramesOption = videoTotalFrames;
            VideoAudioBytesDecodedOption = videoAudioBytesDecoded;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Used to track the state of Compression
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CompressionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Compression
        /// </summary>
        [JsonPropertyName("compression")]
        public int? Compression { get { return this.CompressionOption; } set { this.CompressionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Encoding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncodingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [JsonPropertyName("encoding")]
        public string? Encoding { get { return this.EncodingOption; } set { this.EncodingOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoBufferedPercent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoBufferedPercentOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoBufferedPercent
        /// </summary>
        [JsonPropertyName("_videoBufferedPercent")]
        public long? VideoBufferedPercent { get { return this.VideoBufferedPercentOption; } set { this.VideoBufferedPercentOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoStallCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoStallCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoStallCount
        /// </summary>
        [JsonPropertyName("_videoStallCount")]
        public long? VideoStallCount { get { return this.VideoStallCountOption; } set { this.VideoStallCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoDecodedByteCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoDecodedByteCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoDecodedByteCount
        /// </summary>
        [JsonPropertyName("_videoDecodedByteCount")]
        public long? VideoDecodedByteCount { get { return this.VideoDecodedByteCountOption; } set { this.VideoDecodedByteCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoWaitingCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoWaitingCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoWaitingCount
        /// </summary>
        [JsonPropertyName("_videoWaitingCount")]
        public long? VideoWaitingCount { get { return this.VideoWaitingCountOption; } set { this.VideoWaitingCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoErrorCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoErrorCountOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoErrorCount
        /// </summary>
        [JsonPropertyName("_videoErrorCount")]
        public long? VideoErrorCount { get { return this.VideoErrorCountOption; } set { this.VideoErrorCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoDroppedFrames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoDroppedFramesOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoDroppedFrames
        /// </summary>
        [JsonPropertyName("_videoDroppedFrames")]
        public long? VideoDroppedFrames { get { return this.VideoDroppedFramesOption; } set { this.VideoDroppedFramesOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoTotalFrames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoTotalFramesOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoTotalFrames
        /// </summary>
        [JsonPropertyName("_videoTotalFrames")]
        public long? VideoTotalFrames { get { return this.VideoTotalFramesOption; } set { this.VideoTotalFramesOption = new(value); } }

        /// <summary>
        /// Used to track the state of VideoAudioBytesDecoded
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> VideoAudioBytesDecodedOption { get; private set; }

        /// <summary>
        /// Gets or Sets VideoAudioBytesDecoded
        /// </summary>
        [JsonPropertyName("_videoAudioBytesDecoded")]
        public long? VideoAudioBytesDecoded { get { return this.VideoAudioBytesDecodedOption; } set { this.VideoAudioBytesDecodedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryResponseContent {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  VideoBufferedPercent: ").Append(VideoBufferedPercent).Append("\n");
            sb.Append("  VideoStallCount: ").Append(VideoStallCount).Append("\n");
            sb.Append("  VideoDecodedByteCount: ").Append(VideoDecodedByteCount).Append("\n");
            sb.Append("  VideoWaitingCount: ").Append(VideoWaitingCount).Append("\n");
            sb.Append("  VideoErrorCount: ").Append(VideoErrorCount).Append("\n");
            sb.Append("  VideoDroppedFrames: ").Append(VideoDroppedFrames).Append("\n");
            sb.Append("  VideoTotalFrames: ").Append(VideoTotalFrames).Append("\n");
            sb.Append("  VideoAudioBytesDecoded: ").Append(VideoAudioBytesDecoded).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VideoBufferedPercent (long) minimum
            if (this.VideoBufferedPercentOption.IsSet && this.VideoBufferedPercentOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoBufferedPercent, must be a value greater than or equal to -1.", new [] { "VideoBufferedPercent" });
            }

            // VideoStallCount (long) minimum
            if (this.VideoStallCountOption.IsSet && this.VideoStallCountOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoStallCount, must be a value greater than or equal to -1.", new [] { "VideoStallCount" });
            }

            // VideoDecodedByteCount (long) minimum
            if (this.VideoDecodedByteCountOption.IsSet && this.VideoDecodedByteCountOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoDecodedByteCount, must be a value greater than or equal to -1.", new [] { "VideoDecodedByteCount" });
            }

            // VideoWaitingCount (long) minimum
            if (this.VideoWaitingCountOption.IsSet && this.VideoWaitingCountOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoWaitingCount, must be a value greater than or equal to -1.", new [] { "VideoWaitingCount" });
            }

            // VideoErrorCount (long) minimum
            if (this.VideoErrorCountOption.IsSet && this.VideoErrorCountOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoErrorCount, must be a value greater than or equal to -1.", new [] { "VideoErrorCount" });
            }

            // VideoDroppedFrames (long) minimum
            if (this.VideoDroppedFramesOption.IsSet && this.VideoDroppedFramesOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoDroppedFrames, must be a value greater than or equal to -1.", new [] { "VideoDroppedFrames" });
            }

            // VideoTotalFrames (long) minimum
            if (this.VideoTotalFramesOption.IsSet && this.VideoTotalFramesOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoTotalFrames, must be a value greater than or equal to -1.", new [] { "VideoTotalFrames" });
            }

            // VideoAudioBytesDecoded (long) minimum
            if (this.VideoAudioBytesDecodedOption.IsSet && this.VideoAudioBytesDecodedOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for VideoAudioBytesDecoded, must be a value greater than or equal to -1.", new [] { "VideoAudioBytesDecoded" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryResponseContent" />
    /// </summary>
    public class HarEntryResponseContentJsonConverter : JsonConverter<HarEntryResponseContent>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryResponseContent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryResponseContent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> size = default;
            Option<string?> mimeType = default;
            Option<int?> compression = default;
            Option<string?> text = default;
            Option<string?> encoding = default;
            Option<long?> videoBufferedPercent = default;
            Option<long?> videoStallCount = default;
            Option<long?> videoDecodedByteCount = default;
            Option<long?> videoWaitingCount = default;
            Option<long?> videoErrorCount = default;
            Option<long?> videoDroppedFrames = default;
            Option<long?> videoTotalFrames = default;
            Option<long?> videoAudioBytesDecoded = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "mimeType":
                            mimeType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "compression":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                compression = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "encoding":
                            encoding = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_videoBufferedPercent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoBufferedPercent = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoStallCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoStallCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoDecodedByteCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoDecodedByteCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoWaitingCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoWaitingCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoErrorCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoErrorCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoDroppedFrames":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoDroppedFrames = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoTotalFrames":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoTotalFrames = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_videoAudioBytesDecoded":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videoAudioBytesDecoded = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponseContent.", nameof(size));

            if (!mimeType.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponseContent.", nameof(mimeType));

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class HarEntryResponseContent.");

            if (mimeType.IsSet && mimeType.Value == null)
                throw new ArgumentNullException(nameof(mimeType), "Property is not nullable for class HarEntryResponseContent.");

            if (compression.IsSet && compression.Value == null)
                throw new ArgumentNullException(nameof(compression), "Property is not nullable for class HarEntryResponseContent.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class HarEntryResponseContent.");

            if (encoding.IsSet && encoding.Value == null)
                throw new ArgumentNullException(nameof(encoding), "Property is not nullable for class HarEntryResponseContent.");

            if (videoBufferedPercent.IsSet && videoBufferedPercent.Value == null)
                throw new ArgumentNullException(nameof(videoBufferedPercent), "Property is not nullable for class HarEntryResponseContent.");

            if (videoStallCount.IsSet && videoStallCount.Value == null)
                throw new ArgumentNullException(nameof(videoStallCount), "Property is not nullable for class HarEntryResponseContent.");

            if (videoDecodedByteCount.IsSet && videoDecodedByteCount.Value == null)
                throw new ArgumentNullException(nameof(videoDecodedByteCount), "Property is not nullable for class HarEntryResponseContent.");

            if (videoWaitingCount.IsSet && videoWaitingCount.Value == null)
                throw new ArgumentNullException(nameof(videoWaitingCount), "Property is not nullable for class HarEntryResponseContent.");

            if (videoErrorCount.IsSet && videoErrorCount.Value == null)
                throw new ArgumentNullException(nameof(videoErrorCount), "Property is not nullable for class HarEntryResponseContent.");

            if (videoDroppedFrames.IsSet && videoDroppedFrames.Value == null)
                throw new ArgumentNullException(nameof(videoDroppedFrames), "Property is not nullable for class HarEntryResponseContent.");

            if (videoTotalFrames.IsSet && videoTotalFrames.Value == null)
                throw new ArgumentNullException(nameof(videoTotalFrames), "Property is not nullable for class HarEntryResponseContent.");

            if (videoAudioBytesDecoded.IsSet && videoAudioBytesDecoded.Value == null)
                throw new ArgumentNullException(nameof(videoAudioBytesDecoded), "Property is not nullable for class HarEntryResponseContent.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryResponseContent.");

            return new HarEntryResponseContent(size.Value!.Value!, mimeType.Value!, compression, text, encoding, videoBufferedPercent, videoStallCount, videoDecodedByteCount, videoWaitingCount, videoErrorCount, videoDroppedFrames, videoTotalFrames, videoAudioBytesDecoded, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryResponseContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryResponseContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryResponseContent harEntryResponseContent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryResponseContent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryResponseContent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryResponseContent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryResponseContent harEntryResponseContent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryResponseContent.MimeType == null)
                throw new ArgumentNullException(nameof(harEntryResponseContent.MimeType), "Property is required for class HarEntryResponseContent.");

            if (harEntryResponseContent.TextOption.IsSet && harEntryResponseContent.Text == null)
                throw new ArgumentNullException(nameof(harEntryResponseContent.Text), "Property is required for class HarEntryResponseContent.");

            if (harEntryResponseContent.EncodingOption.IsSet && harEntryResponseContent.Encoding == null)
                throw new ArgumentNullException(nameof(harEntryResponseContent.Encoding), "Property is required for class HarEntryResponseContent.");

            if (harEntryResponseContent.CommentOption.IsSet && harEntryResponseContent.Comment == null)
                throw new ArgumentNullException(nameof(harEntryResponseContent.Comment), "Property is required for class HarEntryResponseContent.");

            writer.WriteNumber("size", harEntryResponseContent.Size);

            writer.WriteString("mimeType", harEntryResponseContent.MimeType);

            if (harEntryResponseContent.CompressionOption.IsSet)
                writer.WriteNumber("compression", harEntryResponseContent.CompressionOption.Value!.Value);

            if (harEntryResponseContent.TextOption.IsSet)
                writer.WriteString("text", harEntryResponseContent.Text);

            if (harEntryResponseContent.EncodingOption.IsSet)
                writer.WriteString("encoding", harEntryResponseContent.Encoding);

            if (harEntryResponseContent.VideoBufferedPercentOption.IsSet)
                writer.WriteNumber("_videoBufferedPercent", harEntryResponseContent.VideoBufferedPercentOption.Value!.Value);

            if (harEntryResponseContent.VideoStallCountOption.IsSet)
                writer.WriteNumber("_videoStallCount", harEntryResponseContent.VideoStallCountOption.Value!.Value);

            if (harEntryResponseContent.VideoDecodedByteCountOption.IsSet)
                writer.WriteNumber("_videoDecodedByteCount", harEntryResponseContent.VideoDecodedByteCountOption.Value!.Value);

            if (harEntryResponseContent.VideoWaitingCountOption.IsSet)
                writer.WriteNumber("_videoWaitingCount", harEntryResponseContent.VideoWaitingCountOption.Value!.Value);

            if (harEntryResponseContent.VideoErrorCountOption.IsSet)
                writer.WriteNumber("_videoErrorCount", harEntryResponseContent.VideoErrorCountOption.Value!.Value);

            if (harEntryResponseContent.VideoDroppedFramesOption.IsSet)
                writer.WriteNumber("_videoDroppedFrames", harEntryResponseContent.VideoDroppedFramesOption.Value!.Value);

            if (harEntryResponseContent.VideoTotalFramesOption.IsSet)
                writer.WriteNumber("_videoTotalFrames", harEntryResponseContent.VideoTotalFramesOption.Value!.Value);

            if (harEntryResponseContent.VideoAudioBytesDecodedOption.IsSet)
                writer.WriteNumber("_videoAudioBytesDecoded", harEntryResponseContent.VideoAudioBytesDecodedOption.Value!.Value);

            if (harEntryResponseContent.CommentOption.IsSet)
                writer.WriteString("comment", harEntryResponseContent.Comment);
        }
    }
}
