// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// PageTiming
    /// </summary>
    public partial class PageTiming : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageTiming" /> class.
        /// </summary>
        /// <param name="onContentLoad">onContentLoad per the browser</param>
        /// <param name="onLoad">onLoad per the browser</param>
        /// <param name="firstInputDelay">firstInputDelay from the browser</param>
        /// <param name="firstPaint">firstPaint from the browser</param>
        /// <param name="cumulativeLayoutShift">cumulativeLayoutShift metric from the browser</param>
        /// <param name="largestContentfulPaint">largestContentfulPaint from the browser</param>
        /// <param name="domInteractive">domInteractive from the browser</param>
        /// <param name="firstContentfulPaint">firstContentfulPaint from the browser</param>
        /// <param name="dns">dns lookup time from the browser</param>
        /// <param name="ssl">Ssl connect time from the browser</param>
        /// <param name="timeToFirstByte">Time to first byte of the page&#39;s first request per the browser</param>
        /// <param name="href">Top level href, including hashtag, etc per the browser</param>
        /// <param name="spanId">W3C Trace Context span ID for this page</param>
        /// <param name="parentId">W3C Trace Context parent span ID (typically the HAR log span ID)</param>
        [JsonConstructor]
        public PageTiming(Option<int?> onContentLoad = default, Option<int?> onLoad = default, Option<int?> firstInputDelay = default, Option<int?> firstPaint = default, Option<int?> cumulativeLayoutShift = default, Option<int?> largestContentfulPaint = default, Option<int?> domInteractive = default, Option<int?> firstContentfulPaint = default, Option<int?> dns = default, Option<int?> ssl = default, Option<int?> timeToFirstByte = default, Option<string?> href = default, Option<string?> spanId = default, Option<string?> parentId = default)
        {
            OnContentLoadOption = onContentLoad;
            OnLoadOption = onLoad;
            FirstInputDelayOption = firstInputDelay;
            FirstPaintOption = firstPaint;
            CumulativeLayoutShiftOption = cumulativeLayoutShift;
            LargestContentfulPaintOption = largestContentfulPaint;
            DomInteractiveOption = domInteractive;
            FirstContentfulPaintOption = firstContentfulPaint;
            DnsOption = dns;
            SslOption = ssl;
            TimeToFirstByteOption = timeToFirstByte;
            HrefOption = href;
            SpanIdOption = spanId;
            ParentIdOption = parentId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OnContentLoad
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OnContentLoadOption { get; private set; }

        /// <summary>
        /// onContentLoad per the browser
        /// </summary>
        /// <value>onContentLoad per the browser</value>
        [JsonPropertyName("onContentLoad")]
        public int? OnContentLoad { get { return this.OnContentLoadOption; } set { this.OnContentLoadOption = new(value); } }

        /// <summary>
        /// Used to track the state of OnLoad
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OnLoadOption { get; private set; }

        /// <summary>
        /// onLoad per the browser
        /// </summary>
        /// <value>onLoad per the browser</value>
        [JsonPropertyName("onLoad")]
        public int? OnLoad { get { return this.OnLoadOption; } set { this.OnLoadOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstInputDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FirstInputDelayOption { get; private set; }

        /// <summary>
        /// firstInputDelay from the browser
        /// </summary>
        /// <value>firstInputDelay from the browser</value>
        [JsonPropertyName("_firstInputDelay")]
        public int? FirstInputDelay { get { return this.FirstInputDelayOption; } set { this.FirstInputDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FirstPaintOption { get; private set; }

        /// <summary>
        /// firstPaint from the browser
        /// </summary>
        /// <value>firstPaint from the browser</value>
        [JsonPropertyName("_firstPaint")]
        public int? FirstPaint { get { return this.FirstPaintOption; } set { this.FirstPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeLayoutShift
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> CumulativeLayoutShiftOption { get; private set; }

        /// <summary>
        /// cumulativeLayoutShift metric from the browser
        /// </summary>
        /// <value>cumulativeLayoutShift metric from the browser</value>
        [JsonPropertyName("_cumulativeLayoutShift")]
        public int? CumulativeLayoutShift { get { return this.CumulativeLayoutShiftOption; } set { this.CumulativeLayoutShiftOption = new(value); } }

        /// <summary>
        /// Used to track the state of LargestContentfulPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LargestContentfulPaintOption { get; private set; }

        /// <summary>
        /// largestContentfulPaint from the browser
        /// </summary>
        /// <value>largestContentfulPaint from the browser</value>
        [JsonPropertyName("_largestContentfulPaint")]
        public int? LargestContentfulPaint { get { return this.LargestContentfulPaintOption; } set { this.LargestContentfulPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomInteractive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DomInteractiveOption { get; private set; }

        /// <summary>
        /// domInteractive from the browser
        /// </summary>
        /// <value>domInteractive from the browser</value>
        [JsonPropertyName("_domInteractive")]
        public int? DomInteractive { get { return this.DomInteractiveOption; } set { this.DomInteractiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstContentfulPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> FirstContentfulPaintOption { get; private set; }

        /// <summary>
        /// firstContentfulPaint from the browser
        /// </summary>
        /// <value>firstContentfulPaint from the browser</value>
        [JsonPropertyName("_firstContentfulPaint")]
        public int? FirstContentfulPaint { get { return this.FirstContentfulPaintOption; } set { this.FirstContentfulPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DnsOption { get; private set; }

        /// <summary>
        /// dns lookup time from the browser
        /// </summary>
        /// <value>dns lookup time from the browser</value>
        [JsonPropertyName("_dns")]
        public int? Dns { get { return this.DnsOption; } set { this.DnsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ssl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SslOption { get; private set; }

        /// <summary>
        /// Ssl connect time from the browser
        /// </summary>
        /// <value>Ssl connect time from the browser</value>
        [JsonPropertyName("_ssl")]
        public int? Ssl { get { return this.SslOption; } set { this.SslOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeToFirstByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimeToFirstByteOption { get; private set; }

        /// <summary>
        /// Time to first byte of the page&#39;s first request per the browser
        /// </summary>
        /// <value>Time to first byte of the page&#39;s first request per the browser</value>
        [JsonPropertyName("_timeToFirstByte")]
        public int? TimeToFirstByte { get { return this.TimeToFirstByteOption; } set { this.TimeToFirstByteOption = new(value); } }

        /// <summary>
        /// Used to track the state of Href
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HrefOption { get; private set; }

        /// <summary>
        /// Top level href, including hashtag, etc per the browser
        /// </summary>
        /// <value>Top level href, including hashtag, etc per the browser</value>
        [JsonPropertyName("_href")]
        public string? Href { get { return this.HrefOption; } set { this.HrefOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpanId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpanIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context span ID for this page
        /// </summary>
        /// <value>W3C Trace Context span ID for this page</value>
        [JsonPropertyName("_span_id")]
        public string? SpanId { get { return this.SpanIdOption; } set { this.SpanIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context parent span ID (typically the HAR log span ID)
        /// </summary>
        /// <value>W3C Trace Context parent span ID (typically the HAR log span ID)</value>
        [JsonPropertyName("_parent_id")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageTiming {\n");
            sb.Append("  OnContentLoad: ").Append(OnContentLoad).Append("\n");
            sb.Append("  OnLoad: ").Append(OnLoad).Append("\n");
            sb.Append("  FirstInputDelay: ").Append(FirstInputDelay).Append("\n");
            sb.Append("  FirstPaint: ").Append(FirstPaint).Append("\n");
            sb.Append("  CumulativeLayoutShift: ").Append(CumulativeLayoutShift).Append("\n");
            sb.Append("  LargestContentfulPaint: ").Append(LargestContentfulPaint).Append("\n");
            sb.Append("  DomInteractive: ").Append(DomInteractive).Append("\n");
            sb.Append("  FirstContentfulPaint: ").Append(FirstContentfulPaint).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  SpanId: ").Append(SpanId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageTiming" />
    /// </summary>
    public class PageTimingJsonConverter : JsonConverter<PageTiming>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageTiming" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageTiming Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> onContentLoad = default;
            Option<int?> onLoad = default;
            Option<int?> firstInputDelay = default;
            Option<int?> firstPaint = default;
            Option<int?> cumulativeLayoutShift = default;
            Option<int?> largestContentfulPaint = default;
            Option<int?> domInteractive = default;
            Option<int?> firstContentfulPaint = default;
            Option<int?> dns = default;
            Option<int?> ssl = default;
            Option<int?> timeToFirstByte = default;
            Option<string?> href = default;
            Option<string?> spanId = default;
            Option<string?> parentId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "onContentLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                onContentLoad = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "onLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                onLoad = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_firstInputDelay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstInputDelay = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_firstPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstPaint = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_cumulativeLayoutShift":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cumulativeLayoutShift = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_largestContentfulPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                largestContentfulPaint = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_domInteractive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                domInteractive = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_firstContentfulPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstContentfulPaint = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_dns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dns = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_ssl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ssl = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_timeToFirstByte":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeToFirstByte = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_href":
                            href = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_span_id":
                            spanId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (onContentLoad.IsSet && onContentLoad.Value == null)
                throw new ArgumentNullException(nameof(onContentLoad), "Property is not nullable for class PageTiming.");

            if (onLoad.IsSet && onLoad.Value == null)
                throw new ArgumentNullException(nameof(onLoad), "Property is not nullable for class PageTiming.");

            if (firstInputDelay.IsSet && firstInputDelay.Value == null)
                throw new ArgumentNullException(nameof(firstInputDelay), "Property is not nullable for class PageTiming.");

            if (firstPaint.IsSet && firstPaint.Value == null)
                throw new ArgumentNullException(nameof(firstPaint), "Property is not nullable for class PageTiming.");

            if (cumulativeLayoutShift.IsSet && cumulativeLayoutShift.Value == null)
                throw new ArgumentNullException(nameof(cumulativeLayoutShift), "Property is not nullable for class PageTiming.");

            if (largestContentfulPaint.IsSet && largestContentfulPaint.Value == null)
                throw new ArgumentNullException(nameof(largestContentfulPaint), "Property is not nullable for class PageTiming.");

            if (domInteractive.IsSet && domInteractive.Value == null)
                throw new ArgumentNullException(nameof(domInteractive), "Property is not nullable for class PageTiming.");

            if (firstContentfulPaint.IsSet && firstContentfulPaint.Value == null)
                throw new ArgumentNullException(nameof(firstContentfulPaint), "Property is not nullable for class PageTiming.");

            if (dns.IsSet && dns.Value == null)
                throw new ArgumentNullException(nameof(dns), "Property is not nullable for class PageTiming.");

            if (ssl.IsSet && ssl.Value == null)
                throw new ArgumentNullException(nameof(ssl), "Property is not nullable for class PageTiming.");

            if (timeToFirstByte.IsSet && timeToFirstByte.Value == null)
                throw new ArgumentNullException(nameof(timeToFirstByte), "Property is not nullable for class PageTiming.");

            if (href.IsSet && href.Value == null)
                throw new ArgumentNullException(nameof(href), "Property is not nullable for class PageTiming.");

            if (spanId.IsSet && spanId.Value == null)
                throw new ArgumentNullException(nameof(spanId), "Property is not nullable for class PageTiming.");

            if (parentId.IsSet && parentId.Value == null)
                throw new ArgumentNullException(nameof(parentId), "Property is not nullable for class PageTiming.");

            return new PageTiming(onContentLoad, onLoad, firstInputDelay, firstPaint, cumulativeLayoutShift, largestContentfulPaint, domInteractive, firstContentfulPaint, dns, ssl, timeToFirstByte, href, spanId, parentId);
        }

        /// <summary>
        /// Serializes a <see cref="PageTiming" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageTiming"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageTiming pageTiming, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageTiming, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageTiming" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageTiming"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageTiming pageTiming, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pageTiming.HrefOption.IsSet && pageTiming.Href == null)
                throw new ArgumentNullException(nameof(pageTiming.Href), "Property is required for class PageTiming.");

            if (pageTiming.SpanIdOption.IsSet && pageTiming.SpanId == null)
                throw new ArgumentNullException(nameof(pageTiming.SpanId), "Property is required for class PageTiming.");

            if (pageTiming.ParentIdOption.IsSet && pageTiming.ParentId == null)
                throw new ArgumentNullException(nameof(pageTiming.ParentId), "Property is required for class PageTiming.");

            if (pageTiming.OnContentLoadOption.IsSet)
                writer.WriteNumber("onContentLoad", pageTiming.OnContentLoadOption.Value!.Value);

            if (pageTiming.OnLoadOption.IsSet)
                writer.WriteNumber("onLoad", pageTiming.OnLoadOption.Value!.Value);

            if (pageTiming.FirstInputDelayOption.IsSet)
                writer.WriteNumber("_firstInputDelay", pageTiming.FirstInputDelayOption.Value!.Value);

            if (pageTiming.FirstPaintOption.IsSet)
                writer.WriteNumber("_firstPaint", pageTiming.FirstPaintOption.Value!.Value);

            if (pageTiming.CumulativeLayoutShiftOption.IsSet)
                writer.WriteNumber("_cumulativeLayoutShift", pageTiming.CumulativeLayoutShiftOption.Value!.Value);

            if (pageTiming.LargestContentfulPaintOption.IsSet)
                writer.WriteNumber("_largestContentfulPaint", pageTiming.LargestContentfulPaintOption.Value!.Value);

            if (pageTiming.DomInteractiveOption.IsSet)
                writer.WriteNumber("_domInteractive", pageTiming.DomInteractiveOption.Value!.Value);

            if (pageTiming.FirstContentfulPaintOption.IsSet)
                writer.WriteNumber("_firstContentfulPaint", pageTiming.FirstContentfulPaintOption.Value!.Value);

            if (pageTiming.DnsOption.IsSet)
                writer.WriteNumber("_dns", pageTiming.DnsOption.Value!.Value);

            if (pageTiming.SslOption.IsSet)
                writer.WriteNumber("_ssl", pageTiming.SslOption.Value!.Value);

            if (pageTiming.TimeToFirstByteOption.IsSet)
                writer.WriteNumber("_timeToFirstByte", pageTiming.TimeToFirstByteOption.Value!.Value);

            if (pageTiming.HrefOption.IsSet)
                writer.WriteString("_href", pageTiming.Href);

            if (pageTiming.SpanIdOption.IsSet)
                writer.WriteString("_span_id", pageTiming.SpanId);

            if (pageTiming.ParentIdOption.IsSet)
                writer.WriteString("_parent_id", pageTiming.ParentId);
        }
    }
}
