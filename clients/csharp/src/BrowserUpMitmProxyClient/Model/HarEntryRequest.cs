// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryRequest
    /// </summary>
    public partial class HarEntryRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryRequest" /> class.
        /// </summary>
        /// <param name="method">method</param>
        /// <param name="url">url</param>
        /// <param name="httpVersion">httpVersion</param>
        /// <param name="cookies">cookies</param>
        /// <param name="headers">headers</param>
        /// <param name="queryString">queryString</param>
        /// <param name="headersSize">headersSize</param>
        /// <param name="bodySize">bodySize</param>
        /// <param name="postData">postData</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryRequest(string method, string url, string httpVersion, List<HarEntryRequestCookiesInner> cookies, List<Header> headers, List<HarEntryRequestQueryStringInner> queryString, int headersSize, int bodySize, Option<HarEntryRequestPostData?> postData = default, Option<string?> comment = default)
        {
            Method = method;
            Url = url;
            HttpVersion = httpVersion;
            Cookies = cookies;
            Headers = headers;
            QueryString = queryString;
            HeadersSize = headersSize;
            BodySize = bodySize;
            PostDataOption = postData;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [JsonPropertyName("method")]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets HttpVersion
        /// </summary>
        [JsonPropertyName("httpVersion")]
        public string HttpVersion { get; set; }

        /// <summary>
        /// Gets or Sets Cookies
        /// </summary>
        [JsonPropertyName("cookies")]
        public List<HarEntryRequestCookiesInner> Cookies { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [JsonPropertyName("headers")]
        public List<Header> Headers { get; set; }

        /// <summary>
        /// Gets or Sets QueryString
        /// </summary>
        [JsonPropertyName("queryString")]
        public List<HarEntryRequestQueryStringInner> QueryString { get; set; }

        /// <summary>
        /// Gets or Sets HeadersSize
        /// </summary>
        [JsonPropertyName("headersSize")]
        public int HeadersSize { get; set; }

        /// <summary>
        /// Gets or Sets BodySize
        /// </summary>
        [JsonPropertyName("bodySize")]
        public int BodySize { get; set; }

        /// <summary>
        /// Used to track the state of PostData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HarEntryRequestPostData?> PostDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets PostData
        /// </summary>
        [JsonPropertyName("postData")]
        public HarEntryRequestPostData? PostData { get { return this.PostDataOption; } set { this.PostDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryRequest {\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  HttpVersion: ").Append(HttpVersion).Append("\n");
            sb.Append("  Cookies: ").Append(Cookies).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  HeadersSize: ").Append(HeadersSize).Append("\n");
            sb.Append("  BodySize: ").Append(BodySize).Append("\n");
            sb.Append("  PostData: ").Append(PostData).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryRequest" />
    /// </summary>
    public class HarEntryRequestJsonConverter : JsonConverter<HarEntryRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> method = default;
            Option<string?> url = default;
            Option<string?> httpVersion = default;
            Option<List<HarEntryRequestCookiesInner>?> cookies = default;
            Option<List<Header>?> headers = default;
            Option<List<HarEntryRequestQueryStringInner>?> queryString = default;
            Option<int?> headersSize = default;
            Option<int?> bodySize = default;
            Option<HarEntryRequestPostData?> postData = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "method":
                            method = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "httpVersion":
                            httpVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cookies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cookies = new Option<List<HarEntryRequestCookiesInner>?>(JsonSerializer.Deserialize<List<HarEntryRequestCookiesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "headers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                headers = new Option<List<Header>?>(JsonSerializer.Deserialize<List<Header>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "queryString":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                queryString = new Option<List<HarEntryRequestQueryStringInner>?>(JsonSerializer.Deserialize<List<HarEntryRequestQueryStringInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "headersSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                headersSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bodySize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bodySize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "postData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                postData = new Option<HarEntryRequestPostData?>(JsonSerializer.Deserialize<HarEntryRequestPostData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!method.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(method));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(url));

            if (!httpVersion.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(httpVersion));

            if (!cookies.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(cookies));

            if (!headers.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(headers));

            if (!queryString.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(queryString));

            if (!headersSize.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(headersSize));

            if (!bodySize.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequest.", nameof(bodySize));

            if (method.IsSet && method.Value == null)
                throw new ArgumentNullException(nameof(method), "Property is not nullable for class HarEntryRequest.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class HarEntryRequest.");

            if (httpVersion.IsSet && httpVersion.Value == null)
                throw new ArgumentNullException(nameof(httpVersion), "Property is not nullable for class HarEntryRequest.");

            if (cookies.IsSet && cookies.Value == null)
                throw new ArgumentNullException(nameof(cookies), "Property is not nullable for class HarEntryRequest.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class HarEntryRequest.");

            if (queryString.IsSet && queryString.Value == null)
                throw new ArgumentNullException(nameof(queryString), "Property is not nullable for class HarEntryRequest.");

            if (headersSize.IsSet && headersSize.Value == null)
                throw new ArgumentNullException(nameof(headersSize), "Property is not nullable for class HarEntryRequest.");

            if (bodySize.IsSet && bodySize.Value == null)
                throw new ArgumentNullException(nameof(bodySize), "Property is not nullable for class HarEntryRequest.");

            if (postData.IsSet && postData.Value == null)
                throw new ArgumentNullException(nameof(postData), "Property is not nullable for class HarEntryRequest.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryRequest.");

            return new HarEntryRequest(method.Value!, url.Value!, httpVersion.Value!, cookies.Value!, headers.Value!, queryString.Value!, headersSize.Value!.Value!, bodySize.Value!.Value!, postData, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryRequest harEntryRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryRequest harEntryRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryRequest.Method == null)
                throw new ArgumentNullException(nameof(harEntryRequest.Method), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.Url == null)
                throw new ArgumentNullException(nameof(harEntryRequest.Url), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.HttpVersion == null)
                throw new ArgumentNullException(nameof(harEntryRequest.HttpVersion), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.Cookies == null)
                throw new ArgumentNullException(nameof(harEntryRequest.Cookies), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.Headers == null)
                throw new ArgumentNullException(nameof(harEntryRequest.Headers), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.QueryString == null)
                throw new ArgumentNullException(nameof(harEntryRequest.QueryString), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.PostDataOption.IsSet && harEntryRequest.PostData == null)
                throw new ArgumentNullException(nameof(harEntryRequest.PostData), "Property is required for class HarEntryRequest.");

            if (harEntryRequest.CommentOption.IsSet && harEntryRequest.Comment == null)
                throw new ArgumentNullException(nameof(harEntryRequest.Comment), "Property is required for class HarEntryRequest.");

            writer.WriteString("method", harEntryRequest.Method);

            writer.WriteString("url", harEntryRequest.Url);

            writer.WriteString("httpVersion", harEntryRequest.HttpVersion);

            writer.WritePropertyName("cookies");
            JsonSerializer.Serialize(writer, harEntryRequest.Cookies, jsonSerializerOptions);
            writer.WritePropertyName("headers");
            JsonSerializer.Serialize(writer, harEntryRequest.Headers, jsonSerializerOptions);
            writer.WritePropertyName("queryString");
            JsonSerializer.Serialize(writer, harEntryRequest.QueryString, jsonSerializerOptions);
            writer.WriteNumber("headersSize", harEntryRequest.HeadersSize);

            writer.WriteNumber("bodySize", harEntryRequest.BodySize);

            if (harEntryRequest.PostDataOption.IsSet)
            {
                writer.WritePropertyName("postData");
                JsonSerializer.Serialize(writer, harEntryRequest.PostData, jsonSerializerOptions);
            }
            if (harEntryRequest.CommentOption.IsSet)
                writer.WriteString("comment", harEntryRequest.Comment);
        }
    }
}
