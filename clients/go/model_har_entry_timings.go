/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarEntryTimings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryTimings{}

// HarEntryTimings struct for HarEntryTimings
type HarEntryTimings struct {
	Dns int64 `json:"dns"`
	Connect int64 `json:"connect"`
	Blocked int64 `json:"blocked"`
	Send int64 `json:"send"`
	Wait int64 `json:"wait"`
	Receive int64 `json:"receive"`
	Ssl int64 `json:"ssl"`
	Comment *string `json:"comment,omitempty"`
}

type _HarEntryTimings HarEntryTimings

// NewHarEntryTimings instantiates a new HarEntryTimings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryTimings(dns int64, connect int64, blocked int64, send int64, wait int64, receive int64, ssl int64) *HarEntryTimings {
	this := HarEntryTimings{}
	this.Dns = dns
	this.Connect = connect
	this.Blocked = blocked
	this.Send = send
	this.Wait = wait
	this.Receive = receive
	this.Ssl = ssl
	return &this
}

// NewHarEntryTimingsWithDefaults instantiates a new HarEntryTimings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryTimingsWithDefaults() *HarEntryTimings {
	this := HarEntryTimings{}
	var dns int64 = -1
	this.Dns = dns
	var connect int64 = -1
	this.Connect = connect
	var blocked int64 = -1
	this.Blocked = blocked
	var send int64 = -1
	this.Send = send
	var wait int64 = -1
	this.Wait = wait
	var receive int64 = -1
	this.Receive = receive
	var ssl int64 = -1
	this.Ssl = ssl
	return &this
}

// GetDns returns the Dns field value
func (o *HarEntryTimings) GetDns() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Dns
}

// GetDnsOk returns a tuple with the Dns field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetDnsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dns, true
}

// SetDns sets field value
func (o *HarEntryTimings) SetDns(v int64) {
	o.Dns = v
}

// GetConnect returns the Connect field value
func (o *HarEntryTimings) GetConnect() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Connect
}

// GetConnectOk returns a tuple with the Connect field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetConnectOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connect, true
}

// SetConnect sets field value
func (o *HarEntryTimings) SetConnect(v int64) {
	o.Connect = v
}

// GetBlocked returns the Blocked field value
func (o *HarEntryTimings) GetBlocked() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Blocked
}

// GetBlockedOk returns a tuple with the Blocked field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetBlockedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Blocked, true
}

// SetBlocked sets field value
func (o *HarEntryTimings) SetBlocked(v int64) {
	o.Blocked = v
}

// GetSend returns the Send field value
func (o *HarEntryTimings) GetSend() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Send
}

// GetSendOk returns a tuple with the Send field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetSendOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Send, true
}

// SetSend sets field value
func (o *HarEntryTimings) SetSend(v int64) {
	o.Send = v
}

// GetWait returns the Wait field value
func (o *HarEntryTimings) GetWait() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Wait
}

// GetWaitOk returns a tuple with the Wait field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetWaitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wait, true
}

// SetWait sets field value
func (o *HarEntryTimings) SetWait(v int64) {
	o.Wait = v
}

// GetReceive returns the Receive field value
func (o *HarEntryTimings) GetReceive() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Receive
}

// GetReceiveOk returns a tuple with the Receive field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetReceiveOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receive, true
}

// SetReceive sets field value
func (o *HarEntryTimings) SetReceive(v int64) {
	o.Receive = v
}

// GetSsl returns the Ssl field value
func (o *HarEntryTimings) GetSsl() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetSslOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ssl, true
}

// SetSsl sets field value
func (o *HarEntryTimings) SetSsl(v int64) {
	o.Ssl = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryTimings) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryTimings) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryTimings) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryTimings) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryTimings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryTimings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dns"] = o.Dns
	toSerialize["connect"] = o.Connect
	toSerialize["blocked"] = o.Blocked
	toSerialize["send"] = o.Send
	toSerialize["wait"] = o.Wait
	toSerialize["receive"] = o.Receive
	toSerialize["ssl"] = o.Ssl
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *HarEntryTimings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dns",
		"connect",
		"blocked",
		"send",
		"wait",
		"receive",
		"ssl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntryTimings := _HarEntryTimings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarEntryTimings)

	if err != nil {
		return err
	}

	*o = HarEntryTimings(varHarEntryTimings)

	return err
}

type NullableHarEntryTimings struct {
	value *HarEntryTimings
	isSet bool
}

func (v NullableHarEntryTimings) Get() *HarEntryTimings {
	return v.value
}

func (v *NullableHarEntryTimings) Set(val *HarEntryTimings) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryTimings) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryTimings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryTimings(val *HarEntryTimings) *NullableHarEntryTimings {
	return &NullableHarEntryTimings{value: val, isSet: true}
}

func (v NullableHarEntryTimings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryTimings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


