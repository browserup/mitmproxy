/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.browserup.proxy_client.MatchCriteriaRequestHeader;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * A set of criteria for filtering HTTP Requests and Responses.                          Criteria are AND based, and use python regular expressions for string comparison
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MatchCriteria {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private String page;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_WEBSOCKET_MESSAGE = "websocket_message";
  @SerializedName(SERIALIZED_NAME_WEBSOCKET_MESSAGE)
  private String websocketMessage;

  public static final String SERIALIZED_NAME_REQUEST_HEADER = "request_header";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADER)
  private MatchCriteriaRequestHeader requestHeader;

  public static final String SERIALIZED_NAME_REQUEST_COOKIE = "request_cookie";
  @SerializedName(SERIALIZED_NAME_REQUEST_COOKIE)
  private MatchCriteriaRequestHeader requestCookie;

  public static final String SERIALIZED_NAME_RESPONSE_HEADER = "response_header";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADER)
  private MatchCriteriaRequestHeader responseHeader;

  public static final String SERIALIZED_NAME_RESPONSE_COOKIE = "response_cookie";
  @SerializedName(SERIALIZED_NAME_RESPONSE_COOKIE)
  private MatchCriteriaRequestHeader responseCookie;

  public static final String SERIALIZED_NAME_JSON_VALID = "json_valid";
  @SerializedName(SERIALIZED_NAME_JSON_VALID)
  private Boolean jsonValid;

  public static final String SERIALIZED_NAME_JSON_PATH = "json_path";
  @SerializedName(SERIALIZED_NAME_JSON_PATH)
  private String jsonPath;

  public static final String SERIALIZED_NAME_JSON_SCHEMA = "json_schema";
  @SerializedName(SERIALIZED_NAME_JSON_SCHEMA)
  private String jsonSchema;

  public static final String SERIALIZED_NAME_ERROR_IF_NO_TRAFFIC = "error_if_no_traffic";
  @SerializedName(SERIALIZED_NAME_ERROR_IF_NO_TRAFFIC)
  private Boolean errorIfNoTraffic = true;

  public MatchCriteria() {
  }

  public MatchCriteria url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Request URL regexp to match
   * @return url
  **/
  @javax.annotation.Nullable

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public MatchCriteria page(String page) {
    
    this.page = page;
    return this;
  }

   /**
   * current|all
   * @return page
  **/
  @javax.annotation.Nullable

  public String getPage() {
    return page;
  }


  public void setPage(String page) {
    this.page = page;
  }


  public MatchCriteria status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * HTTP Status code to match.
   * @return status
  **/
  @javax.annotation.Nullable

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public MatchCriteria content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * Body content regexp content to match
   * @return content
  **/
  @javax.annotation.Nullable

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    this.content = content;
  }


  public MatchCriteria contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * Content type
   * @return contentType
  **/
  @javax.annotation.Nullable

  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public MatchCriteria websocketMessage(String websocketMessage) {
    
    this.websocketMessage = websocketMessage;
    return this;
  }

   /**
   * Websocket message text to match
   * @return websocketMessage
  **/
  @javax.annotation.Nullable

  public String getWebsocketMessage() {
    return websocketMessage;
  }


  public void setWebsocketMessage(String websocketMessage) {
    this.websocketMessage = websocketMessage;
  }


  public MatchCriteria requestHeader(MatchCriteriaRequestHeader requestHeader) {
    
    this.requestHeader = requestHeader;
    return this;
  }

   /**
   * Get requestHeader
   * @return requestHeader
  **/
  @javax.annotation.Nullable

  public MatchCriteriaRequestHeader getRequestHeader() {
    return requestHeader;
  }


  public void setRequestHeader(MatchCriteriaRequestHeader requestHeader) {
    this.requestHeader = requestHeader;
  }


  public MatchCriteria requestCookie(MatchCriteriaRequestHeader requestCookie) {
    
    this.requestCookie = requestCookie;
    return this;
  }

   /**
   * Get requestCookie
   * @return requestCookie
  **/
  @javax.annotation.Nullable

  public MatchCriteriaRequestHeader getRequestCookie() {
    return requestCookie;
  }


  public void setRequestCookie(MatchCriteriaRequestHeader requestCookie) {
    this.requestCookie = requestCookie;
  }


  public MatchCriteria responseHeader(MatchCriteriaRequestHeader responseHeader) {
    
    this.responseHeader = responseHeader;
    return this;
  }

   /**
   * Get responseHeader
   * @return responseHeader
  **/
  @javax.annotation.Nullable

  public MatchCriteriaRequestHeader getResponseHeader() {
    return responseHeader;
  }


  public void setResponseHeader(MatchCriteriaRequestHeader responseHeader) {
    this.responseHeader = responseHeader;
  }


  public MatchCriteria responseCookie(MatchCriteriaRequestHeader responseCookie) {
    
    this.responseCookie = responseCookie;
    return this;
  }

   /**
   * Get responseCookie
   * @return responseCookie
  **/
  @javax.annotation.Nullable

  public MatchCriteriaRequestHeader getResponseCookie() {
    return responseCookie;
  }


  public void setResponseCookie(MatchCriteriaRequestHeader responseCookie) {
    this.responseCookie = responseCookie;
  }


  public MatchCriteria jsonValid(Boolean jsonValid) {
    
    this.jsonValid = jsonValid;
    return this;
  }

   /**
   * Is valid JSON
   * @return jsonValid
  **/
  @javax.annotation.Nullable

  public Boolean getJsonValid() {
    return jsonValid;
  }


  public void setJsonValid(Boolean jsonValid) {
    this.jsonValid = jsonValid;
  }


  public MatchCriteria jsonPath(String jsonPath) {
    
    this.jsonPath = jsonPath;
    return this;
  }

   /**
   * Has JSON path
   * @return jsonPath
  **/
  @javax.annotation.Nullable

  public String getJsonPath() {
    return jsonPath;
  }


  public void setJsonPath(String jsonPath) {
    this.jsonPath = jsonPath;
  }


  public MatchCriteria jsonSchema(String jsonSchema) {
    
    this.jsonSchema = jsonSchema;
    return this;
  }

   /**
   * Validates against passed JSON schema
   * @return jsonSchema
  **/
  @javax.annotation.Nullable

  public String getJsonSchema() {
    return jsonSchema;
  }


  public void setJsonSchema(String jsonSchema) {
    this.jsonSchema = jsonSchema;
  }


  public MatchCriteria errorIfNoTraffic(Boolean errorIfNoTraffic) {
    
    this.errorIfNoTraffic = errorIfNoTraffic;
    return this;
  }

   /**
   * If the proxy has NO traffic at all, return error
   * @return errorIfNoTraffic
  **/
  @javax.annotation.Nullable

  public Boolean getErrorIfNoTraffic() {
    return errorIfNoTraffic;
  }


  public void setErrorIfNoTraffic(Boolean errorIfNoTraffic) {
    this.errorIfNoTraffic = errorIfNoTraffic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchCriteria matchCriteria = (MatchCriteria) o;
    return Objects.equals(this.url, matchCriteria.url) &&
        Objects.equals(this.page, matchCriteria.page) &&
        Objects.equals(this.status, matchCriteria.status) &&
        Objects.equals(this.content, matchCriteria.content) &&
        Objects.equals(this.contentType, matchCriteria.contentType) &&
        Objects.equals(this.websocketMessage, matchCriteria.websocketMessage) &&
        Objects.equals(this.requestHeader, matchCriteria.requestHeader) &&
        Objects.equals(this.requestCookie, matchCriteria.requestCookie) &&
        Objects.equals(this.responseHeader, matchCriteria.responseHeader) &&
        Objects.equals(this.responseCookie, matchCriteria.responseCookie) &&
        Objects.equals(this.jsonValid, matchCriteria.jsonValid) &&
        Objects.equals(this.jsonPath, matchCriteria.jsonPath) &&
        Objects.equals(this.jsonSchema, matchCriteria.jsonSchema) &&
        Objects.equals(this.errorIfNoTraffic, matchCriteria.errorIfNoTraffic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, page, status, content, contentType, websocketMessage, requestHeader, requestCookie, responseHeader, responseCookie, jsonValid, jsonPath, jsonSchema, errorIfNoTraffic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchCriteria {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    websocketMessage: ").append(toIndentedString(websocketMessage)).append("\n");
    sb.append("    requestHeader: ").append(toIndentedString(requestHeader)).append("\n");
    sb.append("    requestCookie: ").append(toIndentedString(requestCookie)).append("\n");
    sb.append("    responseHeader: ").append(toIndentedString(responseHeader)).append("\n");
    sb.append("    responseCookie: ").append(toIndentedString(responseCookie)).append("\n");
    sb.append("    jsonValid: ").append(toIndentedString(jsonValid)).append("\n");
    sb.append("    jsonPath: ").append(toIndentedString(jsonPath)).append("\n");
    sb.append("    jsonSchema: ").append(toIndentedString(jsonSchema)).append("\n");
    sb.append("    errorIfNoTraffic: ").append(toIndentedString(errorIfNoTraffic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("page");
    openapiFields.add("status");
    openapiFields.add("content");
    openapiFields.add("content_type");
    openapiFields.add("websocket_message");
    openapiFields.add("request_header");
    openapiFields.add("request_cookie");
    openapiFields.add("response_header");
    openapiFields.add("response_cookie");
    openapiFields.add("json_valid");
    openapiFields.add("json_path");
    openapiFields.add("json_schema");
    openapiFields.add("error_if_no_traffic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MatchCriteria
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MatchCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchCriteria is not found in the empty JSON string", MatchCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MatchCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchCriteria` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) && !jsonObj.get("page").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("websocket_message") != null && !jsonObj.get("websocket_message").isJsonNull()) && !jsonObj.get("websocket_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `websocket_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("websocket_message").toString()));
      }
      // validate the optional field `request_header`
      if (jsonObj.get("request_header") != null && !jsonObj.get("request_header").isJsonNull()) {
        MatchCriteriaRequestHeader.validateJsonObject(jsonObj.getAsJsonObject("request_header"));
      }
      // validate the optional field `request_cookie`
      if (jsonObj.get("request_cookie") != null && !jsonObj.get("request_cookie").isJsonNull()) {
        MatchCriteriaRequestHeader.validateJsonObject(jsonObj.getAsJsonObject("request_cookie"));
      }
      // validate the optional field `response_header`
      if (jsonObj.get("response_header") != null && !jsonObj.get("response_header").isJsonNull()) {
        MatchCriteriaRequestHeader.validateJsonObject(jsonObj.getAsJsonObject("response_header"));
      }
      // validate the optional field `response_cookie`
      if (jsonObj.get("response_cookie") != null && !jsonObj.get("response_cookie").isJsonNull()) {
        MatchCriteriaRequestHeader.validateJsonObject(jsonObj.getAsJsonObject("response_cookie"));
      }
      if ((jsonObj.get("json_path") != null && !jsonObj.get("json_path").isJsonNull()) && !jsonObj.get("json_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `json_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("json_path").toString()));
      }
      if ((jsonObj.get("json_schema") != null && !jsonObj.get("json_schema").isJsonNull()) && !jsonObj.get("json_schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `json_schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("json_schema").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchCriteria>() {
           @Override
           public void write(JsonWriter out, MatchCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchCriteria read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchCriteria given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchCriteria
  * @throws IOException if the JSON string is invalid with respect to MatchCriteria
  */
  public static MatchCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchCriteria.class);
  }

 /**
  * Convert an instance of MatchCriteria to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

