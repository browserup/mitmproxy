// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryTimings
    /// </summary>
    public partial class HarEntryTimings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryTimings" /> class.
        /// </summary>
        /// <param name="dns">dns (default to -1)</param>
        /// <param name="connect">connect (default to -1)</param>
        /// <param name="blocked">blocked (default to -1)</param>
        /// <param name="send">send (default to -1)</param>
        /// <param name="wait">wait (default to -1)</param>
        /// <param name="receive">receive (default to -1)</param>
        /// <param name="ssl">ssl (default to -1)</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryTimings(long dns = -1, long connect = -1, long blocked = -1, long send = -1, long wait = -1, long receive = -1, long ssl = -1, Option<string?> comment = default)
        {
            Dns = dns;
            Connect = connect;
            Blocked = blocked;
            Send = send;
            Wait = wait;
            Receive = receive;
            Ssl = ssl;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [JsonPropertyName("dns")]
        public long Dns { get; set; }

        /// <summary>
        /// Gets or Sets Connect
        /// </summary>
        [JsonPropertyName("connect")]
        public long Connect { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [JsonPropertyName("blocked")]
        public long Blocked { get; set; }

        /// <summary>
        /// Gets or Sets Send
        /// </summary>
        [JsonPropertyName("send")]
        public long Send { get; set; }

        /// <summary>
        /// Gets or Sets Wait
        /// </summary>
        [JsonPropertyName("wait")]
        public long Wait { get; set; }

        /// <summary>
        /// Gets or Sets Receive
        /// </summary>
        [JsonPropertyName("receive")]
        public long Receive { get; set; }

        /// <summary>
        /// Gets or Sets Ssl
        /// </summary>
        [JsonPropertyName("ssl")]
        public long Ssl { get; set; }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryTimings {\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Connect: ").Append(Connect).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Send: ").Append(Send).Append("\n");
            sb.Append("  Wait: ").Append(Wait).Append("\n");
            sb.Append("  Receive: ").Append(Receive).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Dns (long) minimum
            if (this.Dns < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Dns, must be a value greater than or equal to -1.", new [] { "Dns" });
            }

            // Connect (long) minimum
            if (this.Connect < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Connect, must be a value greater than or equal to -1.", new [] { "Connect" });
            }

            // Blocked (long) minimum
            if (this.Blocked < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Blocked, must be a value greater than or equal to -1.", new [] { "Blocked" });
            }

            // Send (long) minimum
            if (this.Send < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Send, must be a value greater than or equal to -1.", new [] { "Send" });
            }

            // Wait (long) minimum
            if (this.Wait < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Wait, must be a value greater than or equal to -1.", new [] { "Wait" });
            }

            // Receive (long) minimum
            if (this.Receive < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Receive, must be a value greater than or equal to -1.", new [] { "Receive" });
            }

            // Ssl (long) minimum
            if (this.Ssl < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Ssl, must be a value greater than or equal to -1.", new [] { "Ssl" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryTimings" />
    /// </summary>
    public class HarEntryTimingsJsonConverter : JsonConverter<HarEntryTimings>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryTimings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryTimings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> dns = default;
            Option<long?> connect = default;
            Option<long?> blocked = default;
            Option<long?> send = default;
            Option<long?> wait = default;
            Option<long?> receive = default;
            Option<long?> ssl = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "dns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dns = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "connect":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                connect = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "blocked":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blocked = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "send":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                send = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "wait":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                wait = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "receive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                receive = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "ssl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ssl = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!dns.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(dns));

            if (!connect.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(connect));

            if (!blocked.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(blocked));

            if (!send.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(send));

            if (!wait.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(wait));

            if (!receive.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(receive));

            if (!ssl.IsSet)
                throw new ArgumentException("Property is required for class HarEntryTimings.", nameof(ssl));

            if (dns.IsSet && dns.Value == null)
                throw new ArgumentNullException(nameof(dns), "Property is not nullable for class HarEntryTimings.");

            if (connect.IsSet && connect.Value == null)
                throw new ArgumentNullException(nameof(connect), "Property is not nullable for class HarEntryTimings.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class HarEntryTimings.");

            if (send.IsSet && send.Value == null)
                throw new ArgumentNullException(nameof(send), "Property is not nullable for class HarEntryTimings.");

            if (wait.IsSet && wait.Value == null)
                throw new ArgumentNullException(nameof(wait), "Property is not nullable for class HarEntryTimings.");

            if (receive.IsSet && receive.Value == null)
                throw new ArgumentNullException(nameof(receive), "Property is not nullable for class HarEntryTimings.");

            if (ssl.IsSet && ssl.Value == null)
                throw new ArgumentNullException(nameof(ssl), "Property is not nullable for class HarEntryTimings.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryTimings.");

            return new HarEntryTimings(dns.Value!.Value!, connect.Value!.Value!, blocked.Value!.Value!, send.Value!.Value!, wait.Value!.Value!, receive.Value!.Value!, ssl.Value!.Value!, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryTimings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryTimings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryTimings harEntryTimings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryTimings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryTimings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryTimings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryTimings harEntryTimings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryTimings.CommentOption.IsSet && harEntryTimings.Comment == null)
                throw new ArgumentNullException(nameof(harEntryTimings.Comment), "Property is required for class HarEntryTimings.");

            writer.WriteNumber("dns", harEntryTimings.Dns);

            writer.WriteNumber("connect", harEntryTimings.Connect);

            writer.WriteNumber("blocked", harEntryTimings.Blocked);

            writer.WriteNumber("send", harEntryTimings.Send);

            writer.WriteNumber("wait", harEntryTimings.Wait);

            writer.WriteNumber("receive", harEntryTimings.Receive);

            writer.WriteNumber("ssl", harEntryTimings.Ssl);

            if (harEntryTimings.CommentOption.IsSet)
                writer.WriteString("comment", harEntryTimings.Comment);
        }
    }
}
