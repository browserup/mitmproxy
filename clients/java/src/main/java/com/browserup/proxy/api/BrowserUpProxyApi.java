/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy.api;

import com.browserup.proxy_client.ApiCallback;
import com.browserup.proxy_client.ApiClient;
import com.browserup.proxy_client.ApiException;
import com.browserup.proxy_client.ApiResponse;
import com.browserup.proxy_client.Configuration;
import com.browserup.proxy_client.Pair;
import com.browserup.proxy_client.ProgressRequestBody;
import com.browserup.proxy_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.browserup.proxy_client.Error;
import com.browserup.proxy_client.Har;
import com.browserup.proxy_client.MatchCriteria;
import com.browserup.proxy_client.Metric;
import com.browserup.proxy_client.VerifyResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BrowserUpProxyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BrowserUpProxyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BrowserUpProxyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addError
     * @param error Receives an error to track. Internally, the error is stored in an array in the har under the _errors key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Error was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The Error was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addErrorCall(Error error, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = error;

        // create path and map variables
        String localVarPath = "/har/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addErrorValidateBeforeCall(Error error, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'error' is set
        if (error == null) {
            throw new ApiException("Missing the required parameter 'error' when calling addError(Async)");
        }

        return addErrorCall(error, _callback);

    }

    /**
     * 
     * Add Custom Error to the captured traffic har
     * @param error Receives an error to track. Internally, the error is stored in an array in the har under the _errors key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Error was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The Error was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void addError(Error error) throws ApiException {
        addErrorWithHttpInfo(error);
    }

    /**
     * 
     * Add Custom Error to the captured traffic har
     * @param error Receives an error to track. Internally, the error is stored in an array in the har under the _errors key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Error was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The Error was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addErrorWithHttpInfo(Error error) throws ApiException {
        okhttp3.Call localVarCall = addErrorValidateBeforeCall(error, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add Custom Error to the captured traffic har
     * @param error Receives an error to track. Internally, the error is stored in an array in the har under the _errors key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The Error was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The Error was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addErrorAsync(Error error, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addErrorValidateBeforeCall(error, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addMetric
     * @param metric Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The metric was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The metric was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMetricCall(Metric metric, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = metric;

        // create path and map variables
        String localVarPath = "/har/metrics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMetricValidateBeforeCall(Metric metric, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling addMetric(Async)");
        }

        return addMetricCall(metric, _callback);

    }

    /**
     * 
     * Add Custom Metric to the captured traffic har
     * @param metric Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The metric was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The metric was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public void addMetric(Metric metric) throws ApiException {
        addMetricWithHttpInfo(metric);
    }

    /**
     * 
     * Add Custom Metric to the captured traffic har
     * @param metric Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The metric was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The metric was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addMetricWithHttpInfo(Metric metric) throws ApiException {
        okhttp3.Call localVarCall = addMetricValidateBeforeCall(metric, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add Custom Metric to the captured traffic har
     * @param metric Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The metric was added. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The metric was invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addMetricAsync(Metric metric, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMetricValidateBeforeCall(metric, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getHarLogCall(_callback);

    }

    /**
     * 
     * Get the current HAR.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har getHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = getHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the current HAR.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> getHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the current HAR.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthcheck
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/healthcheck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthcheckValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return healthcheckCall(_callback);

    }

    /**
     * 
     * Get the healthcheck
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public void healthcheck() throws ApiException {
        healthcheckWithHttpInfo();
    }

    /**
     * 
     * Get the healthcheck
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> healthcheckWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the healthcheck
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK means all is well. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthcheckAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthcheckValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for newPage
     * @param title The unique title for this har page/step. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newPageCall(String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har/page"
            .replace("{" + "title" + "}", localVarApiClient.escapeString(title.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newPageValidateBeforeCall(String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling newPage(Async)");
        }

        return newPageCall(title, _callback);

    }

    /**
     * 
     * Starts a fresh HAR Page (Step) in the current active HAR to group requests.
     * @param title The unique title for this har page/step. (required)
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har newPage(String title) throws ApiException {
        ApiResponse<Har> localVarResp = newPageWithHttpInfo(title);
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR Page (Step) in the current active HAR to group requests.
     * @param title The unique title for this har page/step. (required)
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> newPageWithHttpInfo(String title) throws ApiException {
        okhttp3.Call localVarCall = newPageValidateBeforeCall(title, null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR Page (Step) in the current active HAR to group requests.
     * @param title The unique title for this har page/step. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call newPageAsync(String title, final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = newPageValidateBeforeCall(title, _callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetHarLog
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/har";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetHarLogValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resetHarLogCall(_callback);

    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return Har
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public Har resetHarLog() throws ApiException {
        ApiResponse<Har> localVarResp = resetHarLogWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Starts a fresh HAR capture session.
     * @return ApiResponse&lt;Har&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Har> resetHarLogWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Starts a fresh HAR capture session.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The current Har file. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetHarLogAsync(final ApiCallback<Har> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetHarLogValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Har>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyNotPresent
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNotPresentCall(String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/not_present/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyNotPresentValidateBeforeCall(String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling verifyNotPresent(Async)");
        }

        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifyNotPresent(Async)");
        }

        return verifyNotPresentCall(name, matchCriteria, _callback);

    }

    /**
     * 
     * Verify no matching items are present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifyNotPresent(String name, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifyNotPresentWithHttpInfo(name, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify no matching items are present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifyNotPresentWithHttpInfo(String name, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifyNotPresentValidateBeforeCall(name, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify no matching items are present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic had no matching items </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyNotPresentAsync(String name, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyNotPresentValidateBeforeCall(name, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPresent
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPresentCall(String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/present/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPresentValidateBeforeCall(String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling verifyPresent(Async)");
        }

        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifyPresent(Async)");
        }

        return verifyPresentCall(name, matchCriteria, _callback);

    }

    /**
     * 
     * Verify at least one matching item is present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifyPresent(String name, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifyPresentWithHttpInfo(name, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify at least one matching item is present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifyPresentWithHttpInfo(String name, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifyPresentValidateBeforeCall(name, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify at least one matching item is present in the captured traffic
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPresentAsync(String name, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPresentValidateBeforeCall(name, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySLA
     * @param time The time used for comparison (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySLACall(Integer time, String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/sla/{time}/{name}"
            .replace("{" + "time" + "}", localVarApiClient.escapeString(time.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySLAValidateBeforeCall(Integer time, String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling verifySLA(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling verifySLA(Async)");
        }

        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifySLA(Async)");
        }

        return verifySLACall(time, name, matchCriteria, _callback);

    }

    /**
     * 
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifySLA(Integer time, String name, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifySLAWithHttpInfo(time, name, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifySLAWithHttpInfo(Integer time, String name, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifySLAValidateBeforeCall(time, name, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param time The time used for comparison (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the time criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySLAAsync(Integer time, String name, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySLAValidateBeforeCall(time, name, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifySize
     * @param size The size used for comparison, in kilobytes (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySizeCall(Integer size, String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchCriteria;

        // create path and map variables
        String localVarPath = "/verify/size/{size}/{name}"
            .replace("{" + "size" + "}", localVarApiClient.escapeString(size.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifySizeValidateBeforeCall(Integer size, String name, MatchCriteria matchCriteria, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'size' is set
        if (size == null) {
            throw new ApiException("Missing the required parameter 'size' when calling verifySize(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling verifySize(Async)");
        }

        // verify the required parameter 'matchCriteria' is set
        if (matchCriteria == null) {
            throw new ApiException("Missing the required parameter 'matchCriteria' when calling verifySize(Async)");
        }

        return verifySizeCall(size, name, matchCriteria, _callback);

    }

    /**
     * 
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison, in kilobytes (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return VerifyResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public VerifyResult verifySize(Integer size, String name, MatchCriteria matchCriteria) throws ApiException {
        ApiResponse<VerifyResult> localVarResp = verifySizeWithHttpInfo(size, name, matchCriteria);
        return localVarResp.getData();
    }

    /**
     * 
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison, in kilobytes (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @return ApiResponse&lt;VerifyResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyResult> verifySizeWithHttpInfo(Integer size, String name, MatchCriteria matchCriteria) throws ApiException {
        okhttp3.Call localVarCall = verifySizeValidateBeforeCall(size, name, matchCriteria, null);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Verify matching items in the captured traffic meet the size criteria
     * @param size The size used for comparison, in kilobytes (required)
     * @param name The unique name for this verification operation (required)
     * @param matchCriteria Match criteria to select requests - response pairs for size tests (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The traffic conformed to the size criteria. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The MatchCriteria are invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifySizeAsync(Integer size, String name, MatchCriteria matchCriteria, final ApiCallback<VerifyResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifySizeValidateBeforeCall(size, name, matchCriteria, _callback);
        Type localVarReturnType = new TypeToken<VerifyResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
