/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarEntryRequestPostData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryRequestPostData{}

// HarEntryRequestPostData Posted data info.
type HarEntryRequestPostData struct {
	MimeType string `json:"mimeType"`
	Text *string `json:"text,omitempty"`
	Params []HarEntryRequestPostDataParamsInner `json:"params,omitempty"`
}

type _HarEntryRequestPostData HarEntryRequestPostData

// NewHarEntryRequestPostData instantiates a new HarEntryRequestPostData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryRequestPostData(mimeType string) *HarEntryRequestPostData {
	this := HarEntryRequestPostData{}
	this.MimeType = mimeType
	return &this
}

// NewHarEntryRequestPostDataWithDefaults instantiates a new HarEntryRequestPostData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryRequestPostDataWithDefaults() *HarEntryRequestPostData {
	this := HarEntryRequestPostData{}
	return &this
}

// GetMimeType returns the MimeType field value
func (o *HarEntryRequestPostData) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostData) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *HarEntryRequestPostData) SetMimeType(v string) {
	o.MimeType = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *HarEntryRequestPostData) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostData) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *HarEntryRequestPostData) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *HarEntryRequestPostData) SetText(v string) {
	o.Text = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *HarEntryRequestPostData) GetParams() []HarEntryRequestPostDataParamsInner {
	if o == nil || IsNil(o.Params) {
		var ret []HarEntryRequestPostDataParamsInner
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostData) GetParamsOk() ([]HarEntryRequestPostDataParamsInner, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *HarEntryRequestPostData) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []HarEntryRequestPostDataParamsInner and assigns it to the Params field.
func (o *HarEntryRequestPostData) SetParams(v []HarEntryRequestPostDataParamsInner) {
	o.Params = v
}

func (o HarEntryRequestPostData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryRequestPostData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mimeType"] = o.MimeType
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	return toSerialize, nil
}

func (o *HarEntryRequestPostData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mimeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntryRequestPostData := _HarEntryRequestPostData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarEntryRequestPostData)

	if err != nil {
		return err
	}

	*o = HarEntryRequestPostData(varHarEntryRequestPostData)

	return err
}

type NullableHarEntryRequestPostData struct {
	value *HarEntryRequestPostData
	isSet bool
}

func (v NullableHarEntryRequestPostData) Get() *HarEntryRequestPostData {
	return v.value
}

func (v *NullableHarEntryRequestPostData) Set(val *HarEntryRequestPostData) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryRequestPostData) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryRequestPostData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryRequestPostData(val *HarEntryRequestPostData) *NullableHarEntryRequestPostData {
	return &NullableHarEntryRequestPostData{value: val, isSet: true}
}

func (v NullableHarEntryRequestPostData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryRequestPostData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


