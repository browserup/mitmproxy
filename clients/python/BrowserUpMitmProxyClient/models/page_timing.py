# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.26.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PageTiming(BaseModel):
    """
    PageTiming
    """ # noqa: E501
    on_content_load: Optional[StrictInt] = Field(default=None, description="onContentLoad per the browser", alias="onContentLoad")
    on_load: Optional[StrictInt] = Field(default=None, description="onLoad per the browser", alias="onLoad")
    first_input_delay: Optional[StrictInt] = Field(default=None, description="firstInputDelay from the browser", alias="_firstInputDelay")
    first_paint: Optional[StrictInt] = Field(default=None, description="firstPaint from the browser", alias="_firstPaint")
    cumulative_layout_shift: Optional[StrictInt] = Field(default=None, description="cumulativeLayoutShift metric from the browser", alias="_cumulativeLayoutShift")
    largest_contentful_paint: Optional[StrictInt] = Field(default=None, description="largestContentfulPaint from the browser", alias="_largestContentfulPaint")
    dom_interactive: Optional[StrictInt] = Field(default=None, description="domInteractive from the browser", alias="_domInteractive")
    first_contentful_paint: Optional[StrictInt] = Field(default=None, description="firstContentfulPaint from the browser", alias="_firstContentfulPaint")
    dns: Optional[StrictInt] = Field(default=None, description="dns lookup time from the browser", alias="_dns")
    ssl: Optional[StrictInt] = Field(default=None, description="Ssl connect time from the browser", alias="_ssl")
    time_to_first_byte: Optional[StrictInt] = Field(default=None, description="Time to first byte of the page's first request per the browser", alias="_timeToFirstByte")
    href: Optional[StrictStr] = Field(default=None, description="Top level href, including hashtag, etc per the browser", alias="_href")
    span_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context span ID for this page", alias="_span_id")
    parent_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context parent span ID (typically the HAR log span ID)", alias="_parent_id")
    __properties: ClassVar[List[str]] = ["onContentLoad", "onLoad", "_firstInputDelay", "_firstPaint", "_cumulativeLayoutShift", "_largestContentfulPaint", "_domInteractive", "_firstContentfulPaint", "_dns", "_ssl", "_timeToFirstByte", "_href", "_span_id", "_parent_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageTiming from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageTiming from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "onContentLoad": obj.get("onContentLoad"),
            "onLoad": obj.get("onLoad"),
            "_firstInputDelay": obj.get("_firstInputDelay"),
            "_firstPaint": obj.get("_firstPaint"),
            "_cumulativeLayoutShift": obj.get("_cumulativeLayoutShift"),
            "_largestContentfulPaint": obj.get("_largestContentfulPaint"),
            "_domInteractive": obj.get("_domInteractive"),
            "_firstContentfulPaint": obj.get("_firstContentfulPaint"),
            "_dns": obj.get("_dns"),
            "_ssl": obj.get("_ssl"),
            "_timeToFirstByte": obj.get("_timeToFirstByte"),
            "_href": obj.get("_href"),
            "_span_id": obj.get("_span_id"),
            "_parent_id": obj.get("_parent_id")
        })
        return _obj


