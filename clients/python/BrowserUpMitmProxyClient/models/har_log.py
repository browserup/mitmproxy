# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.25
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from BrowserUpMitmProxyClient.models.har_entry import HarEntry
from BrowserUpMitmProxyClient.models.har_log_creator import HarLogCreator
from BrowserUpMitmProxyClient.models.page import Page
from typing import Optional, Set
from typing_extensions import Self

class HarLog(BaseModel):
    """
    HarLog
    """ # noqa: E501
    version: StrictStr
    creator: HarLogCreator
    browser: Optional[HarLogCreator] = None
    pages: List[Page]
    entries: List[HarEntry]
    trace_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context trace ID for distributed tracing", alias="_trace_id")
    span_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context span ID for this HAR trace root", alias="_span_id")
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["version", "creator", "browser", "pages", "entries", "_trace_id", "_span_id", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HarLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of browser
        if self.browser:
            _dict['browser'] = self.browser.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in pages (list)
        _items = []
        if self.pages:
            for _item_pages in self.pages:
                if _item_pages:
                    _items.append(_item_pages.to_dict())
            _dict['pages'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in entries (list)
        _items = []
        if self.entries:
            for _item_entries in self.entries:
                if _item_entries:
                    _items.append(_item_entries.to_dict())
            _dict['entries'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HarLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "creator": HarLogCreator.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "browser": HarLogCreator.from_dict(obj["browser"]) if obj.get("browser") is not None else None,
            "pages": [Page.from_dict(_item) for _item in obj["pages"]] if obj.get("pages") is not None else None,
            "entries": [HarEntry.from_dict(_item) for _item in obj["entries"]] if obj.get("entries") is not None else None,
            "_trace_id": obj.get("_trace_id"),
            "_span_id": obj.get("_span_id"),
            "comment": obj.get("comment")
        })
        return _obj


