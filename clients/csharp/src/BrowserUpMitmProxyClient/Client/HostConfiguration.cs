/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using BrowserUpMitmProxyClient.Api;
using BrowserUpMitmProxyClient.Model;

namespace BrowserUpMitmProxyClient.Client
{
    /// <summary>
    /// Provides hosting configuration for BrowserUpMitmProxyClient
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new ActionJsonConverter());
            _jsonOptions.Converters.Add(new ErrorJsonConverter());
            _jsonOptions.Converters.Add(new HarJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryCacheJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryCacheBeforeRequestJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryRequestJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryRequestCookiesInnerJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryRequestPostDataJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryRequestPostDataParamsInnerJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryRequestQueryStringInnerJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryResponseJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryResponseContentJsonConverter());
            _jsonOptions.Converters.Add(new HarEntryTimingsJsonConverter());
            _jsonOptions.Converters.Add(new HarLogJsonConverter());
            _jsonOptions.Converters.Add(new HarLogCreatorJsonConverter());
            _jsonOptions.Converters.Add(new HeaderJsonConverter());
            _jsonOptions.Converters.Add(new LargestContentfulPaintJsonConverter());
            _jsonOptions.Converters.Add(new MatchCriteriaJsonConverter());
            _jsonOptions.Converters.Add(new MetricJsonConverter());
            _jsonOptions.Converters.Add(new NameValuePairJsonConverter());
            _jsonOptions.Converters.Add(new PageJsonConverter());
            _jsonOptions.Converters.Add(new PageTimingJsonConverter());
            _jsonOptions.Converters.Add(new PageTimingsJsonConverter());
            _jsonOptions.Converters.Add(new VerifyResultJsonConverter());
            _jsonOptions.Converters.Add(new WebSocketMessageJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<BrowserUpProxyApiEvents>();
            _services.AddTransient<IBrowserUpProxyApi, BrowserUpProxyApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IBrowserUpProxyApi, BrowserUpProxyApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
