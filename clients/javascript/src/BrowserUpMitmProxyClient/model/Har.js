/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarLog from './HarLog';

/**
 * The Har model module.
 * @module BrowserUpMitmProxyClient/model/Har
 * @version 1.0.0
 */
class Har {
    /**
     * Constructs a new <code>Har</code>.
     * @alias module:BrowserUpMitmProxyClient/model/Har
     * @extends Object
     * @param log {module:BrowserUpMitmProxyClient/model/HarLog} 
     */
    constructor(log) { 
        
        Har.initialize(this, log);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, log) { 
        obj['log'] = log;
    }

    /**
     * Constructs a <code>Har</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/Har} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/Har} The populated <code>Har</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Har();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('log')) {
                obj['log'] = HarLog.constructFromObject(data['log']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Har</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Har</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Har.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `log`
        if (data['log']) { // data not null
          HarLog.validateJSON(data['log']);
        }

        return true;
    }


}

Har.RequiredProperties = ["log"];

/**
 * @member {module:BrowserUpMitmProxyClient/model/HarLog} log
 */
Har.prototype['log'] = undefined;






export default Har;

