/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the Page type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Page{}

// Page struct for Page
type Page struct {
	StartedDateTime time.Time `json:"startedDateTime"`
	Id string `json:"id"`
	Title string `json:"title"`
	Verifications []VerifyResult `json:"_verifications,omitempty"`
	Metrics []Metric `json:"_metrics,omitempty"`
	Errors []Error `json:"_errors,omitempty"`
	// W3C Trace Context span ID for this page
	SpanId *string `json:"_span_id,omitempty"`
	// W3C Trace Context parent span ID (typically the HAR log span ID)
	ParentId *string `json:"_parent_id,omitempty"`
	PageTimings PageTimings `json:"pageTimings"`
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Page Page

// NewPage instantiates a new Page object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPage(startedDateTime time.Time, id string, title string, pageTimings PageTimings) *Page {
	this := Page{}
	this.StartedDateTime = startedDateTime
	this.Id = id
	this.Title = title
	this.PageTimings = pageTimings
	return &this
}

// NewPageWithDefaults instantiates a new Page object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageWithDefaults() *Page {
	this := Page{}
	return &this
}

// GetStartedDateTime returns the StartedDateTime field value
func (o *Page) GetStartedDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedDateTime
}

// GetStartedDateTimeOk returns a tuple with the StartedDateTime field value
// and a boolean to check if the value has been set.
func (o *Page) GetStartedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedDateTime, true
}

// SetStartedDateTime sets field value
func (o *Page) SetStartedDateTime(v time.Time) {
	o.StartedDateTime = v
}

// GetId returns the Id field value
func (o *Page) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Page) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Page) SetId(v string) {
	o.Id = v
}

// GetTitle returns the Title field value
func (o *Page) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Page) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Page) SetTitle(v string) {
	o.Title = v
}

// GetVerifications returns the Verifications field value if set, zero value otherwise.
func (o *Page) GetVerifications() []VerifyResult {
	if o == nil || IsNil(o.Verifications) {
		var ret []VerifyResult
		return ret
	}
	return o.Verifications
}

// GetVerificationsOk returns a tuple with the Verifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetVerificationsOk() ([]VerifyResult, bool) {
	if o == nil || IsNil(o.Verifications) {
		return nil, false
	}
	return o.Verifications, true
}

// HasVerifications returns a boolean if a field has been set.
func (o *Page) HasVerifications() bool {
	if o != nil && !IsNil(o.Verifications) {
		return true
	}

	return false
}

// SetVerifications gets a reference to the given []VerifyResult and assigns it to the Verifications field.
func (o *Page) SetVerifications(v []VerifyResult) {
	o.Verifications = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *Page) GetMetrics() []Metric {
	if o == nil || IsNil(o.Metrics) {
		var ret []Metric
		return ret
	}
	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetMetricsOk() ([]Metric, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *Page) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given []Metric and assigns it to the Metrics field.
func (o *Page) SetMetrics(v []Metric) {
	o.Metrics = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Page) GetErrors() []Error {
	if o == nil || IsNil(o.Errors) {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Page) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *Page) SetErrors(v []Error) {
	o.Errors = v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *Page) GetSpanId() string {
	if o == nil || IsNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetSpanIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *Page) HasSpanId() bool {
	if o != nil && !IsNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *Page) SetSpanId(v string) {
	o.SpanId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Page) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Page) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *Page) SetParentId(v string) {
	o.ParentId = &v
}

// GetPageTimings returns the PageTimings field value
func (o *Page) GetPageTimings() PageTimings {
	if o == nil {
		var ret PageTimings
		return ret
	}

	return o.PageTimings
}

// GetPageTimingsOk returns a tuple with the PageTimings field value
// and a boolean to check if the value has been set.
func (o *Page) GetPageTimingsOk() (*PageTimings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageTimings, true
}

// SetPageTimings sets field value
func (o *Page) SetPageTimings(v PageTimings) {
	o.PageTimings = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Page) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Page) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Page) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Page) SetComment(v string) {
	o.Comment = &v
}

func (o Page) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Page) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startedDateTime"] = o.StartedDateTime
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if !IsNil(o.Verifications) {
		toSerialize["_verifications"] = o.Verifications
	}
	if !IsNil(o.Metrics) {
		toSerialize["_metrics"] = o.Metrics
	}
	if !IsNil(o.Errors) {
		toSerialize["_errors"] = o.Errors
	}
	if !IsNil(o.SpanId) {
		toSerialize["_span_id"] = o.SpanId
	}
	if !IsNil(o.ParentId) {
		toSerialize["_parent_id"] = o.ParentId
	}
	toSerialize["pageTimings"] = o.PageTimings
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Page) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startedDateTime",
		"id",
		"title",
		"pageTimings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPage := _Page{}

	err = json.Unmarshal(data, &varPage)

	if err != nil {
		return err
	}

	*o = Page(varPage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "startedDateTime")
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "_verifications")
		delete(additionalProperties, "_metrics")
		delete(additionalProperties, "_errors")
		delete(additionalProperties, "_span_id")
		delete(additionalProperties, "_parent_id")
		delete(additionalProperties, "pageTimings")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePage struct {
	value *Page
	isSet bool
}

func (v NullablePage) Get() *Page {
	return v.value
}

func (v *NullablePage) Set(val *Page) {
	v.value = val
	v.isSet = true
}

func (v NullablePage) IsSet() bool {
	return v.isSet
}

func (v *NullablePage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePage(val *Page) *NullablePage {
	return &NullablePage{value: val, isSet: true}
}

func (v NullablePage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


