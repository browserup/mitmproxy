/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.browserup.proxy_client.LargestContentfulPaint;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * PageTimings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PageTimings {
  public static final String SERIALIZED_NAME_ON_CONTENT_LOAD = "onContentLoad";
  @SerializedName(SERIALIZED_NAME_ON_CONTENT_LOAD)
  private Long onContentLoad = -1l;

  public static final String SERIALIZED_NAME_ON_LOAD = "onLoad";
  @SerializedName(SERIALIZED_NAME_ON_LOAD)
  private Long onLoad = -1l;

  public static final String SERIALIZED_NAME_HREF = "_href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private String href = "";

  public static final String SERIALIZED_NAME_DNS = "_dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private Long dns = -1l;

  public static final String SERIALIZED_NAME_SSL = "_ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Long ssl = -1l;

  public static final String SERIALIZED_NAME_TIME_TO_FIRST_BYTE = "_timeToFirstByte";
  @SerializedName(SERIALIZED_NAME_TIME_TO_FIRST_BYTE)
  private Long timeToFirstByte = -1l;

  public static final String SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT = "_cumulativeLayoutShift";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT)
  private Float cumulativeLayoutShift = -1f;

  public static final String SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT = "_largestContentfulPaint";
  @SerializedName(SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT)
  private LargestContentfulPaint largestContentfulPaint;

  public static final String SERIALIZED_NAME_FIRST_PAINT = "_firstPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_PAINT)
  private Long firstPaint = -1l;

  public static final String SERIALIZED_NAME_FIRST_INPUT_DELAY = "_firstInputDelay";
  @SerializedName(SERIALIZED_NAME_FIRST_INPUT_DELAY)
  private Float firstInputDelay = -1f;

  public static final String SERIALIZED_NAME_DOM_INTERACTIVE = "_domInteractive";
  @SerializedName(SERIALIZED_NAME_DOM_INTERACTIVE)
  private Long domInteractive = -1l;

  public static final String SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT = "_firstContentfulPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT)
  private Long firstContentfulPaint = -1l;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public PageTimings() {
  }

  public PageTimings onContentLoad(Long onContentLoad) {
    
    this.onContentLoad = onContentLoad;
    return this;
  }

   /**
   * Get onContentLoad
   * minimum: -1
   * @return onContentLoad
  **/
  @javax.annotation.Nonnull

  public Long getOnContentLoad() {
    return onContentLoad;
  }


  public void setOnContentLoad(Long onContentLoad) {
    this.onContentLoad = onContentLoad;
  }


  public PageTimings onLoad(Long onLoad) {
    
    this.onLoad = onLoad;
    return this;
  }

   /**
   * Get onLoad
   * minimum: -1
   * @return onLoad
  **/
  @javax.annotation.Nonnull

  public Long getOnLoad() {
    return onLoad;
  }


  public void setOnLoad(Long onLoad) {
    this.onLoad = onLoad;
  }


  public PageTimings href(String href) {
    
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @javax.annotation.Nullable

  public String getHref() {
    return href;
  }


  public void setHref(String href) {
    this.href = href;
  }


  public PageTimings dns(Long dns) {
    
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * minimum: -1
   * @return dns
  **/
  @javax.annotation.Nullable

  public Long getDns() {
    return dns;
  }


  public void setDns(Long dns) {
    this.dns = dns;
  }


  public PageTimings ssl(Long ssl) {
    
    this.ssl = ssl;
    return this;
  }

   /**
   * Get ssl
   * minimum: -1
   * @return ssl
  **/
  @javax.annotation.Nullable

  public Long getSsl() {
    return ssl;
  }


  public void setSsl(Long ssl) {
    this.ssl = ssl;
  }


  public PageTimings timeToFirstByte(Long timeToFirstByte) {
    
    this.timeToFirstByte = timeToFirstByte;
    return this;
  }

   /**
   * Get timeToFirstByte
   * minimum: -1
   * @return timeToFirstByte
  **/
  @javax.annotation.Nullable

  public Long getTimeToFirstByte() {
    return timeToFirstByte;
  }


  public void setTimeToFirstByte(Long timeToFirstByte) {
    this.timeToFirstByte = timeToFirstByte;
  }


  public PageTimings cumulativeLayoutShift(Float cumulativeLayoutShift) {
    
    this.cumulativeLayoutShift = cumulativeLayoutShift;
    return this;
  }

   /**
   * Get cumulativeLayoutShift
   * minimum: -1
   * @return cumulativeLayoutShift
  **/
  @javax.annotation.Nullable

  public Float getCumulativeLayoutShift() {
    return cumulativeLayoutShift;
  }


  public void setCumulativeLayoutShift(Float cumulativeLayoutShift) {
    this.cumulativeLayoutShift = cumulativeLayoutShift;
  }


  public PageTimings largestContentfulPaint(LargestContentfulPaint largestContentfulPaint) {
    
    this.largestContentfulPaint = largestContentfulPaint;
    return this;
  }

   /**
   * Get largestContentfulPaint
   * @return largestContentfulPaint
  **/
  @javax.annotation.Nullable

  public LargestContentfulPaint getLargestContentfulPaint() {
    return largestContentfulPaint;
  }


  public void setLargestContentfulPaint(LargestContentfulPaint largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
  }


  public PageTimings firstPaint(Long firstPaint) {
    
    this.firstPaint = firstPaint;
    return this;
  }

   /**
   * Get firstPaint
   * minimum: -1
   * @return firstPaint
  **/
  @javax.annotation.Nullable

  public Long getFirstPaint() {
    return firstPaint;
  }


  public void setFirstPaint(Long firstPaint) {
    this.firstPaint = firstPaint;
  }


  public PageTimings firstInputDelay(Float firstInputDelay) {
    
    this.firstInputDelay = firstInputDelay;
    return this;
  }

   /**
   * Get firstInputDelay
   * minimum: -1
   * @return firstInputDelay
  **/
  @javax.annotation.Nullable

  public Float getFirstInputDelay() {
    return firstInputDelay;
  }


  public void setFirstInputDelay(Float firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
  }


  public PageTimings domInteractive(Long domInteractive) {
    
    this.domInteractive = domInteractive;
    return this;
  }

   /**
   * Get domInteractive
   * minimum: -1
   * @return domInteractive
  **/
  @javax.annotation.Nullable

  public Long getDomInteractive() {
    return domInteractive;
  }


  public void setDomInteractive(Long domInteractive) {
    this.domInteractive = domInteractive;
  }


  public PageTimings firstContentfulPaint(Long firstContentfulPaint) {
    
    this.firstContentfulPaint = firstContentfulPaint;
    return this;
  }

   /**
   * Get firstContentfulPaint
   * minimum: -1
   * @return firstContentfulPaint
  **/
  @javax.annotation.Nullable

  public Long getFirstContentfulPaint() {
    return firstContentfulPaint;
  }


  public void setFirstContentfulPaint(Long firstContentfulPaint) {
    this.firstContentfulPaint = firstContentfulPaint;
  }


  public PageTimings comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PageTimings instance itself
   */
  public PageTimings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTimings pageTimings = (PageTimings) o;
    return Objects.equals(this.onContentLoad, pageTimings.onContentLoad) &&
        Objects.equals(this.onLoad, pageTimings.onLoad) &&
        Objects.equals(this.href, pageTimings.href) &&
        Objects.equals(this.dns, pageTimings.dns) &&
        Objects.equals(this.ssl, pageTimings.ssl) &&
        Objects.equals(this.timeToFirstByte, pageTimings.timeToFirstByte) &&
        Objects.equals(this.cumulativeLayoutShift, pageTimings.cumulativeLayoutShift) &&
        Objects.equals(this.largestContentfulPaint, pageTimings.largestContentfulPaint) &&
        Objects.equals(this.firstPaint, pageTimings.firstPaint) &&
        Objects.equals(this.firstInputDelay, pageTimings.firstInputDelay) &&
        Objects.equals(this.domInteractive, pageTimings.domInteractive) &&
        Objects.equals(this.firstContentfulPaint, pageTimings.firstContentfulPaint) &&
        Objects.equals(this.comment, pageTimings.comment)&&
        Objects.equals(this.additionalProperties, pageTimings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(onContentLoad, onLoad, href, dns, ssl, timeToFirstByte, cumulativeLayoutShift, largestContentfulPaint, firstPaint, firstInputDelay, domInteractive, firstContentfulPaint, comment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTimings {\n");
    sb.append("    onContentLoad: ").append(toIndentedString(onContentLoad)).append("\n");
    sb.append("    onLoad: ").append(toIndentedString(onLoad)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    timeToFirstByte: ").append(toIndentedString(timeToFirstByte)).append("\n");
    sb.append("    cumulativeLayoutShift: ").append(toIndentedString(cumulativeLayoutShift)).append("\n");
    sb.append("    largestContentfulPaint: ").append(toIndentedString(largestContentfulPaint)).append("\n");
    sb.append("    firstPaint: ").append(toIndentedString(firstPaint)).append("\n");
    sb.append("    firstInputDelay: ").append(toIndentedString(firstInputDelay)).append("\n");
    sb.append("    domInteractive: ").append(toIndentedString(domInteractive)).append("\n");
    sb.append("    firstContentfulPaint: ").append(toIndentedString(firstContentfulPaint)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onContentLoad");
    openapiFields.add("onLoad");
    openapiFields.add("_href");
    openapiFields.add("_dns");
    openapiFields.add("_ssl");
    openapiFields.add("_timeToFirstByte");
    openapiFields.add("_cumulativeLayoutShift");
    openapiFields.add("_largestContentfulPaint");
    openapiFields.add("_firstPaint");
    openapiFields.add("_firstInputDelay");
    openapiFields.add("_domInteractive");
    openapiFields.add("_firstContentfulPaint");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("onContentLoad");
    openapiRequiredFields.add("onLoad");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PageTimings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PageTimings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTimings is not found in the empty JSON string", PageTimings.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PageTimings.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("_href") != null && !jsonObj.get("_href").isJsonNull()) && !jsonObj.get("_href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_href").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTimings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTimings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTimings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTimings.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTimings>() {
           @Override
           public void write(JsonWriter out, PageTimings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTimings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PageTimings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PageTimings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PageTimings
  * @throws IOException if the JSON string is invalid with respect to PageTimings
  */
  public static PageTimings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTimings.class);
  }

 /**
  * Convert an instance of PageTimings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

