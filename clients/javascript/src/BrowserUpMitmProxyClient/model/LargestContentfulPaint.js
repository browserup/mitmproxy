/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LargestContentfulPaint model module.
 * @module BrowserUpMitmProxyClient/model/LargestContentfulPaint
 * @version 1.0.0
 */
class LargestContentfulPaint {
    /**
     * Constructs a new <code>LargestContentfulPaint</code>.
     * @alias module:BrowserUpMitmProxyClient/model/LargestContentfulPaint
     * @extends Object
     */
    constructor() { 
        
        LargestContentfulPaint.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['startTime'] = -1;
        obj['size'] = -1;
        obj['domPath'] = '';
        obj['tag'] = '';
    }

    /**
     * Constructs a <code>LargestContentfulPaint</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/LargestContentfulPaint} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/LargestContentfulPaint} The populated <code>LargestContentfulPaint</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LargestContentfulPaint();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('domPath')) {
                obj['domPath'] = ApiClient.convertToType(data['domPath'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LargestContentfulPaint</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LargestContentfulPaint</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domPath'] && !(typeof data['domPath'] === 'string' || data['domPath'] instanceof String)) {
            throw new Error("Expected the field `domPath` to be a primitive type in the JSON string but got " + data['domPath']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }

        return true;
    }


}



/**
 * @member {Number} startTime
 * @default -1
 */
LargestContentfulPaint.prototype['startTime'] = -1;

/**
 * @member {Number} size
 * @default -1
 */
LargestContentfulPaint.prototype['size'] = -1;

/**
 * @member {String} domPath
 * @default ''
 */
LargestContentfulPaint.prototype['domPath'] = '';

/**
 * @member {String} tag
 * @default ''
 */
LargestContentfulPaint.prototype['tag'] = '';






export default LargestContentfulPaint;

