/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * PageTiming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class PageTiming {
  public static final String SERIALIZED_NAME_ON_CONTENT_LOAD = "onContentLoad";
  @SerializedName(SERIALIZED_NAME_ON_CONTENT_LOAD)
  @javax.annotation.Nullable
  private BigDecimal onContentLoad;

  public static final String SERIALIZED_NAME_ON_LOAD = "onLoad";
  @SerializedName(SERIALIZED_NAME_ON_LOAD)
  @javax.annotation.Nullable
  private BigDecimal onLoad;

  public static final String SERIALIZED_NAME_FIRST_INPUT_DELAY = "_firstInputDelay";
  @SerializedName(SERIALIZED_NAME_FIRST_INPUT_DELAY)
  @javax.annotation.Nullable
  private BigDecimal firstInputDelay;

  public static final String SERIALIZED_NAME_FIRST_PAINT = "_firstPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_PAINT)
  @javax.annotation.Nullable
  private BigDecimal firstPaint;

  public static final String SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT = "_cumulativeLayoutShift";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_LAYOUT_SHIFT)
  @javax.annotation.Nullable
  private BigDecimal cumulativeLayoutShift;

  public static final String SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT = "_largestContentfulPaint";
  @SerializedName(SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT)
  @javax.annotation.Nullable
  private BigDecimal largestContentfulPaint;

  public static final String SERIALIZED_NAME_DOM_INTERACTIVE = "_domInteractive";
  @SerializedName(SERIALIZED_NAME_DOM_INTERACTIVE)
  @javax.annotation.Nullable
  private BigDecimal domInteractive;

  public static final String SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT = "_firstContentfulPaint";
  @SerializedName(SERIALIZED_NAME_FIRST_CONTENTFUL_PAINT)
  @javax.annotation.Nullable
  private BigDecimal firstContentfulPaint;

  public static final String SERIALIZED_NAME_DNS = "_dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  @javax.annotation.Nullable
  private BigDecimal dns;

  public static final String SERIALIZED_NAME_SSL = "_ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  @javax.annotation.Nullable
  private BigDecimal ssl;

  public static final String SERIALIZED_NAME_TIME_TO_FIRST_BYTE = "_timeToFirstByte";
  @SerializedName(SERIALIZED_NAME_TIME_TO_FIRST_BYTE)
  @javax.annotation.Nullable
  private BigDecimal timeToFirstByte;

  public static final String SERIALIZED_NAME_HREF = "_href";
  @SerializedName(SERIALIZED_NAME_HREF)
  @javax.annotation.Nullable
  private String href;

  public static final String SERIALIZED_NAME_SPAN_ID = "_span_id";
  @SerializedName(SERIALIZED_NAME_SPAN_ID)
  @javax.annotation.Nullable
  private String spanId;

  public static final String SERIALIZED_NAME_PARENT_ID = "_parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public PageTiming() {
  }

  public PageTiming onContentLoad(@javax.annotation.Nullable BigDecimal onContentLoad) {
    this.onContentLoad = onContentLoad;
    return this;
  }

  /**
   * onContentLoad per the browser
   * @return onContentLoad
   */
  @javax.annotation.Nullable
  public BigDecimal getOnContentLoad() {
    return onContentLoad;
  }

  public void setOnContentLoad(@javax.annotation.Nullable BigDecimal onContentLoad) {
    this.onContentLoad = onContentLoad;
  }


  public PageTiming onLoad(@javax.annotation.Nullable BigDecimal onLoad) {
    this.onLoad = onLoad;
    return this;
  }

  /**
   * onLoad per the browser
   * @return onLoad
   */
  @javax.annotation.Nullable
  public BigDecimal getOnLoad() {
    return onLoad;
  }

  public void setOnLoad(@javax.annotation.Nullable BigDecimal onLoad) {
    this.onLoad = onLoad;
  }


  public PageTiming firstInputDelay(@javax.annotation.Nullable BigDecimal firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
    return this;
  }

  /**
   * firstInputDelay from the browser
   * @return firstInputDelay
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstInputDelay() {
    return firstInputDelay;
  }

  public void setFirstInputDelay(@javax.annotation.Nullable BigDecimal firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
  }


  public PageTiming firstPaint(@javax.annotation.Nullable BigDecimal firstPaint) {
    this.firstPaint = firstPaint;
    return this;
  }

  /**
   * firstPaint from the browser
   * @return firstPaint
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstPaint() {
    return firstPaint;
  }

  public void setFirstPaint(@javax.annotation.Nullable BigDecimal firstPaint) {
    this.firstPaint = firstPaint;
  }


  public PageTiming cumulativeLayoutShift(@javax.annotation.Nullable BigDecimal cumulativeLayoutShift) {
    this.cumulativeLayoutShift = cumulativeLayoutShift;
    return this;
  }

  /**
   * cumulativeLayoutShift metric from the browser
   * @return cumulativeLayoutShift
   */
  @javax.annotation.Nullable
  public BigDecimal getCumulativeLayoutShift() {
    return cumulativeLayoutShift;
  }

  public void setCumulativeLayoutShift(@javax.annotation.Nullable BigDecimal cumulativeLayoutShift) {
    this.cumulativeLayoutShift = cumulativeLayoutShift;
  }


  public PageTiming largestContentfulPaint(@javax.annotation.Nullable BigDecimal largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
    return this;
  }

  /**
   * largestContentfulPaint from the browser
   * @return largestContentfulPaint
   */
  @javax.annotation.Nullable
  public BigDecimal getLargestContentfulPaint() {
    return largestContentfulPaint;
  }

  public void setLargestContentfulPaint(@javax.annotation.Nullable BigDecimal largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
  }


  public PageTiming domInteractive(@javax.annotation.Nullable BigDecimal domInteractive) {
    this.domInteractive = domInteractive;
    return this;
  }

  /**
   * domInteractive from the browser
   * @return domInteractive
   */
  @javax.annotation.Nullable
  public BigDecimal getDomInteractive() {
    return domInteractive;
  }

  public void setDomInteractive(@javax.annotation.Nullable BigDecimal domInteractive) {
    this.domInteractive = domInteractive;
  }


  public PageTiming firstContentfulPaint(@javax.annotation.Nullable BigDecimal firstContentfulPaint) {
    this.firstContentfulPaint = firstContentfulPaint;
    return this;
  }

  /**
   * firstContentfulPaint from the browser
   * @return firstContentfulPaint
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstContentfulPaint() {
    return firstContentfulPaint;
  }

  public void setFirstContentfulPaint(@javax.annotation.Nullable BigDecimal firstContentfulPaint) {
    this.firstContentfulPaint = firstContentfulPaint;
  }


  public PageTiming dns(@javax.annotation.Nullable BigDecimal dns) {
    this.dns = dns;
    return this;
  }

  /**
   * dns lookup time from the browser
   * @return dns
   */
  @javax.annotation.Nullable
  public BigDecimal getDns() {
    return dns;
  }

  public void setDns(@javax.annotation.Nullable BigDecimal dns) {
    this.dns = dns;
  }


  public PageTiming ssl(@javax.annotation.Nullable BigDecimal ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Ssl connect time from the browser
   * @return ssl
   */
  @javax.annotation.Nullable
  public BigDecimal getSsl() {
    return ssl;
  }

  public void setSsl(@javax.annotation.Nullable BigDecimal ssl) {
    this.ssl = ssl;
  }


  public PageTiming timeToFirstByte(@javax.annotation.Nullable BigDecimal timeToFirstByte) {
    this.timeToFirstByte = timeToFirstByte;
    return this;
  }

  /**
   * Time to first byte of the page&#39;s first request per the browser
   * @return timeToFirstByte
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeToFirstByte() {
    return timeToFirstByte;
  }

  public void setTimeToFirstByte(@javax.annotation.Nullable BigDecimal timeToFirstByte) {
    this.timeToFirstByte = timeToFirstByte;
  }


  public PageTiming href(@javax.annotation.Nullable String href) {
    this.href = href;
    return this;
  }

  /**
   * Top level href, including hashtag, etc per the browser
   * @return href
   */
  @javax.annotation.Nullable
  public String getHref() {
    return href;
  }

  public void setHref(@javax.annotation.Nullable String href) {
    this.href = href;
  }


  public PageTiming spanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * W3C Trace Context span ID for this page
   * @return spanId
   */
  @javax.annotation.Nullable
  public String getSpanId() {
    return spanId;
  }

  public void setSpanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
  }


  public PageTiming parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * W3C Trace Context parent span ID (typically the HAR log span ID)
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }



  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTiming {\n");
    sb.append("    onContentLoad: ").append(toIndentedString(onContentLoad)).append("\n");
    sb.append("    onLoad: ").append(toIndentedString(onLoad)).append("\n");
    sb.append("    firstInputDelay: ").append(toIndentedString(firstInputDelay)).append("\n");
    sb.append("    firstPaint: ").append(toIndentedString(firstPaint)).append("\n");
    sb.append("    cumulativeLayoutShift: ").append(toIndentedString(cumulativeLayoutShift)).append("\n");
    sb.append("    largestContentfulPaint: ").append(toIndentedString(largestContentfulPaint)).append("\n");
    sb.append("    domInteractive: ").append(toIndentedString(domInteractive)).append("\n");
    sb.append("    firstContentfulPaint: ").append(toIndentedString(firstContentfulPaint)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    timeToFirstByte: ").append(toIndentedString(timeToFirstByte)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("onContentLoad");
    openapiFields.add("onLoad");
    openapiFields.add("_firstInputDelay");
    openapiFields.add("_firstPaint");
    openapiFields.add("_cumulativeLayoutShift");
    openapiFields.add("_largestContentfulPaint");
    openapiFields.add("_domInteractive");
    openapiFields.add("_firstContentfulPaint");
    openapiFields.add("_dns");
    openapiFields.add("_ssl");
    openapiFields.add("_timeToFirstByte");
    openapiFields.add("_href");
    openapiFields.add("_span_id");
    openapiFields.add("_parent_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageTiming
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageTiming.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTiming is not found in the empty JSON string", PageTiming.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PageTiming.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PageTiming` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_href") != null && !jsonObj.get("_href").isJsonNull()) && !jsonObj.get("_href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_href").toString()));
      }
      if ((jsonObj.get("_span_id") != null && !jsonObj.get("_span_id").isJsonNull()) && !jsonObj.get("_span_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_span_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_span_id").toString()));
      }
      if ((jsonObj.get("_parent_id") != null && !jsonObj.get("_parent_id").isJsonNull()) && !jsonObj.get("_parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_parent_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTiming.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTiming' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTiming> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTiming.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTiming>() {
           @Override
           public void write(JsonWriter out, PageTiming value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTiming read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageTiming given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageTiming
   * @throws IOException if the JSON string is invalid with respect to PageTiming
   */
  public static PageTiming fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTiming.class);
  }

  /**
   * Convert an instance of PageTiming to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

