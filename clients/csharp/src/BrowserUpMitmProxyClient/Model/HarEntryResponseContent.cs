/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryResponseContent
    /// </summary>
    [DataContract(Name = "HarEntry_response_content")]
    public partial class HarEntryResponseContent : IEquatable<HarEntryResponseContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryResponseContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HarEntryResponseContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryResponseContent" /> class.
        /// </summary>
        /// <param name="size">size (required).</param>
        /// <param name="compression">compression.</param>
        /// <param name="mimeType">mimeType (required).</param>
        /// <param name="text">text.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="videoBufferedPercent">videoBufferedPercent (default to -1).</param>
        /// <param name="videoStallCount">videoStallCount (default to -1).</param>
        /// <param name="videoDecodedByteCount">videoDecodedByteCount (default to -1).</param>
        /// <param name="videoWaitingCount">videoWaitingCount (default to -1).</param>
        /// <param name="videoErrorCount">videoErrorCount (default to -1).</param>
        /// <param name="videoDroppedFrames">videoDroppedFrames (default to -1).</param>
        /// <param name="videoTotalFrames">videoTotalFrames (default to -1).</param>
        /// <param name="videoAudioBytesDecoded">videoAudioBytesDecoded (default to -1).</param>
        /// <param name="comment">comment.</param>
        public HarEntryResponseContent(int size = default(int), int compression = default(int), string mimeType = default(string), string text = default(string), string encoding = default(string), long videoBufferedPercent = -1, long videoStallCount = -1, long videoDecodedByteCount = -1, long videoWaitingCount = -1, long videoErrorCount = -1, long videoDroppedFrames = -1, long videoTotalFrames = -1, long videoAudioBytesDecoded = -1, string comment = default(string))
        {
            this.Size = size;
            // to ensure "mimeType" is required (not null)
            if (mimeType == null)
            {
                throw new ArgumentNullException("mimeType is a required property for HarEntryResponseContent and cannot be null");
            }
            this.MimeType = mimeType;
            this.Compression = compression;
            this.Text = text;
            this.Encoding = encoding;
            this.VideoBufferedPercent = videoBufferedPercent;
            this.VideoStallCount = videoStallCount;
            this.VideoDecodedByteCount = videoDecodedByteCount;
            this.VideoWaitingCount = videoWaitingCount;
            this.VideoErrorCount = videoErrorCount;
            this.VideoDroppedFrames = videoDroppedFrames;
            this.VideoTotalFrames = videoTotalFrames;
            this.VideoAudioBytesDecoded = videoAudioBytesDecoded;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public int Size { get; set; }

        /// <summary>
        /// Gets or Sets Compression
        /// </summary>
        [DataMember(Name = "compression", EmitDefaultValue = false)]
        public int Compression { get; set; }

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [DataMember(Name = "mimeType", IsRequired = true, EmitDefaultValue = true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets VideoBufferedPercent
        /// </summary>
        [DataMember(Name = "_videoBufferedPercent", EmitDefaultValue = false)]
        public long VideoBufferedPercent { get; set; }

        /// <summary>
        /// Gets or Sets VideoStallCount
        /// </summary>
        [DataMember(Name = "_videoStallCount", EmitDefaultValue = false)]
        public long VideoStallCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoDecodedByteCount
        /// </summary>
        [DataMember(Name = "_videoDecodedByteCount", EmitDefaultValue = false)]
        public long VideoDecodedByteCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoWaitingCount
        /// </summary>
        [DataMember(Name = "_videoWaitingCount", EmitDefaultValue = false)]
        public long VideoWaitingCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoErrorCount
        /// </summary>
        [DataMember(Name = "_videoErrorCount", EmitDefaultValue = false)]
        public long VideoErrorCount { get; set; }

        /// <summary>
        /// Gets or Sets VideoDroppedFrames
        /// </summary>
        [DataMember(Name = "_videoDroppedFrames", EmitDefaultValue = false)]
        public long VideoDroppedFrames { get; set; }

        /// <summary>
        /// Gets or Sets VideoTotalFrames
        /// </summary>
        [DataMember(Name = "_videoTotalFrames", EmitDefaultValue = false)]
        public long VideoTotalFrames { get; set; }

        /// <summary>
        /// Gets or Sets VideoAudioBytesDecoded
        /// </summary>
        [DataMember(Name = "_videoAudioBytesDecoded", EmitDefaultValue = false)]
        public long VideoAudioBytesDecoded { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryResponseContent {\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Compression: ").Append(Compression).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  VideoBufferedPercent: ").Append(VideoBufferedPercent).Append("\n");
            sb.Append("  VideoStallCount: ").Append(VideoStallCount).Append("\n");
            sb.Append("  VideoDecodedByteCount: ").Append(VideoDecodedByteCount).Append("\n");
            sb.Append("  VideoWaitingCount: ").Append(VideoWaitingCount).Append("\n");
            sb.Append("  VideoErrorCount: ").Append(VideoErrorCount).Append("\n");
            sb.Append("  VideoDroppedFrames: ").Append(VideoDroppedFrames).Append("\n");
            sb.Append("  VideoTotalFrames: ").Append(VideoTotalFrames).Append("\n");
            sb.Append("  VideoAudioBytesDecoded: ").Append(VideoAudioBytesDecoded).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HarEntryResponseContent);
        }

        /// <summary>
        /// Returns true if HarEntryResponseContent instances are equal
        /// </summary>
        /// <param name="input">Instance of HarEntryResponseContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HarEntryResponseContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && 
                (
                    this.Compression == input.Compression ||
                    this.Compression.Equals(input.Compression)
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.VideoBufferedPercent == input.VideoBufferedPercent ||
                    this.VideoBufferedPercent.Equals(input.VideoBufferedPercent)
                ) && 
                (
                    this.VideoStallCount == input.VideoStallCount ||
                    this.VideoStallCount.Equals(input.VideoStallCount)
                ) && 
                (
                    this.VideoDecodedByteCount == input.VideoDecodedByteCount ||
                    this.VideoDecodedByteCount.Equals(input.VideoDecodedByteCount)
                ) && 
                (
                    this.VideoWaitingCount == input.VideoWaitingCount ||
                    this.VideoWaitingCount.Equals(input.VideoWaitingCount)
                ) && 
                (
                    this.VideoErrorCount == input.VideoErrorCount ||
                    this.VideoErrorCount.Equals(input.VideoErrorCount)
                ) && 
                (
                    this.VideoDroppedFrames == input.VideoDroppedFrames ||
                    this.VideoDroppedFrames.Equals(input.VideoDroppedFrames)
                ) && 
                (
                    this.VideoTotalFrames == input.VideoTotalFrames ||
                    this.VideoTotalFrames.Equals(input.VideoTotalFrames)
                ) && 
                (
                    this.VideoAudioBytesDecoded == input.VideoAudioBytesDecoded ||
                    this.VideoAudioBytesDecoded.Equals(input.VideoAudioBytesDecoded)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                hashCode = (hashCode * 59) + this.Compression.GetHashCode();
                if (this.MimeType != null)
                {
                    hashCode = (hashCode * 59) + this.MimeType.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Encoding != null)
                {
                    hashCode = (hashCode * 59) + this.Encoding.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.VideoBufferedPercent.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoStallCount.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoDecodedByteCount.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoWaitingCount.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoErrorCount.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoDroppedFrames.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoTotalFrames.GetHashCode();
                hashCode = (hashCode * 59) + this.VideoAudioBytesDecoded.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // VideoBufferedPercent (long) minimum
            if (this.VideoBufferedPercent < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoBufferedPercent, must be a value greater than or equal to -1.", new [] { "VideoBufferedPercent" });
            }

            // VideoStallCount (long) minimum
            if (this.VideoStallCount < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoStallCount, must be a value greater than or equal to -1.", new [] { "VideoStallCount" });
            }

            // VideoDecodedByteCount (long) minimum
            if (this.VideoDecodedByteCount < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoDecodedByteCount, must be a value greater than or equal to -1.", new [] { "VideoDecodedByteCount" });
            }

            // VideoWaitingCount (long) minimum
            if (this.VideoWaitingCount < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoWaitingCount, must be a value greater than or equal to -1.", new [] { "VideoWaitingCount" });
            }

            // VideoErrorCount (long) minimum
            if (this.VideoErrorCount < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoErrorCount, must be a value greater than or equal to -1.", new [] { "VideoErrorCount" });
            }

            // VideoDroppedFrames (long) minimum
            if (this.VideoDroppedFrames < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoDroppedFrames, must be a value greater than or equal to -1.", new [] { "VideoDroppedFrames" });
            }

            // VideoTotalFrames (long) minimum
            if (this.VideoTotalFrames < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoTotalFrames, must be a value greater than or equal to -1.", new [] { "VideoTotalFrames" });
            }

            // VideoAudioBytesDecoded (long) minimum
            if (this.VideoAudioBytesDecoded < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VideoAudioBytesDecoded, must be a value greater than or equal to -1.", new [] { "VideoAudioBytesDecoded" });
            }

            yield break;
        }
    }

}
