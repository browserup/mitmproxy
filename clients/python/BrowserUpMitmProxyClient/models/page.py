# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.27.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from BrowserUpMitmProxyClient.models.error import Error
from BrowserUpMitmProxyClient.models.metric import Metric
from BrowserUpMitmProxyClient.models.page_timings import PageTimings
from BrowserUpMitmProxyClient.models.verify_result import VerifyResult
from typing import Optional, Set
from typing_extensions import Self

class Page(BaseModel):
    """
    Page
    """ # noqa: E501
    started_date_time: datetime = Field(alias="startedDateTime")
    id: StrictStr
    title: StrictStr
    verifications: Optional[List[VerifyResult]] = Field(default=None, alias="_verifications")
    metrics: Optional[List[Metric]] = Field(default=None, alias="_metrics")
    errors: Optional[List[Error]] = Field(default=None, alias="_errors")
    span_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context span ID for this page", alias="_span_id")
    parent_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context parent span ID (typically the HAR log span ID)", alias="_parent_id")
    page_timings: PageTimings = Field(alias="pageTimings")
    comment: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["startedDateTime", "id", "title", "_verifications", "_metrics", "_errors", "_span_id", "_parent_id", "pageTimings", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Page from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in verifications (list)
        _items = []
        if self.verifications:
            for _item_verifications in self.verifications:
                if _item_verifications:
                    _items.append(_item_verifications.to_dict())
            _dict['_verifications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item_metrics in self.metrics:
                if _item_metrics:
                    _items.append(_item_metrics.to_dict())
            _dict['_metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item_errors in self.errors:
                if _item_errors:
                    _items.append(_item_errors.to_dict())
            _dict['_errors'] = _items
        # override the default output from pydantic by calling `to_dict()` of page_timings
        if self.page_timings:
            _dict['pageTimings'] = self.page_timings.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Page from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "startedDateTime": obj.get("startedDateTime"),
            "id": obj.get("id"),
            "title": obj.get("title"),
            "_verifications": [VerifyResult.from_dict(_item) for _item in obj["_verifications"]] if obj.get("_verifications") is not None else None,
            "_metrics": [Metric.from_dict(_item) for _item in obj["_metrics"]] if obj.get("_metrics") is not None else None,
            "_errors": [Error.from_dict(_item) for _item in obj["_errors"]] if obj.get("_errors") is not None else None,
            "_span_id": obj.get("_span_id"),
            "_parent_id": obj.get("_parent_id"),
            "pageTimings": PageTimings.from_dict(obj["pageTimings"]) if obj.get("pageTimings") is not None else None,
            "comment": obj.get("comment")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


