/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WebSocketMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebSocketMessage{}

// WebSocketMessage struct for WebSocketMessage
type WebSocketMessage struct {
	Type string `json:"type"`
	Opcode float32 `json:"opcode"`
	Data string `json:"data"`
	Time float32 `json:"time"`
}

type _WebSocketMessage WebSocketMessage

// NewWebSocketMessage instantiates a new WebSocketMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebSocketMessage(type_ string, opcode float32, data string, time float32) *WebSocketMessage {
	this := WebSocketMessage{}
	this.Type = type_
	this.Opcode = opcode
	this.Data = data
	this.Time = time
	return &this
}

// NewWebSocketMessageWithDefaults instantiates a new WebSocketMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebSocketMessageWithDefaults() *WebSocketMessage {
	this := WebSocketMessage{}
	return &this
}

// GetType returns the Type field value
func (o *WebSocketMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebSocketMessage) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebSocketMessage) SetType(v string) {
	o.Type = v
}

// GetOpcode returns the Opcode field value
func (o *WebSocketMessage) GetOpcode() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Opcode
}

// GetOpcodeOk returns a tuple with the Opcode field value
// and a boolean to check if the value has been set.
func (o *WebSocketMessage) GetOpcodeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Opcode, true
}

// SetOpcode sets field value
func (o *WebSocketMessage) SetOpcode(v float32) {
	o.Opcode = v
}

// GetData returns the Data field value
func (o *WebSocketMessage) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *WebSocketMessage) GetDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *WebSocketMessage) SetData(v string) {
	o.Data = v
}

// GetTime returns the Time field value
func (o *WebSocketMessage) GetTime() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *WebSocketMessage) GetTimeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *WebSocketMessage) SetTime(v float32) {
	o.Time = v
}

func (o WebSocketMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebSocketMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["opcode"] = o.Opcode
	toSerialize["data"] = o.Data
	toSerialize["time"] = o.Time
	return toSerialize, nil
}

func (o *WebSocketMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"opcode",
		"data",
		"time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWebSocketMessage := _WebSocketMessage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWebSocketMessage)

	if err != nil {
		return err
	}

	*o = WebSocketMessage(varWebSocketMessage)

	return err
}

type NullableWebSocketMessage struct {
	value *WebSocketMessage
	isSet bool
}

func (v NullableWebSocketMessage) Get() *WebSocketMessage {
	return v.value
}

func (v *NullableWebSocketMessage) Set(val *WebSocketMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSocketMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSocketMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSocketMessage(val *WebSocketMessage) *NullableWebSocketMessage {
	return &NullableWebSocketMessage{value: val, isSet: true}
}

func (v NullableWebSocketMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSocketMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


