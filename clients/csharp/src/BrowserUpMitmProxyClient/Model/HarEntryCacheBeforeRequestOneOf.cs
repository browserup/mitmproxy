/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryCacheBeforeRequestOneOf
    /// </summary>
    [DataContract(Name = "HarEntry_cache_beforeRequest_oneOf")]
    public partial class HarEntryCacheBeforeRequestOneOf : IEquatable<HarEntryCacheBeforeRequestOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryCacheBeforeRequestOneOf" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HarEntryCacheBeforeRequestOneOf() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryCacheBeforeRequestOneOf" /> class.
        /// </summary>
        /// <param name="expires">expires.</param>
        /// <param name="lastAccess">lastAccess (required).</param>
        /// <param name="eTag">eTag (required).</param>
        /// <param name="hitCount">hitCount (required).</param>
        /// <param name="comment">comment.</param>
        public HarEntryCacheBeforeRequestOneOf(string expires = default(string), string lastAccess = default(string), string eTag = default(string), int hitCount = default(int), string comment = default(string))
        {
            // to ensure "lastAccess" is required (not null)
            if (lastAccess == null)
            {
                throw new ArgumentNullException("lastAccess is a required property for HarEntryCacheBeforeRequestOneOf and cannot be null");
            }
            this.LastAccess = lastAccess;
            // to ensure "eTag" is required (not null)
            if (eTag == null)
            {
                throw new ArgumentNullException("eTag is a required property for HarEntryCacheBeforeRequestOneOf and cannot be null");
            }
            this.ETag = eTag;
            this.HitCount = hitCount;
            this.Expires = expires;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [DataMember(Name = "expires", EmitDefaultValue = false)]
        public string Expires { get; set; }

        /// <summary>
        /// Gets or Sets LastAccess
        /// </summary>
        [DataMember(Name = "lastAccess", IsRequired = true, EmitDefaultValue = true)]
        public string LastAccess { get; set; }

        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name = "eTag", IsRequired = true, EmitDefaultValue = true)]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or Sets HitCount
        /// </summary>
        [DataMember(Name = "hitCount", IsRequired = true, EmitDefaultValue = true)]
        public int HitCount { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryCacheBeforeRequestOneOf {\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  LastAccess: ").Append(LastAccess).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("  HitCount: ").Append(HitCount).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HarEntryCacheBeforeRequestOneOf);
        }

        /// <summary>
        /// Returns true if HarEntryCacheBeforeRequestOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of HarEntryCacheBeforeRequestOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HarEntryCacheBeforeRequestOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Expires == input.Expires ||
                    (this.Expires != null &&
                    this.Expires.Equals(input.Expires))
                ) && 
                (
                    this.LastAccess == input.LastAccess ||
                    (this.LastAccess != null &&
                    this.LastAccess.Equals(input.LastAccess))
                ) && 
                (
                    this.ETag == input.ETag ||
                    (this.ETag != null &&
                    this.ETag.Equals(input.ETag))
                ) && 
                (
                    this.HitCount == input.HitCount ||
                    this.HitCount.Equals(input.HitCount)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expires != null)
                {
                    hashCode = (hashCode * 59) + this.Expires.GetHashCode();
                }
                if (this.LastAccess != null)
                {
                    hashCode = (hashCode * 59) + this.LastAccess.GetHashCode();
                }
                if (this.ETag != null)
                {
                    hashCode = (hashCode * 59) + this.ETag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HitCount.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
