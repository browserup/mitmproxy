/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// A set of criteria for filtering HTTP Requests and Responses.                          Criteria are AND based, and use python regular expressions for string comparison
    /// </summary>
    [DataContract(Name = "MatchCriteria")]
    public partial class MatchCriteria : IEquatable<MatchCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchCriteria" /> class.
        /// </summary>
        /// <param name="url">Request URL regexp to match.</param>
        /// <param name="page">current|all.</param>
        /// <param name="status">HTTP Status code to match..</param>
        /// <param name="content">Body content regexp content to match.</param>
        /// <param name="contentType">Content type.</param>
        /// <param name="websocketMessage">Websocket message text to match.</param>
        /// <param name="requestHeader">requestHeader.</param>
        /// <param name="requestCookie">requestCookie.</param>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="responseCookie">responseCookie.</param>
        /// <param name="jsonValid">Is valid JSON.</param>
        /// <param name="jsonPath">Has JSON path.</param>
        /// <param name="jsonSchema">Validates against passed JSON schema.</param>
        /// <param name="errorIfNoTraffic">If the proxy has NO traffic at all, return error (default to true).</param>
        public MatchCriteria(string url = default(string), string page = default(string), string status = default(string), string content = default(string), string contentType = default(string), string websocketMessage = default(string), MatchCriteriaRequestHeader requestHeader = default(MatchCriteriaRequestHeader), MatchCriteriaRequestHeader requestCookie = default(MatchCriteriaRequestHeader), MatchCriteriaRequestHeader responseHeader = default(MatchCriteriaRequestHeader), MatchCriteriaRequestHeader responseCookie = default(MatchCriteriaRequestHeader), bool jsonValid = default(bool), string jsonPath = default(string), string jsonSchema = default(string), bool errorIfNoTraffic = true)
        {
            this.Url = url;
            this.Page = page;
            this.Status = status;
            this.Content = content;
            this.ContentType = contentType;
            this.WebsocketMessage = websocketMessage;
            this.RequestHeader = requestHeader;
            this.RequestCookie = requestCookie;
            this.ResponseHeader = responseHeader;
            this.ResponseCookie = responseCookie;
            this.JsonValid = jsonValid;
            this.JsonPath = jsonPath;
            this.JsonSchema = jsonSchema;
            this.ErrorIfNoTraffic = errorIfNoTraffic;
        }

        /// <summary>
        /// Request URL regexp to match
        /// </summary>
        /// <value>Request URL regexp to match</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// current|all
        /// </summary>
        /// <value>current|all</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public string Page { get; set; }

        /// <summary>
        /// HTTP Status code to match.
        /// </summary>
        /// <value>HTTP Status code to match.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Body content regexp content to match
        /// </summary>
        /// <value>Body content regexp content to match</value>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Content type
        /// </summary>
        /// <value>Content type</value>
        [DataMember(Name = "content_type", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Websocket message text to match
        /// </summary>
        /// <value>Websocket message text to match</value>
        [DataMember(Name = "websocket_message", EmitDefaultValue = false)]
        public string WebsocketMessage { get; set; }

        /// <summary>
        /// Gets or Sets RequestHeader
        /// </summary>
        [DataMember(Name = "request_header", EmitDefaultValue = false)]
        public MatchCriteriaRequestHeader RequestHeader { get; set; }

        /// <summary>
        /// Gets or Sets RequestCookie
        /// </summary>
        [DataMember(Name = "request_cookie", EmitDefaultValue = false)]
        public MatchCriteriaRequestHeader RequestCookie { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name = "response_header", EmitDefaultValue = false)]
        public MatchCriteriaRequestHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets ResponseCookie
        /// </summary>
        [DataMember(Name = "response_cookie", EmitDefaultValue = false)]
        public MatchCriteriaRequestHeader ResponseCookie { get; set; }

        /// <summary>
        /// Is valid JSON
        /// </summary>
        /// <value>Is valid JSON</value>
        [DataMember(Name = "json_valid", EmitDefaultValue = true)]
        public bool JsonValid { get; set; }

        /// <summary>
        /// Has JSON path
        /// </summary>
        /// <value>Has JSON path</value>
        [DataMember(Name = "json_path", EmitDefaultValue = false)]
        public string JsonPath { get; set; }

        /// <summary>
        /// Validates against passed JSON schema
        /// </summary>
        /// <value>Validates against passed JSON schema</value>
        [DataMember(Name = "json_schema", EmitDefaultValue = false)]
        public string JsonSchema { get; set; }

        /// <summary>
        /// If the proxy has NO traffic at all, return error
        /// </summary>
        /// <value>If the proxy has NO traffic at all, return error</value>
        [DataMember(Name = "error_if_no_traffic", EmitDefaultValue = true)]
        public bool ErrorIfNoTraffic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchCriteria {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  WebsocketMessage: ").Append(WebsocketMessage).Append("\n");
            sb.Append("  RequestHeader: ").Append(RequestHeader).Append("\n");
            sb.Append("  RequestCookie: ").Append(RequestCookie).Append("\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  ResponseCookie: ").Append(ResponseCookie).Append("\n");
            sb.Append("  JsonValid: ").Append(JsonValid).Append("\n");
            sb.Append("  JsonPath: ").Append(JsonPath).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  ErrorIfNoTraffic: ").Append(ErrorIfNoTraffic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MatchCriteria);
        }

        /// <summary>
        /// Returns true if MatchCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of MatchCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MatchCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.WebsocketMessage == input.WebsocketMessage ||
                    (this.WebsocketMessage != null &&
                    this.WebsocketMessage.Equals(input.WebsocketMessage))
                ) && 
                (
                    this.RequestHeader == input.RequestHeader ||
                    (this.RequestHeader != null &&
                    this.RequestHeader.Equals(input.RequestHeader))
                ) && 
                (
                    this.RequestCookie == input.RequestCookie ||
                    (this.RequestCookie != null &&
                    this.RequestCookie.Equals(input.RequestCookie))
                ) && 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                ) && 
                (
                    this.ResponseCookie == input.ResponseCookie ||
                    (this.ResponseCookie != null &&
                    this.ResponseCookie.Equals(input.ResponseCookie))
                ) && 
                (
                    this.JsonValid == input.JsonValid ||
                    this.JsonValid.Equals(input.JsonValid)
                ) && 
                (
                    this.JsonPath == input.JsonPath ||
                    (this.JsonPath != null &&
                    this.JsonPath.Equals(input.JsonPath))
                ) && 
                (
                    this.JsonSchema == input.JsonSchema ||
                    (this.JsonSchema != null &&
                    this.JsonSchema.Equals(input.JsonSchema))
                ) && 
                (
                    this.ErrorIfNoTraffic == input.ErrorIfNoTraffic ||
                    this.ErrorIfNoTraffic.Equals(input.ErrorIfNoTraffic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.Page != null)
                {
                    hashCode = (hashCode * 59) + this.Page.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                if (this.Content != null)
                {
                    hashCode = (hashCode * 59) + this.Content.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                if (this.WebsocketMessage != null)
                {
                    hashCode = (hashCode * 59) + this.WebsocketMessage.GetHashCode();
                }
                if (this.RequestHeader != null)
                {
                    hashCode = (hashCode * 59) + this.RequestHeader.GetHashCode();
                }
                if (this.RequestCookie != null)
                {
                    hashCode = (hashCode * 59) + this.RequestCookie.GetHashCode();
                }
                if (this.ResponseHeader != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseHeader.GetHashCode();
                }
                if (this.ResponseCookie != null)
                {
                    hashCode = (hashCode * 59) + this.ResponseCookie.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JsonValid.GetHashCode();
                if (this.JsonPath != null)
                {
                    hashCode = (hashCode * 59) + this.JsonPath.GetHashCode();
                }
                if (this.JsonSchema != null)
                {
                    hashCode = (hashCode * 59) + this.JsonSchema.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorIfNoTraffic.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
