// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// PageTimings
    /// </summary>
    public partial class PageTimings : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageTimings" /> class.
        /// </summary>
        /// <param name="onContentLoad">onContentLoad (default to -1)</param>
        /// <param name="onLoad">onLoad (default to -1)</param>
        /// <param name="href">href (default to &quot;&quot;)</param>
        /// <param name="dns">dns (default to -1)</param>
        /// <param name="ssl">ssl (default to -1)</param>
        /// <param name="timeToFirstByte">timeToFirstByte (default to -1)</param>
        /// <param name="cumulativeLayoutShift">cumulativeLayoutShift (default to -1F)</param>
        /// <param name="largestContentfulPaint">largestContentfulPaint</param>
        /// <param name="firstPaint">firstPaint (default to -1)</param>
        /// <param name="firstInputDelay">firstInputDelay (default to -1F)</param>
        /// <param name="domInteractive">domInteractive (default to -1)</param>
        /// <param name="firstContentfulPaint">firstContentfulPaint (default to -1)</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public PageTimings(long onContentLoad = -1, long onLoad = -1, Option<string?> href = default, Option<long?> dns = default, Option<long?> ssl = default, Option<long?> timeToFirstByte = default, Option<float?> cumulativeLayoutShift = default, Option<LargestContentfulPaint?> largestContentfulPaint = default, Option<long?> firstPaint = default, Option<float?> firstInputDelay = default, Option<long?> domInteractive = default, Option<long?> firstContentfulPaint = default, Option<string?> comment = default)
        {
            OnContentLoad = onContentLoad;
            OnLoad = onLoad;
            HrefOption = href;
            DnsOption = dns;
            SslOption = ssl;
            TimeToFirstByteOption = timeToFirstByte;
            CumulativeLayoutShiftOption = cumulativeLayoutShift;
            LargestContentfulPaintOption = largestContentfulPaint;
            FirstPaintOption = firstPaint;
            FirstInputDelayOption = firstInputDelay;
            DomInteractiveOption = domInteractive;
            FirstContentfulPaintOption = firstContentfulPaint;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets OnContentLoad
        /// </summary>
        [JsonPropertyName("onContentLoad")]
        public long OnContentLoad { get; set; }

        /// <summary>
        /// Gets or Sets OnLoad
        /// </summary>
        [JsonPropertyName("onLoad")]
        public long OnLoad { get; set; }

        /// <summary>
        /// Used to track the state of Href
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HrefOption { get; private set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [JsonPropertyName("_href")]
        public string? Href { get { return this.HrefOption; } set { this.HrefOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DnsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [JsonPropertyName("_dns")]
        public long? Dns { get { return this.DnsOption; } set { this.DnsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ssl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SslOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ssl
        /// </summary>
        [JsonPropertyName("_ssl")]
        public long? Ssl { get { return this.SslOption; } set { this.SslOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeToFirstByte
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> TimeToFirstByteOption { get; private set; }

        /// <summary>
        /// Gets or Sets TimeToFirstByte
        /// </summary>
        [JsonPropertyName("_timeToFirstByte")]
        public long? TimeToFirstByte { get { return this.TimeToFirstByteOption; } set { this.TimeToFirstByteOption = new(value); } }

        /// <summary>
        /// Used to track the state of CumulativeLayoutShift
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> CumulativeLayoutShiftOption { get; private set; }

        /// <summary>
        /// Gets or Sets CumulativeLayoutShift
        /// </summary>
        [JsonPropertyName("_cumulativeLayoutShift")]
        public float? CumulativeLayoutShift { get { return this.CumulativeLayoutShiftOption; } set { this.CumulativeLayoutShiftOption = new(value); } }

        /// <summary>
        /// Used to track the state of LargestContentfulPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LargestContentfulPaint?> LargestContentfulPaintOption { get; private set; }

        /// <summary>
        /// Gets or Sets LargestContentfulPaint
        /// </summary>
        [JsonPropertyName("_largestContentfulPaint")]
        public LargestContentfulPaint? LargestContentfulPaint { get { return this.LargestContentfulPaintOption; } set { this.LargestContentfulPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FirstPaintOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstPaint
        /// </summary>
        [JsonPropertyName("_firstPaint")]
        public long? FirstPaint { get { return this.FirstPaintOption; } set { this.FirstPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstInputDelay
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<float?> FirstInputDelayOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstInputDelay
        /// </summary>
        [JsonPropertyName("_firstInputDelay")]
        public float? FirstInputDelay { get { return this.FirstInputDelayOption; } set { this.FirstInputDelayOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomInteractive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> DomInteractiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomInteractive
        /// </summary>
        [JsonPropertyName("_domInteractive")]
        public long? DomInteractive { get { return this.DomInteractiveOption; } set { this.DomInteractiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstContentfulPaint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> FirstContentfulPaintOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstContentfulPaint
        /// </summary>
        [JsonPropertyName("_firstContentfulPaint")]
        public long? FirstContentfulPaint { get { return this.FirstContentfulPaintOption; } set { this.FirstContentfulPaintOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageTimings {\n");
            sb.Append("  OnContentLoad: ").Append(OnContentLoad).Append("\n");
            sb.Append("  OnLoad: ").Append(OnLoad).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  CumulativeLayoutShift: ").Append(CumulativeLayoutShift).Append("\n");
            sb.Append("  LargestContentfulPaint: ").Append(LargestContentfulPaint).Append("\n");
            sb.Append("  FirstPaint: ").Append(FirstPaint).Append("\n");
            sb.Append("  FirstInputDelay: ").Append(FirstInputDelay).Append("\n");
            sb.Append("  DomInteractive: ").Append(DomInteractive).Append("\n");
            sb.Append("  FirstContentfulPaint: ").Append(FirstContentfulPaint).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OnContentLoad (long) minimum
            if (this.OnContentLoad < (long)-1)
            {
                yield return new ValidationResult("Invalid value for OnContentLoad, must be a value greater than or equal to -1.", new [] { "OnContentLoad" });
            }

            // OnLoad (long) minimum
            if (this.OnLoad < (long)-1)
            {
                yield return new ValidationResult("Invalid value for OnLoad, must be a value greater than or equal to -1.", new [] { "OnLoad" });
            }

            // Dns (long) minimum
            if (this.DnsOption.IsSet && this.DnsOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Dns, must be a value greater than or equal to -1.", new [] { "Dns" });
            }

            // Ssl (long) minimum
            if (this.SslOption.IsSet && this.SslOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Ssl, must be a value greater than or equal to -1.", new [] { "Ssl" });
            }

            // TimeToFirstByte (long) minimum
            if (this.TimeToFirstByteOption.IsSet && this.TimeToFirstByteOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for TimeToFirstByte, must be a value greater than or equal to -1.", new [] { "TimeToFirstByte" });
            }

            // CumulativeLayoutShift (float) minimum
            if (this.CumulativeLayoutShiftOption.IsSet && this.CumulativeLayoutShiftOption.Value < (float)-1)
            {
                yield return new ValidationResult("Invalid value for CumulativeLayoutShift, must be a value greater than or equal to -1.", new [] { "CumulativeLayoutShift" });
            }

            // FirstPaint (long) minimum
            if (this.FirstPaintOption.IsSet && this.FirstPaintOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for FirstPaint, must be a value greater than or equal to -1.", new [] { "FirstPaint" });
            }

            // FirstInputDelay (float) minimum
            if (this.FirstInputDelayOption.IsSet && this.FirstInputDelayOption.Value < (float)-1)
            {
                yield return new ValidationResult("Invalid value for FirstInputDelay, must be a value greater than or equal to -1.", new [] { "FirstInputDelay" });
            }

            // DomInteractive (long) minimum
            if (this.DomInteractiveOption.IsSet && this.DomInteractiveOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for DomInteractive, must be a value greater than or equal to -1.", new [] { "DomInteractive" });
            }

            // FirstContentfulPaint (long) minimum
            if (this.FirstContentfulPaintOption.IsSet && this.FirstContentfulPaintOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for FirstContentfulPaint, must be a value greater than or equal to -1.", new [] { "FirstContentfulPaint" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PageTimings" />
    /// </summary>
    public class PageTimingsJsonConverter : JsonConverter<PageTimings>
    {
        /// <summary>
        /// Deserializes json to <see cref="PageTimings" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PageTimings Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> onContentLoad = default;
            Option<long?> onLoad = default;
            Option<string?> href = default;
            Option<long?> dns = default;
            Option<long?> ssl = default;
            Option<long?> timeToFirstByte = default;
            Option<float?> cumulativeLayoutShift = default;
            Option<LargestContentfulPaint?> largestContentfulPaint = default;
            Option<long?> firstPaint = default;
            Option<float?> firstInputDelay = default;
            Option<long?> domInteractive = default;
            Option<long?> firstContentfulPaint = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "onContentLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                onContentLoad = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "onLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                onLoad = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_href":
                            href = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_dns":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                dns = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_ssl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ssl = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_timeToFirstByte":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timeToFirstByte = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_cumulativeLayoutShift":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cumulativeLayoutShift = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "_largestContentfulPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                largestContentfulPaint = new Option<LargestContentfulPaint?>(JsonSerializer.Deserialize<LargestContentfulPaint>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_firstPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstPaint = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_firstInputDelay":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstInputDelay = new Option<float?>((float)utf8JsonReader.GetDouble());
                            break;
                        case "_domInteractive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                domInteractive = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "_firstContentfulPaint":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstContentfulPaint = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!onContentLoad.IsSet)
                throw new ArgumentException("Property is required for class PageTimings.", nameof(onContentLoad));

            if (!onLoad.IsSet)
                throw new ArgumentException("Property is required for class PageTimings.", nameof(onLoad));

            if (onContentLoad.IsSet && onContentLoad.Value == null)
                throw new ArgumentNullException(nameof(onContentLoad), "Property is not nullable for class PageTimings.");

            if (onLoad.IsSet && onLoad.Value == null)
                throw new ArgumentNullException(nameof(onLoad), "Property is not nullable for class PageTimings.");

            if (href.IsSet && href.Value == null)
                throw new ArgumentNullException(nameof(href), "Property is not nullable for class PageTimings.");

            if (dns.IsSet && dns.Value == null)
                throw new ArgumentNullException(nameof(dns), "Property is not nullable for class PageTimings.");

            if (ssl.IsSet && ssl.Value == null)
                throw new ArgumentNullException(nameof(ssl), "Property is not nullable for class PageTimings.");

            if (timeToFirstByte.IsSet && timeToFirstByte.Value == null)
                throw new ArgumentNullException(nameof(timeToFirstByte), "Property is not nullable for class PageTimings.");

            if (cumulativeLayoutShift.IsSet && cumulativeLayoutShift.Value == null)
                throw new ArgumentNullException(nameof(cumulativeLayoutShift), "Property is not nullable for class PageTimings.");

            if (largestContentfulPaint.IsSet && largestContentfulPaint.Value == null)
                throw new ArgumentNullException(nameof(largestContentfulPaint), "Property is not nullable for class PageTimings.");

            if (firstPaint.IsSet && firstPaint.Value == null)
                throw new ArgumentNullException(nameof(firstPaint), "Property is not nullable for class PageTimings.");

            if (firstInputDelay.IsSet && firstInputDelay.Value == null)
                throw new ArgumentNullException(nameof(firstInputDelay), "Property is not nullable for class PageTimings.");

            if (domInteractive.IsSet && domInteractive.Value == null)
                throw new ArgumentNullException(nameof(domInteractive), "Property is not nullable for class PageTimings.");

            if (firstContentfulPaint.IsSet && firstContentfulPaint.Value == null)
                throw new ArgumentNullException(nameof(firstContentfulPaint), "Property is not nullable for class PageTimings.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class PageTimings.");

            return new PageTimings(onContentLoad.Value!.Value!, onLoad.Value!.Value!, href, dns, ssl, timeToFirstByte, cumulativeLayoutShift, largestContentfulPaint, firstPaint, firstInputDelay, domInteractive, firstContentfulPaint, comment);
        }

        /// <summary>
        /// Serializes a <see cref="PageTimings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageTimings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PageTimings pageTimings, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pageTimings, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PageTimings" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pageTimings"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PageTimings pageTimings, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pageTimings.HrefOption.IsSet && pageTimings.Href == null)
                throw new ArgumentNullException(nameof(pageTimings.Href), "Property is required for class PageTimings.");

            if (pageTimings.LargestContentfulPaintOption.IsSet && pageTimings.LargestContentfulPaint == null)
                throw new ArgumentNullException(nameof(pageTimings.LargestContentfulPaint), "Property is required for class PageTimings.");

            if (pageTimings.CommentOption.IsSet && pageTimings.Comment == null)
                throw new ArgumentNullException(nameof(pageTimings.Comment), "Property is required for class PageTimings.");

            writer.WriteNumber("onContentLoad", pageTimings.OnContentLoad);

            writer.WriteNumber("onLoad", pageTimings.OnLoad);

            if (pageTimings.HrefOption.IsSet)
                writer.WriteString("_href", pageTimings.Href);

            if (pageTimings.DnsOption.IsSet)
                writer.WriteNumber("_dns", pageTimings.DnsOption.Value!.Value);

            if (pageTimings.SslOption.IsSet)
                writer.WriteNumber("_ssl", pageTimings.SslOption.Value!.Value);

            if (pageTimings.TimeToFirstByteOption.IsSet)
                writer.WriteNumber("_timeToFirstByte", pageTimings.TimeToFirstByteOption.Value!.Value);

            if (pageTimings.CumulativeLayoutShiftOption.IsSet)
                writer.WriteNumber("_cumulativeLayoutShift", pageTimings.CumulativeLayoutShiftOption.Value!.Value);

            if (pageTimings.LargestContentfulPaintOption.IsSet)
            {
                writer.WritePropertyName("_largestContentfulPaint");
                JsonSerializer.Serialize(writer, pageTimings.LargestContentfulPaint, jsonSerializerOptions);
            }
            if (pageTimings.FirstPaintOption.IsSet)
                writer.WriteNumber("_firstPaint", pageTimings.FirstPaintOption.Value!.Value);

            if (pageTimings.FirstInputDelayOption.IsSet)
                writer.WriteNumber("_firstInputDelay", pageTimings.FirstInputDelayOption.Value!.Value);

            if (pageTimings.DomInteractiveOption.IsSet)
                writer.WriteNumber("_domInteractive", pageTimings.DomInteractiveOption.Value!.Value);

            if (pageTimings.FirstContentfulPaintOption.IsSet)
                writer.WriteNumber("_firstContentfulPaint", pageTimings.FirstContentfulPaintOption.Value!.Value);

            if (pageTimings.CommentOption.IsSet)
                writer.WriteString("comment", pageTimings.Comment);
        }
    }
}
