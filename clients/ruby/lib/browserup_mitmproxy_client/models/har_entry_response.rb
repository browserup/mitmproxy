=begin
#BrowserUp MitmProxy

#___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

The version of the OpenAPI document: 1.27.0

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module BrowserupMitmProxy
  class HarEntryResponse
    attr_accessor :status

    attr_accessor :status_text

    attr_accessor :http_version

    attr_accessor :cookies

    attr_accessor :headers

    attr_accessor :content

    attr_accessor :redirect_url

    attr_accessor :headers_size

    attr_accessor :body_size

    attr_accessor :comment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'status_text' => :'statusText',
        :'http_version' => :'httpVersion',
        :'cookies' => :'cookies',
        :'headers' => :'headers',
        :'content' => :'content',
        :'redirect_url' => :'redirectURL',
        :'headers_size' => :'headersSize',
        :'body_size' => :'bodySize',
        :'comment' => :'comment'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'Integer',
        :'status_text' => :'String',
        :'http_version' => :'String',
        :'cookies' => :'Array<HarEntryRequestCookiesInner>',
        :'headers' => :'Array<Header>',
        :'content' => :'HarEntryResponseContent',
        :'redirect_url' => :'String',
        :'headers_size' => :'Integer',
        :'body_size' => :'Integer',
        :'comment' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BrowserupMitmProxy::HarEntryResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BrowserupMitmProxy::HarEntryResponse`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'status_text')
        self.status_text = attributes[:'status_text']
      else
        self.status_text = nil
      end

      if attributes.key?(:'http_version')
        self.http_version = attributes[:'http_version']
      else
        self.http_version = nil
      end

      if attributes.key?(:'cookies')
        if (value = attributes[:'cookies']).is_a?(Array)
          self.cookies = value
        end
      else
        self.cookies = nil
      end

      if attributes.key?(:'headers')
        if (value = attributes[:'headers']).is_a?(Array)
          self.headers = value
        end
      else
        self.headers = nil
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      else
        self.content = nil
      end

      if attributes.key?(:'redirect_url')
        self.redirect_url = attributes[:'redirect_url']
      else
        self.redirect_url = nil
      end

      if attributes.key?(:'headers_size')
        self.headers_size = attributes[:'headers_size']
      else
        self.headers_size = nil
      end

      if attributes.key?(:'body_size')
        self.body_size = attributes[:'body_size']
      else
        self.body_size = nil
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @status_text.nil?
        invalid_properties.push('invalid value for "status_text", status_text cannot be nil.')
      end

      if @http_version.nil?
        invalid_properties.push('invalid value for "http_version", http_version cannot be nil.')
      end

      if @cookies.nil?
        invalid_properties.push('invalid value for "cookies", cookies cannot be nil.')
      end

      if @headers.nil?
        invalid_properties.push('invalid value for "headers", headers cannot be nil.')
      end

      if @content.nil?
        invalid_properties.push('invalid value for "content", content cannot be nil.')
      end

      if @redirect_url.nil?
        invalid_properties.push('invalid value for "redirect_url", redirect_url cannot be nil.')
      end

      if @headers_size.nil?
        invalid_properties.push('invalid value for "headers_size", headers_size cannot be nil.')
      end

      if @body_size.nil?
        invalid_properties.push('invalid value for "body_size", body_size cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @status.nil?
      return false if @status_text.nil?
      return false if @http_version.nil?
      return false if @cookies.nil?
      return false if @headers.nil?
      return false if @content.nil?
      return false if @redirect_url.nil?
      return false if @headers_size.nil?
      return false if @body_size.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      if status.nil?
        fail ArgumentError, 'status cannot be nil'
      end

      @status = status
    end

    # Custom attribute writer method with validation
    # @param [Object] status_text Value to be assigned
    def status_text=(status_text)
      if status_text.nil?
        fail ArgumentError, 'status_text cannot be nil'
      end

      @status_text = status_text
    end

    # Custom attribute writer method with validation
    # @param [Object] http_version Value to be assigned
    def http_version=(http_version)
      if http_version.nil?
        fail ArgumentError, 'http_version cannot be nil'
      end

      @http_version = http_version
    end

    # Custom attribute writer method with validation
    # @param [Object] cookies Value to be assigned
    def cookies=(cookies)
      if cookies.nil?
        fail ArgumentError, 'cookies cannot be nil'
      end

      @cookies = cookies
    end

    # Custom attribute writer method with validation
    # @param [Object] headers Value to be assigned
    def headers=(headers)
      if headers.nil?
        fail ArgumentError, 'headers cannot be nil'
      end

      @headers = headers
    end

    # Custom attribute writer method with validation
    # @param [Object] content Value to be assigned
    def content=(content)
      if content.nil?
        fail ArgumentError, 'content cannot be nil'
      end

      @content = content
    end

    # Custom attribute writer method with validation
    # @param [Object] redirect_url Value to be assigned
    def redirect_url=(redirect_url)
      if redirect_url.nil?
        fail ArgumentError, 'redirect_url cannot be nil'
      end

      @redirect_url = redirect_url
    end

    # Custom attribute writer method with validation
    # @param [Object] headers_size Value to be assigned
    def headers_size=(headers_size)
      if headers_size.nil?
        fail ArgumentError, 'headers_size cannot be nil'
      end

      @headers_size = headers_size
    end

    # Custom attribute writer method with validation
    # @param [Object] body_size Value to be assigned
    def body_size=(body_size)
      if body_size.nil?
        fail ArgumentError, 'body_size cannot be nil'
      end

      @body_size = body_size
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          status_text == o.status_text &&
          http_version == o.http_version &&
          cookies == o.cookies &&
          headers == o.headers &&
          content == o.content &&
          redirect_url == o.redirect_url &&
          headers_size == o.headers_size &&
          body_size == o.body_size &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, status_text, http_version, cookies, headers, content, redirect_url, headers_size, body_size, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BrowserupMitmProxy.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
