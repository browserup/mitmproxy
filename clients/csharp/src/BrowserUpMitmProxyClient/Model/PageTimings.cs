/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// PageTimings
    /// </summary>
    [DataContract(Name = "PageTimings")]
    public partial class PageTimings : Dictionary<String, Object>, IEquatable<PageTimings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageTimings" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PageTimings()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="PageTimings" /> class.
        /// </summary>
        /// <param name="onContentLoad">onContentLoad (required) (default to -1).</param>
        /// <param name="onLoad">onLoad (required) (default to -1).</param>
        /// <param name="href">href (default to &quot;&quot;).</param>
        /// <param name="dns">dns (default to -1).</param>
        /// <param name="ssl">ssl (default to -1).</param>
        /// <param name="timeToFirstByte">timeToFirstByte (default to -1).</param>
        /// <param name="cumulativeLayoutShift">cumulativeLayoutShift (default to -1F).</param>
        /// <param name="largestContentfulPaint">largestContentfulPaint.</param>
        /// <param name="firstPaint">firstPaint (default to -1).</param>
        /// <param name="firstInputDelay">firstInputDelay (default to -1F).</param>
        /// <param name="domInteractive">domInteractive (default to -1).</param>
        /// <param name="firstContentfulPaint">firstContentfulPaint (default to -1).</param>
        /// <param name="comment">comment.</param>
        public PageTimings(long onContentLoad = -1, long onLoad = -1, string href = "", long dns = -1, long ssl = -1, long timeToFirstByte = -1, float cumulativeLayoutShift = -1F, LargestContentfulPaint largestContentfulPaint = default(LargestContentfulPaint), long firstPaint = -1, float firstInputDelay = -1F, long domInteractive = -1, long firstContentfulPaint = -1, string comment = default(string)) : base()
        {
            this.OnContentLoad = onContentLoad;
            this.OnLoad = onLoad;
            // use default value if no "href" provided
            this.Href = href ?? "";
            this.Dns = dns;
            this.Ssl = ssl;
            this.TimeToFirstByte = timeToFirstByte;
            this.CumulativeLayoutShift = cumulativeLayoutShift;
            this.LargestContentfulPaint = largestContentfulPaint;
            this.FirstPaint = firstPaint;
            this.FirstInputDelay = firstInputDelay;
            this.DomInteractive = domInteractive;
            this.FirstContentfulPaint = firstContentfulPaint;
            this.Comment = comment;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets OnContentLoad
        /// </summary>
        [DataMember(Name = "onContentLoad", IsRequired = true, EmitDefaultValue = true)]
        public long OnContentLoad { get; set; }

        /// <summary>
        /// Gets or Sets OnLoad
        /// </summary>
        [DataMember(Name = "onLoad", IsRequired = true, EmitDefaultValue = true)]
        public long OnLoad { get; set; }

        /// <summary>
        /// Gets or Sets Href
        /// </summary>
        [DataMember(Name = "_href", EmitDefaultValue = false)]
        public string Href { get; set; }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [DataMember(Name = "_dns", EmitDefaultValue = false)]
        public long Dns { get; set; }

        /// <summary>
        /// Gets or Sets Ssl
        /// </summary>
        [DataMember(Name = "_ssl", EmitDefaultValue = false)]
        public long Ssl { get; set; }

        /// <summary>
        /// Gets or Sets TimeToFirstByte
        /// </summary>
        [DataMember(Name = "_timeToFirstByte", EmitDefaultValue = false)]
        public long TimeToFirstByte { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeLayoutShift
        /// </summary>
        [DataMember(Name = "_cumulativeLayoutShift", EmitDefaultValue = false)]
        public float CumulativeLayoutShift { get; set; }

        /// <summary>
        /// Gets or Sets LargestContentfulPaint
        /// </summary>
        [DataMember(Name = "_largestContentfulPaint", EmitDefaultValue = false)]
        public LargestContentfulPaint LargestContentfulPaint { get; set; }

        /// <summary>
        /// Gets or Sets FirstPaint
        /// </summary>
        [DataMember(Name = "_firstPaint", EmitDefaultValue = false)]
        public long FirstPaint { get; set; }

        /// <summary>
        /// Gets or Sets FirstInputDelay
        /// </summary>
        [DataMember(Name = "_firstInputDelay", EmitDefaultValue = false)]
        public float FirstInputDelay { get; set; }

        /// <summary>
        /// Gets or Sets DomInteractive
        /// </summary>
        [DataMember(Name = "_domInteractive", EmitDefaultValue = false)]
        public long DomInteractive { get; set; }

        /// <summary>
        /// Gets or Sets FirstContentfulPaint
        /// </summary>
        [DataMember(Name = "_firstContentfulPaint", EmitDefaultValue = false)]
        public long FirstContentfulPaint { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PageTimings {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  OnContentLoad: ").Append(OnContentLoad).Append("\n");
            sb.Append("  OnLoad: ").Append(OnLoad).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Ssl: ").Append(Ssl).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  CumulativeLayoutShift: ").Append(CumulativeLayoutShift).Append("\n");
            sb.Append("  LargestContentfulPaint: ").Append(LargestContentfulPaint).Append("\n");
            sb.Append("  FirstPaint: ").Append(FirstPaint).Append("\n");
            sb.Append("  FirstInputDelay: ").Append(FirstInputDelay).Append("\n");
            sb.Append("  DomInteractive: ").Append(DomInteractive).Append("\n");
            sb.Append("  FirstContentfulPaint: ").Append(FirstContentfulPaint).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageTimings);
        }

        /// <summary>
        /// Returns true if PageTimings instances are equal
        /// </summary>
        /// <param name="input">Instance of PageTimings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageTimings input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.OnContentLoad == input.OnContentLoad ||
                    this.OnContentLoad.Equals(input.OnContentLoad)
                ) && base.Equals(input) && 
                (
                    this.OnLoad == input.OnLoad ||
                    this.OnLoad.Equals(input.OnLoad)
                ) && base.Equals(input) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && base.Equals(input) && 
                (
                    this.Dns == input.Dns ||
                    this.Dns.Equals(input.Dns)
                ) && base.Equals(input) && 
                (
                    this.Ssl == input.Ssl ||
                    this.Ssl.Equals(input.Ssl)
                ) && base.Equals(input) && 
                (
                    this.TimeToFirstByte == input.TimeToFirstByte ||
                    this.TimeToFirstByte.Equals(input.TimeToFirstByte)
                ) && base.Equals(input) && 
                (
                    this.CumulativeLayoutShift == input.CumulativeLayoutShift ||
                    this.CumulativeLayoutShift.Equals(input.CumulativeLayoutShift)
                ) && base.Equals(input) && 
                (
                    this.LargestContentfulPaint == input.LargestContentfulPaint ||
                    (this.LargestContentfulPaint != null &&
                    this.LargestContentfulPaint.Equals(input.LargestContentfulPaint))
                ) && base.Equals(input) && 
                (
                    this.FirstPaint == input.FirstPaint ||
                    this.FirstPaint.Equals(input.FirstPaint)
                ) && base.Equals(input) && 
                (
                    this.FirstInputDelay == input.FirstInputDelay ||
                    this.FirstInputDelay.Equals(input.FirstInputDelay)
                ) && base.Equals(input) && 
                (
                    this.DomInteractive == input.DomInteractive ||
                    this.DomInteractive.Equals(input.DomInteractive)
                ) && base.Equals(input) && 
                (
                    this.FirstContentfulPaint == input.FirstContentfulPaint ||
                    this.FirstContentfulPaint.Equals(input.FirstContentfulPaint)
                ) && base.Equals(input) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.OnContentLoad.GetHashCode();
                hashCode = (hashCode * 59) + this.OnLoad.GetHashCode();
                if (this.Href != null)
                {
                    hashCode = (hashCode * 59) + this.Href.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Dns.GetHashCode();
                hashCode = (hashCode * 59) + this.Ssl.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeToFirstByte.GetHashCode();
                hashCode = (hashCode * 59) + this.CumulativeLayoutShift.GetHashCode();
                if (this.LargestContentfulPaint != null)
                {
                    hashCode = (hashCode * 59) + this.LargestContentfulPaint.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstPaint.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstInputDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.DomInteractive.GetHashCode();
                hashCode = (hashCode * 59) + this.FirstContentfulPaint.GetHashCode();
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // OnContentLoad (long) minimum
            if (this.OnContentLoad < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnContentLoad, must be a value greater than or equal to -1.", new [] { "OnContentLoad" });
            }

            // OnLoad (long) minimum
            if (this.OnLoad < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OnLoad, must be a value greater than or equal to -1.", new [] { "OnLoad" });
            }

            // Dns (long) minimum
            if (this.Dns < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Dns, must be a value greater than or equal to -1.", new [] { "Dns" });
            }

            // Ssl (long) minimum
            if (this.Ssl < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Ssl, must be a value greater than or equal to -1.", new [] { "Ssl" });
            }

            // TimeToFirstByte (long) minimum
            if (this.TimeToFirstByte < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TimeToFirstByte, must be a value greater than or equal to -1.", new [] { "TimeToFirstByte" });
            }

            // CumulativeLayoutShift (float) minimum
            if (this.CumulativeLayoutShift < (float)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CumulativeLayoutShift, must be a value greater than or equal to -1.", new [] { "CumulativeLayoutShift" });
            }

            // FirstPaint (long) minimum
            if (this.FirstPaint < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstPaint, must be a value greater than or equal to -1.", new [] { "FirstPaint" });
            }

            // FirstInputDelay (float) minimum
            if (this.FirstInputDelay < (float)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstInputDelay, must be a value greater than or equal to -1.", new [] { "FirstInputDelay" });
            }

            // DomInteractive (long) minimum
            if (this.DomInteractive < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DomInteractive, must be a value greater than or equal to -1.", new [] { "DomInteractive" });
            }

            // FirstContentfulPaint (long) minimum
            if (this.FirstContentfulPaint < (long)-1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstContentfulPaint, must be a value greater than or equal to -1.", new [] { "FirstContentfulPaint" });
            }

            yield break;
        }
    }

}
