/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BrowserUpMitmProxyClient.Client;
using BrowserUpMitmProxyClient.Model;

namespace BrowserUpMitmProxyClient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrowserUpProxyApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddError(Error error, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddErrorWithHttpInfo(Error error, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void AddMetric(Metric metric, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMetricWithHttpInfo(Metric metric, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        Har GetHarLog(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        ApiResponse<Har> GetHarLogWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void Healthcheck(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HealthcheckWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        Har NewPage(string title, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        ApiResponse<Har> NewPageWithHttpInfo(string title, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        Har ResetHarLog(int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        ApiResponse<Har> ResetHarLogWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        VerifyResult VerifyNotPresent(string name, MatchCriteria matchCriteria, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        ApiResponse<VerifyResult> VerifyNotPresentWithHttpInfo(string name, MatchCriteria matchCriteria, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        VerifyResult VerifyPresent(string name, MatchCriteria matchCriteria, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        ApiResponse<VerifyResult> VerifyPresentWithHttpInfo(string name, MatchCriteria matchCriteria, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        VerifyResult VerifySLA(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        ApiResponse<VerifyResult> VerifySLAWithHttpInfo(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        VerifyResult VerifySize(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        ApiResponse<VerifyResult> VerifySizeWithHttpInfo(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrowserUpProxyApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddErrorAsync(Error error, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddErrorWithHttpInfoAsync(Error error, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMetricAsync(Metric metric, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMetricWithHttpInfoAsync(Metric metric, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        System.Threading.Tasks.Task<Har> GetHarLogAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        System.Threading.Tasks.Task<ApiResponse<Har>> GetHarLogWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HealthcheckAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthcheckWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        System.Threading.Tasks.Task<Har> NewPageAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        System.Threading.Tasks.Task<ApiResponse<Har>> NewPageWithHttpInfoAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        System.Threading.Tasks.Task<Har> ResetHarLogAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        System.Threading.Tasks.Task<ApiResponse<Har>> ResetHarLogWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        System.Threading.Tasks.Task<VerifyResult> VerifyNotPresentAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyResult>> VerifyNotPresentWithHttpInfoAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        System.Threading.Tasks.Task<VerifyResult> VerifyPresentAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyResult>> VerifyPresentWithHttpInfoAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        System.Threading.Tasks.Task<VerifyResult> VerifySLAAsync(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyResult>> VerifySLAWithHttpInfoAsync(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        System.Threading.Tasks.Task<VerifyResult> VerifySizeAsync(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyResult>> VerifySizeWithHttpInfoAsync(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBrowserUpProxyApi : IBrowserUpProxyApiSync, IBrowserUpProxyApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BrowserUpProxyApi : IBrowserUpProxyApi
    {
        private BrowserUpMitmProxyClient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserUpProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrowserUpProxyApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserUpProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrowserUpProxyApi(string basePath)
        {
            this.Configuration = BrowserUpMitmProxyClient.Client.Configuration.MergeConfigurations(
                BrowserUpMitmProxyClient.Client.GlobalConfiguration.Instance,
                new BrowserUpMitmProxyClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BrowserUpMitmProxyClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BrowserUpMitmProxyClient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BrowserUpMitmProxyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserUpProxyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BrowserUpProxyApi(BrowserUpMitmProxyClient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BrowserUpMitmProxyClient.Client.Configuration.MergeConfigurations(
                BrowserUpMitmProxyClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BrowserUpMitmProxyClient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BrowserUpMitmProxyClient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BrowserUpMitmProxyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserUpProxyApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BrowserUpProxyApi(BrowserUpMitmProxyClient.Client.ISynchronousClient client, BrowserUpMitmProxyClient.Client.IAsynchronousClient asyncClient, BrowserUpMitmProxyClient.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BrowserUpMitmProxyClient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BrowserUpMitmProxyClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BrowserUpMitmProxyClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BrowserUpMitmProxyClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BrowserUpMitmProxyClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddError(Error error, int operationIndex = 0)
        {
            AddErrorWithHttpInfo(error);
        }

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Object> AddErrorWithHttpInfo(Error error, int operationIndex = 0)
        {
            // verify the required parameter 'error' is set
            if (error == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'error' when calling BrowserUpProxyApi->AddError");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = error;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.AddError";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/har/errors", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddErrorAsync(Error error, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddErrorWithHttpInfoAsync(error, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Object>> AddErrorWithHttpInfoAsync(Error error, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'error' is set
            if (error == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'error' when calling BrowserUpProxyApi->AddError");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = error;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.AddError";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/har/errors", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddError", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void AddMetric(Metric metric, int operationIndex = 0)
        {
            AddMetricWithHttpInfo(metric);
        }

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Object> AddMetricWithHttpInfo(Metric metric, int operationIndex = 0)
        {
            // verify the required parameter 'metric' is set
            if (metric == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'metric' when calling BrowserUpProxyApi->AddMetric");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = metric;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.AddMetric";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/har/metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMetric", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMetricAsync(Metric metric, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await AddMetricWithHttpInfoAsync(metric, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Object>> AddMetricWithHttpInfoAsync(Metric metric, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'metric' is set
            if (metric == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'metric' when calling BrowserUpProxyApi->AddMetric");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = metric;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.AddMetric";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/har/metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMetric", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        public Har GetHarLog(int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = GetHarLogWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Har> GetHarLogWithHttpInfo(int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.GetHarLog";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Har>("/har", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHarLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        public async System.Threading.Tasks.Task<Har> GetHarLogAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = await GetHarLogWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Har>> GetHarLogWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.GetHarLog";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Har>("/har", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetHarLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void Healthcheck(int operationIndex = 0)
        {
            HealthcheckWithHttpInfo();
        }

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Object> HealthcheckWithHttpInfo(int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.Healthcheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/healthcheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Healthcheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HealthcheckAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await HealthcheckWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Object>> HealthcheckWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.Healthcheck";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/healthcheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Healthcheck", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        public Har NewPage(string title, int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = NewPageWithHttpInfo(title);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Har> NewPageWithHttpInfo(string title, int operationIndex = 0)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'title' when calling BrowserUpProxyApi->NewPage");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("title", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(title)); // path parameter

            localVarRequestOptions.Operation = "BrowserUpProxyApi.NewPage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Har>("/har/page", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        public async System.Threading.Tasks.Task<Har> NewPageAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = await NewPageWithHttpInfoAsync(title, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Har>> NewPageWithHttpInfoAsync(string title, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'title' when calling BrowserUpProxyApi->NewPage");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("title", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(title)); // path parameter

            localVarRequestOptions.Operation = "BrowserUpProxyApi.NewPage";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Har>("/har/page", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NewPage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Har</returns>
        public Har ResetHarLog(int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = ResetHarLogWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Har</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<Har> ResetHarLogWithHttpInfo(int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.ResetHarLog";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Har>("/har", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetHarLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Har</returns>
        public async System.Threading.Tasks.Task<Har> ResetHarLogAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<Har> localVarResponse = await ResetHarLogWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Har)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<Har>> ResetHarLogWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "BrowserUpProxyApi.ResetHarLog";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Har>("/har", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResetHarLog", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        public VerifyResult VerifyNotPresent(string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = VerifyNotPresentWithHttpInfo(name, matchCriteria);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> VerifyNotPresentWithHttpInfo(string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifyNotPresent");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifyNotPresent");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifyNotPresent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyResult>("/verify/not_present/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyNotPresent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        public async System.Threading.Tasks.Task<VerifyResult> VerifyNotPresentAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = await VerifyNotPresentWithHttpInfoAsync(name, matchCriteria, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult>> VerifyNotPresentWithHttpInfoAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifyNotPresent");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifyNotPresent");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifyNotPresent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyResult>("/verify/not_present/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyNotPresent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        public VerifyResult VerifyPresent(string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = VerifyPresentWithHttpInfo(name, matchCriteria);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> VerifyPresentWithHttpInfo(string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifyPresent");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifyPresent");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifyPresent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyResult>("/verify/present/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPresent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        public async System.Threading.Tasks.Task<VerifyResult> VerifyPresentAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = await VerifyPresentWithHttpInfoAsync(name, matchCriteria, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult>> VerifyPresentWithHttpInfoAsync(string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifyPresent");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifyPresent");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifyPresent";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyResult>("/verify/present/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifyPresent", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        public VerifyResult VerifySLA(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = VerifySLAWithHttpInfo(time, name, matchCriteria);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> VerifySLAWithHttpInfo(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifySLA");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifySLA");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("time", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(time)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifySLA";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyResult>("/verify/sla/{time}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifySLA", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        public async System.Threading.Tasks.Task<VerifyResult> VerifySLAAsync(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = await VerifySLAWithHttpInfoAsync(time, name, matchCriteria, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult>> VerifySLAWithHttpInfoAsync(int time, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifySLA");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifySLA");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("time", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(time)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifySLA";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyResult>("/verify/sla/{time}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifySLA", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>VerifyResult</returns>
        public VerifyResult VerifySize(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = VerifySizeWithHttpInfo(size, name, matchCriteria);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of VerifyResult</returns>
        public BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> VerifySizeWithHttpInfo(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifySize");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifySize");
            }

            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("size", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(size)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifySize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<VerifyResult>("/verify/size/{size}/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifySize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of VerifyResult</returns>
        public async System.Threading.Tasks.Task<VerifyResult> VerifySizeAsync(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult> localVarResponse = await VerifySizeWithHttpInfoAsync(size, name, matchCriteria, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <exception cref="BrowserUpMitmProxyClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (VerifyResult)</returns>
        public async System.Threading.Tasks.Task<BrowserUpMitmProxyClient.Client.ApiResponse<VerifyResult>> VerifySizeWithHttpInfoAsync(int size, string name, MatchCriteria matchCriteria, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'name' when calling BrowserUpProxyApi->VerifySize");
            }

            // verify the required parameter 'matchCriteria' is set
            if (matchCriteria == null)
            {
                throw new BrowserUpMitmProxyClient.Client.ApiException(400, "Missing required parameter 'matchCriteria' when calling BrowserUpProxyApi->VerifySize");
            }


            BrowserUpMitmProxyClient.Client.RequestOptions localVarRequestOptions = new BrowserUpMitmProxyClient.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = BrowserUpMitmProxyClient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("size", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(size)); // path parameter
            localVarRequestOptions.PathParameters.Add("name", BrowserUpMitmProxyClient.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = matchCriteria;

            localVarRequestOptions.Operation = "BrowserUpProxyApi.VerifySize";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<VerifyResult>("/verify/size/{size}/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("VerifySize", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
