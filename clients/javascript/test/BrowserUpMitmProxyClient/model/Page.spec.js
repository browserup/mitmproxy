/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/BrowserUpMitmProxyClient/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/BrowserUpMitmProxyClient/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrowserUpMitmProxyClient);
  }
}(this, function(expect, BrowserUpMitmProxyClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrowserUpMitmProxyClient.Page();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Page', function() {
    it('should create an instance of Page', function() {
      // uncomment below and update the code to test Page
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be.a(BrowserUpMitmProxyClient.Page);
    });

    it('should have the property startedDateTime (base name: "startedDateTime")', function() {
      // uncomment below and update the code to test the property startedDateTime
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property verifications (base name: "_verifications")', function() {
      // uncomment below and update the code to test the property verifications
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property metrics (base name: "_metrics")', function() {
      // uncomment below and update the code to test the property metrics
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property errors (base name: "_errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property spanId (base name: "_span_id")', function() {
      // uncomment below and update the code to test the property spanId
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "_parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property pageTimings (base name: "pageTimings")', function() {
      // uncomment below and update the code to test the property pageTimings
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new BrowserUpMitmProxyClient.Page();
      //expect(instance).to.be();
    });

  });

}));
