# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.25
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from BrowserUpMitmProxyClient.models.har_entry_cache import HarEntryCache
from BrowserUpMitmProxyClient.models.har_entry_request import HarEntryRequest
from BrowserUpMitmProxyClient.models.har_entry_response import HarEntryResponse
from BrowserUpMitmProxyClient.models.har_entry_timings import HarEntryTimings
from BrowserUpMitmProxyClient.models.web_socket_message import WebSocketMessage
from typing import Optional, Set
from typing_extensions import Self

class HarEntry(BaseModel):
    """
    HarEntry
    """ # noqa: E501
    pageref: Optional[StrictStr] = None
    started_date_time: datetime = Field(alias="startedDateTime")
    time: Annotated[int, Field(strict=True, ge=0)]
    request: HarEntryRequest
    response: HarEntryResponse
    cache: HarEntryCache
    timings: HarEntryTimings
    server_ip_address: Optional[StrictStr] = Field(default=None, alias="serverIPAddress")
    web_socket_messages: Optional[List[WebSocketMessage]] = Field(default=None, alias="_webSocketMessages")
    span_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context span ID for this entry", alias="_span_id")
    parent_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context parent span ID (typically the page span ID)", alias="_parent_id")
    trace_id: Optional[StrictStr] = Field(default=None, description="W3C Trace Context trace ID for distributed tracing", alias="_trace_id")
    connection: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["pageref", "startedDateTime", "time", "request", "response", "cache", "timings", "serverIPAddress", "_webSocketMessages", "_span_id", "_parent_id", "_trace_id", "connection", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HarEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of response
        if self.response:
            _dict['response'] = self.response.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cache
        if self.cache:
            _dict['cache'] = self.cache.to_dict()
        # override the default output from pydantic by calling `to_dict()` of timings
        if self.timings:
            _dict['timings'] = self.timings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in web_socket_messages (list)
        _items = []
        if self.web_socket_messages:
            for _item_web_socket_messages in self.web_socket_messages:
                if _item_web_socket_messages:
                    _items.append(_item_web_socket_messages.to_dict())
            _dict['_webSocketMessages'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HarEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pageref": obj.get("pageref"),
            "startedDateTime": obj.get("startedDateTime"),
            "time": obj.get("time"),
            "request": HarEntryRequest.from_dict(obj["request"]) if obj.get("request") is not None else None,
            "response": HarEntryResponse.from_dict(obj["response"]) if obj.get("response") is not None else None,
            "cache": HarEntryCache.from_dict(obj["cache"]) if obj.get("cache") is not None else None,
            "timings": HarEntryTimings.from_dict(obj["timings"]) if obj.get("timings") is not None else None,
            "serverIPAddress": obj.get("serverIPAddress"),
            "_webSocketMessages": [WebSocketMessage.from_dict(_item) for _item in obj["_webSocketMessages"]] if obj.get("_webSocketMessages") is not None else None,
            "_span_id": obj.get("_span_id"),
            "_parent_id": obj.get("_parent_id"),
            "_trace_id": obj.get("_trace_id"),
            "connection": obj.get("connection"),
            "comment": obj.get("comment")
        })
        return _obj


