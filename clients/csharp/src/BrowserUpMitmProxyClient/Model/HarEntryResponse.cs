// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryResponse
    /// </summary>
    public partial class HarEntryResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryResponse" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="statusText">statusText</param>
        /// <param name="httpVersion">httpVersion</param>
        /// <param name="cookies">cookies</param>
        /// <param name="headers">headers</param>
        /// <param name="content">content</param>
        /// <param name="redirectURL">redirectURL</param>
        /// <param name="headersSize">headersSize</param>
        /// <param name="bodySize">bodySize</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryResponse(int status, string statusText, string httpVersion, List<HarEntryRequestCookiesInner> cookies, List<Header> headers, HarEntryResponseContent content, string redirectURL, int headersSize, int bodySize, Option<string?> comment = default)
        {
            Status = status;
            StatusText = statusText;
            HttpVersion = httpVersion;
            Cookies = cookies;
            Headers = headers;
            Content = content;
            RedirectURL = redirectURL;
            HeadersSize = headersSize;
            BodySize = bodySize;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// Gets or Sets StatusText
        /// </summary>
        [JsonPropertyName("statusText")]
        public string StatusText { get; set; }

        /// <summary>
        /// Gets or Sets HttpVersion
        /// </summary>
        [JsonPropertyName("httpVersion")]
        public string HttpVersion { get; set; }

        /// <summary>
        /// Gets or Sets Cookies
        /// </summary>
        [JsonPropertyName("cookies")]
        public List<HarEntryRequestCookiesInner> Cookies { get; set; }

        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [JsonPropertyName("headers")]
        public List<Header> Headers { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public HarEntryResponseContent Content { get; set; }

        /// <summary>
        /// Gets or Sets RedirectURL
        /// </summary>
        [JsonPropertyName("redirectURL")]
        public string RedirectURL { get; set; }

        /// <summary>
        /// Gets or Sets HeadersSize
        /// </summary>
        [JsonPropertyName("headersSize")]
        public int HeadersSize { get; set; }

        /// <summary>
        /// Gets or Sets BodySize
        /// </summary>
        [JsonPropertyName("bodySize")]
        public int BodySize { get; set; }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusText: ").Append(StatusText).Append("\n");
            sb.Append("  HttpVersion: ").Append(HttpVersion).Append("\n");
            sb.Append("  Cookies: ").Append(Cookies).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  RedirectURL: ").Append(RedirectURL).Append("\n");
            sb.Append("  HeadersSize: ").Append(HeadersSize).Append("\n");
            sb.Append("  BodySize: ").Append(BodySize).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryResponse" />
    /// </summary>
    public class HarEntryResponseJsonConverter : JsonConverter<HarEntryResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> status = default;
            Option<string?> statusText = default;
            Option<string?> httpVersion = default;
            Option<List<HarEntryRequestCookiesInner>?> cookies = default;
            Option<List<Header>?> headers = default;
            Option<HarEntryResponseContent?> content = default;
            Option<string?> redirectURL = default;
            Option<int?> headersSize = default;
            Option<int?> bodySize = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "statusText":
                            statusText = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "httpVersion":
                            httpVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cookies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cookies = new Option<List<HarEntryRequestCookiesInner>?>(JsonSerializer.Deserialize<List<HarEntryRequestCookiesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "headers":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                headers = new Option<List<Header>?>(JsonSerializer.Deserialize<List<Header>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "content":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                content = new Option<HarEntryResponseContent?>(JsonSerializer.Deserialize<HarEntryResponseContent>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "redirectURL":
                            redirectURL = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "headersSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                headersSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "bodySize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bodySize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(status));

            if (!statusText.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(statusText));

            if (!httpVersion.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(httpVersion));

            if (!cookies.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(cookies));

            if (!headers.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(headers));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(content));

            if (!redirectURL.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(redirectURL));

            if (!headersSize.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(headersSize));

            if (!bodySize.IsSet)
                throw new ArgumentException("Property is required for class HarEntryResponse.", nameof(bodySize));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class HarEntryResponse.");

            if (statusText.IsSet && statusText.Value == null)
                throw new ArgumentNullException(nameof(statusText), "Property is not nullable for class HarEntryResponse.");

            if (httpVersion.IsSet && httpVersion.Value == null)
                throw new ArgumentNullException(nameof(httpVersion), "Property is not nullable for class HarEntryResponse.");

            if (cookies.IsSet && cookies.Value == null)
                throw new ArgumentNullException(nameof(cookies), "Property is not nullable for class HarEntryResponse.");

            if (headers.IsSet && headers.Value == null)
                throw new ArgumentNullException(nameof(headers), "Property is not nullable for class HarEntryResponse.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class HarEntryResponse.");

            if (redirectURL.IsSet && redirectURL.Value == null)
                throw new ArgumentNullException(nameof(redirectURL), "Property is not nullable for class HarEntryResponse.");

            if (headersSize.IsSet && headersSize.Value == null)
                throw new ArgumentNullException(nameof(headersSize), "Property is not nullable for class HarEntryResponse.");

            if (bodySize.IsSet && bodySize.Value == null)
                throw new ArgumentNullException(nameof(bodySize), "Property is not nullable for class HarEntryResponse.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryResponse.");

            return new HarEntryResponse(status.Value!.Value!, statusText.Value!, httpVersion.Value!, cookies.Value!, headers.Value!, content.Value!, redirectURL.Value!, headersSize.Value!.Value!, bodySize.Value!.Value!, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryResponse harEntryResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryResponse harEntryResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryResponse.StatusText == null)
                throw new ArgumentNullException(nameof(harEntryResponse.StatusText), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.HttpVersion == null)
                throw new ArgumentNullException(nameof(harEntryResponse.HttpVersion), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.Cookies == null)
                throw new ArgumentNullException(nameof(harEntryResponse.Cookies), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.Headers == null)
                throw new ArgumentNullException(nameof(harEntryResponse.Headers), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.Content == null)
                throw new ArgumentNullException(nameof(harEntryResponse.Content), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.RedirectURL == null)
                throw new ArgumentNullException(nameof(harEntryResponse.RedirectURL), "Property is required for class HarEntryResponse.");

            if (harEntryResponse.CommentOption.IsSet && harEntryResponse.Comment == null)
                throw new ArgumentNullException(nameof(harEntryResponse.Comment), "Property is required for class HarEntryResponse.");

            writer.WriteNumber("status", harEntryResponse.Status);

            writer.WriteString("statusText", harEntryResponse.StatusText);

            writer.WriteString("httpVersion", harEntryResponse.HttpVersion);

            writer.WritePropertyName("cookies");
            JsonSerializer.Serialize(writer, harEntryResponse.Cookies, jsonSerializerOptions);
            writer.WritePropertyName("headers");
            JsonSerializer.Serialize(writer, harEntryResponse.Headers, jsonSerializerOptions);
            writer.WritePropertyName("content");
            JsonSerializer.Serialize(writer, harEntryResponse.Content, jsonSerializerOptions);
            writer.WriteString("redirectURL", harEntryResponse.RedirectURL);

            writer.WriteNumber("headersSize", harEntryResponse.HeadersSize);

            writer.WriteNumber("bodySize", harEntryResponse.BodySize);

            if (harEntryResponse.CommentOption.IsSet)
                writer.WriteString("comment", harEntryResponse.Comment);
        }
    }
}
