/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"fmt"
)

// checks if the HarEntryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryRequest{}

// HarEntryRequest struct for HarEntryRequest
type HarEntryRequest struct {
	Method string `json:"method"`
	Url string `json:"url"`
	HttpVersion string `json:"httpVersion"`
	Cookies []HarEntryRequestCookiesInner `json:"cookies"`
	Headers []Header `json:"headers"`
	QueryString []HarEntryRequestQueryStringInner `json:"queryString"`
	PostData *HarEntryRequestPostData `json:"postData,omitempty"`
	HeadersSize int32 `json:"headersSize"`
	BodySize int32 `json:"bodySize"`
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HarEntryRequest HarEntryRequest

// NewHarEntryRequest instantiates a new HarEntryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryRequest(method string, url string, httpVersion string, cookies []HarEntryRequestCookiesInner, headers []Header, queryString []HarEntryRequestQueryStringInner, headersSize int32, bodySize int32) *HarEntryRequest {
	this := HarEntryRequest{}
	this.Method = method
	this.Url = url
	this.HttpVersion = httpVersion
	this.Cookies = cookies
	this.Headers = headers
	this.QueryString = queryString
	this.HeadersSize = headersSize
	this.BodySize = bodySize
	return &this
}

// NewHarEntryRequestWithDefaults instantiates a new HarEntryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryRequestWithDefaults() *HarEntryRequest {
	this := HarEntryRequest{}
	return &this
}

// GetMethod returns the Method field value
func (o *HarEntryRequest) GetMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Method
}

// GetMethodOk returns a tuple with the Method field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Method, true
}

// SetMethod sets field value
func (o *HarEntryRequest) SetMethod(v string) {
	o.Method = v
}

// GetUrl returns the Url field value
func (o *HarEntryRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *HarEntryRequest) SetUrl(v string) {
	o.Url = v
}

// GetHttpVersion returns the HttpVersion field value
func (o *HarEntryRequest) GetHttpVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetHttpVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpVersion, true
}

// SetHttpVersion sets field value
func (o *HarEntryRequest) SetHttpVersion(v string) {
	o.HttpVersion = v
}

// GetCookies returns the Cookies field value
func (o *HarEntryRequest) GetCookies() []HarEntryRequestCookiesInner {
	if o == nil {
		var ret []HarEntryRequestCookiesInner
		return ret
	}

	return o.Cookies
}

// GetCookiesOk returns a tuple with the Cookies field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetCookiesOk() ([]HarEntryRequestCookiesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookies, true
}

// SetCookies sets field value
func (o *HarEntryRequest) SetCookies(v []HarEntryRequestCookiesInner) {
	o.Cookies = v
}

// GetHeaders returns the Headers field value
func (o *HarEntryRequest) GetHeaders() []Header {
	if o == nil {
		var ret []Header
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetHeadersOk() ([]Header, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *HarEntryRequest) SetHeaders(v []Header) {
	o.Headers = v
}

// GetQueryString returns the QueryString field value
func (o *HarEntryRequest) GetQueryString() []HarEntryRequestQueryStringInner {
	if o == nil {
		var ret []HarEntryRequestQueryStringInner
		return ret
	}

	return o.QueryString
}

// GetQueryStringOk returns a tuple with the QueryString field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetQueryStringOk() ([]HarEntryRequestQueryStringInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryString, true
}

// SetQueryString sets field value
func (o *HarEntryRequest) SetQueryString(v []HarEntryRequestQueryStringInner) {
	o.QueryString = v
}

// GetPostData returns the PostData field value if set, zero value otherwise.
func (o *HarEntryRequest) GetPostData() HarEntryRequestPostData {
	if o == nil || IsNil(o.PostData) {
		var ret HarEntryRequestPostData
		return ret
	}
	return *o.PostData
}

// GetPostDataOk returns a tuple with the PostData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetPostDataOk() (*HarEntryRequestPostData, bool) {
	if o == nil || IsNil(o.PostData) {
		return nil, false
	}
	return o.PostData, true
}

// HasPostData returns a boolean if a field has been set.
func (o *HarEntryRequest) HasPostData() bool {
	if o != nil && !IsNil(o.PostData) {
		return true
	}

	return false
}

// SetPostData gets a reference to the given HarEntryRequestPostData and assigns it to the PostData field.
func (o *HarEntryRequest) SetPostData(v HarEntryRequestPostData) {
	o.PostData = &v
}

// GetHeadersSize returns the HeadersSize field value
func (o *HarEntryRequest) GetHeadersSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeadersSize
}

// GetHeadersSizeOk returns a tuple with the HeadersSize field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetHeadersSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeadersSize, true
}

// SetHeadersSize sets field value
func (o *HarEntryRequest) SetHeadersSize(v int32) {
	o.HeadersSize = v
}

// GetBodySize returns the BodySize field value
func (o *HarEntryRequest) GetBodySize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BodySize
}

// GetBodySizeOk returns a tuple with the BodySize field value
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetBodySizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BodySize, true
}

// SetBodySize sets field value
func (o *HarEntryRequest) SetBodySize(v int32) {
	o.BodySize = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryRequest) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["method"] = o.Method
	toSerialize["url"] = o.Url
	toSerialize["httpVersion"] = o.HttpVersion
	toSerialize["cookies"] = o.Cookies
	toSerialize["headers"] = o.Headers
	toSerialize["queryString"] = o.QueryString
	if !IsNil(o.PostData) {
		toSerialize["postData"] = o.PostData
	}
	toSerialize["headersSize"] = o.HeadersSize
	toSerialize["bodySize"] = o.BodySize
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HarEntryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"method",
		"url",
		"httpVersion",
		"cookies",
		"headers",
		"queryString",
		"headersSize",
		"bodySize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntryRequest := _HarEntryRequest{}

	err = json.Unmarshal(data, &varHarEntryRequest)

	if err != nil {
		return err
	}

	*o = HarEntryRequest(varHarEntryRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "method")
		delete(additionalProperties, "url")
		delete(additionalProperties, "httpVersion")
		delete(additionalProperties, "cookies")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "queryString")
		delete(additionalProperties, "postData")
		delete(additionalProperties, "headersSize")
		delete(additionalProperties, "bodySize")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHarEntryRequest struct {
	value *HarEntryRequest
	isSet bool
}

func (v NullableHarEntryRequest) Get() *HarEntryRequest {
	return v.value
}

func (v *NullableHarEntryRequest) Set(val *HarEntryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryRequest(val *HarEntryRequest) *NullableHarEntryRequest {
	return &NullableHarEntryRequest{value: val, isSet: true}
}

func (v NullableHarEntryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


