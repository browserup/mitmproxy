// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarLog
    /// </summary>
    public partial class HarLog : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarLog" /> class.
        /// </summary>
        /// <param name="varVersion">varVersion</param>
        /// <param name="creator">creator</param>
        /// <param name="pages">pages</param>
        /// <param name="entries">entries</param>
        /// <param name="browser">browser</param>
        /// <param name="traceId">W3C Trace Context trace ID for distributed tracing</param>
        /// <param name="spanId">W3C Trace Context span ID for this HAR trace root</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarLog(string varVersion, HarLogCreator creator, List<Page> pages, List<HarEntry> entries, Option<HarLogCreator?> browser = default, Option<string?> traceId = default, Option<string?> spanId = default, Option<string?> comment = default)
        {
            VarVersion = varVersion;
            Creator = creator;
            Pages = pages;
            Entries = entries;
            BrowserOption = browser;
            TraceIdOption = traceId;
            SpanIdOption = spanId;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [JsonPropertyName("version")]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [JsonPropertyName("creator")]
        public HarLogCreator Creator { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [JsonPropertyName("pages")]
        public List<Page> Pages { get; set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [JsonPropertyName("entries")]
        public List<HarEntry> Entries { get; set; }

        /// <summary>
        /// Used to track the state of Browser
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HarLogCreator?> BrowserOption { get; private set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [JsonPropertyName("browser")]
        public HarLogCreator? Browser { get { return this.BrowserOption; } set { this.BrowserOption = new(value); } }

        /// <summary>
        /// Used to track the state of TraceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TraceIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context trace ID for distributed tracing
        /// </summary>
        /// <value>W3C Trace Context trace ID for distributed tracing</value>
        [JsonPropertyName("_trace_id")]
        public string? TraceId { get { return this.TraceIdOption; } set { this.TraceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpanId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpanIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context span ID for this HAR trace root
        /// </summary>
        /// <value>W3C Trace Context span ID for this HAR trace root</value>
        [JsonPropertyName("_span_id")]
        public string? SpanId { get { return this.SpanIdOption; } set { this.SpanIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarLog {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  SpanId: ").Append(SpanId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarLog" />
    /// </summary>
    public class HarLogJsonConverter : JsonConverter<HarLog>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarLog" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarLog Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varVersion = default;
            Option<HarLogCreator?> creator = default;
            Option<List<Page>?> pages = default;
            Option<List<HarEntry>?> entries = default;
            Option<HarLogCreator?> browser = default;
            Option<string?> traceId = default;
            Option<string?> spanId = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creator = new Option<HarLogCreator?>(JsonSerializer.Deserialize<HarLogCreator>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pages = new Option<List<Page>?>(JsonSerializer.Deserialize<List<Page>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "entries":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                entries = new Option<List<HarEntry>?>(JsonSerializer.Deserialize<List<HarEntry>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "browser":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                browser = new Option<HarLogCreator?>(JsonSerializer.Deserialize<HarLogCreator>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_trace_id":
                            traceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_span_id":
                            spanId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varVersion.IsSet)
                throw new ArgumentException("Property is required for class HarLog.", nameof(varVersion));

            if (!creator.IsSet)
                throw new ArgumentException("Property is required for class HarLog.", nameof(creator));

            if (!pages.IsSet)
                throw new ArgumentException("Property is required for class HarLog.", nameof(pages));

            if (!entries.IsSet)
                throw new ArgumentException("Property is required for class HarLog.", nameof(entries));

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class HarLog.");

            if (creator.IsSet && creator.Value == null)
                throw new ArgumentNullException(nameof(creator), "Property is not nullable for class HarLog.");

            if (pages.IsSet && pages.Value == null)
                throw new ArgumentNullException(nameof(pages), "Property is not nullable for class HarLog.");

            if (entries.IsSet && entries.Value == null)
                throw new ArgumentNullException(nameof(entries), "Property is not nullable for class HarLog.");

            if (browser.IsSet && browser.Value == null)
                throw new ArgumentNullException(nameof(browser), "Property is not nullable for class HarLog.");

            if (traceId.IsSet && traceId.Value == null)
                throw new ArgumentNullException(nameof(traceId), "Property is not nullable for class HarLog.");

            if (spanId.IsSet && spanId.Value == null)
                throw new ArgumentNullException(nameof(spanId), "Property is not nullable for class HarLog.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarLog.");

            return new HarLog(varVersion.Value!, creator.Value!, pages.Value!, entries.Value!, browser, traceId, spanId, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarLog" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harLog"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarLog harLog, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harLog, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarLog" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harLog"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarLog harLog, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harLog.VarVersion == null)
                throw new ArgumentNullException(nameof(harLog.VarVersion), "Property is required for class HarLog.");

            if (harLog.Creator == null)
                throw new ArgumentNullException(nameof(harLog.Creator), "Property is required for class HarLog.");

            if (harLog.Pages == null)
                throw new ArgumentNullException(nameof(harLog.Pages), "Property is required for class HarLog.");

            if (harLog.Entries == null)
                throw new ArgumentNullException(nameof(harLog.Entries), "Property is required for class HarLog.");

            if (harLog.BrowserOption.IsSet && harLog.Browser == null)
                throw new ArgumentNullException(nameof(harLog.Browser), "Property is required for class HarLog.");

            if (harLog.TraceIdOption.IsSet && harLog.TraceId == null)
                throw new ArgumentNullException(nameof(harLog.TraceId), "Property is required for class HarLog.");

            if (harLog.SpanIdOption.IsSet && harLog.SpanId == null)
                throw new ArgumentNullException(nameof(harLog.SpanId), "Property is required for class HarLog.");

            if (harLog.CommentOption.IsSet && harLog.Comment == null)
                throw new ArgumentNullException(nameof(harLog.Comment), "Property is required for class HarLog.");

            writer.WriteString("version", harLog.VarVersion);

            writer.WritePropertyName("creator");
            JsonSerializer.Serialize(writer, harLog.Creator, jsonSerializerOptions);
            writer.WritePropertyName("pages");
            JsonSerializer.Serialize(writer, harLog.Pages, jsonSerializerOptions);
            writer.WritePropertyName("entries");
            JsonSerializer.Serialize(writer, harLog.Entries, jsonSerializerOptions);
            if (harLog.BrowserOption.IsSet)
            {
                writer.WritePropertyName("browser");
                JsonSerializer.Serialize(writer, harLog.Browser, jsonSerializerOptions);
            }
            if (harLog.TraceIdOption.IsSet)
                writer.WriteString("_trace_id", harLog.TraceId);

            if (harLog.SpanIdOption.IsSet)
                writer.WriteString("_span_id", harLog.SpanId);

            if (harLog.CommentOption.IsSet)
                writer.WriteString("comment", harLog.Comment);
        }
    }
}
