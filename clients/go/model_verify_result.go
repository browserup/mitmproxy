/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
)

// checks if the VerifyResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyResult{}

// VerifyResult struct for VerifyResult
type VerifyResult struct {
	// Result True / False
	Result *bool `json:"result,omitempty"`
	// Name
	Name *string `json:"name,omitempty"`
	// Type
	Type *string `json:"type,omitempty"`
}

// NewVerifyResult instantiates a new VerifyResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyResult() *VerifyResult {
	this := VerifyResult{}
	return &this
}

// NewVerifyResultWithDefaults instantiates a new VerifyResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyResultWithDefaults() *VerifyResult {
	this := VerifyResult{}
	return &this
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *VerifyResult) GetResult() bool {
	if o == nil || IsNil(o.Result) {
		var ret bool
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResult) GetResultOk() (*bool, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *VerifyResult) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given bool and assigns it to the Result field.
func (o *VerifyResult) SetResult(v bool) {
	o.Result = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VerifyResult) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResult) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VerifyResult) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VerifyResult) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VerifyResult) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyResult) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VerifyResult) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VerifyResult) SetType(v string) {
	o.Type = &v
}

func (o VerifyResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVerifyResult struct {
	value *VerifyResult
	isSet bool
}

func (v NullableVerifyResult) Get() *VerifyResult {
	return v.value
}

func (v *NullableVerifyResult) Set(val *VerifyResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyResult(val *VerifyResult) *NullableVerifyResult {
	return &NullableVerifyResult{value: val, isSet: true}
}

func (v NullableVerifyResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


