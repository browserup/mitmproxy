/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the HarEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntry{}

// HarEntry struct for HarEntry
type HarEntry struct {
	Pageref *string `json:"pageref,omitempty"`
	StartedDateTime time.Time `json:"startedDateTime"`
	Time int64 `json:"time"`
	Request HarEntryRequest `json:"request"`
	Response HarEntryResponse `json:"response"`
	Cache HarEntryCache `json:"cache"`
	Timings HarEntryTimings `json:"timings"`
	ServerIPAddress *string `json:"serverIPAddress,omitempty"`
	WebSocketMessages []WebSocketMessage `json:"_webSocketMessages,omitempty"`
	// W3C Trace Context span ID for this entry
	SpanId *string `json:"_span_id,omitempty"`
	// W3C Trace Context parent span ID (typically the page span ID)
	ParentId *string `json:"_parent_id,omitempty"`
	// W3C Trace Context trace ID for distributed tracing
	TraceId *string `json:"_trace_id,omitempty"`
	Connection *string `json:"connection,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

type _HarEntry HarEntry

// NewHarEntry instantiates a new HarEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntry(startedDateTime time.Time, time int64, request HarEntryRequest, response HarEntryResponse, cache HarEntryCache, timings HarEntryTimings) *HarEntry {
	this := HarEntry{}
	this.StartedDateTime = startedDateTime
	this.Time = time
	this.Request = request
	this.Response = response
	this.Cache = cache
	this.Timings = timings
	return &this
}

// NewHarEntryWithDefaults instantiates a new HarEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryWithDefaults() *HarEntry {
	this := HarEntry{}
	return &this
}

// GetPageref returns the Pageref field value if set, zero value otherwise.
func (o *HarEntry) GetPageref() string {
	if o == nil || IsNil(o.Pageref) {
		var ret string
		return ret
	}
	return *o.Pageref
}

// GetPagerefOk returns a tuple with the Pageref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetPagerefOk() (*string, bool) {
	if o == nil || IsNil(o.Pageref) {
		return nil, false
	}
	return o.Pageref, true
}

// HasPageref returns a boolean if a field has been set.
func (o *HarEntry) HasPageref() bool {
	if o != nil && !IsNil(o.Pageref) {
		return true
	}

	return false
}

// SetPageref gets a reference to the given string and assigns it to the Pageref field.
func (o *HarEntry) SetPageref(v string) {
	o.Pageref = &v
}

// GetStartedDateTime returns the StartedDateTime field value
func (o *HarEntry) GetStartedDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartedDateTime
}

// GetStartedDateTimeOk returns a tuple with the StartedDateTime field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetStartedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartedDateTime, true
}

// SetStartedDateTime sets field value
func (o *HarEntry) SetStartedDateTime(v time.Time) {
	o.StartedDateTime = v
}

// GetTime returns the Time field value
func (o *HarEntry) GetTime() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *HarEntry) SetTime(v int64) {
	o.Time = v
}

// GetRequest returns the Request field value
func (o *HarEntry) GetRequest() HarEntryRequest {
	if o == nil {
		var ret HarEntryRequest
		return ret
	}

	return o.Request
}

// GetRequestOk returns a tuple with the Request field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetRequestOk() (*HarEntryRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Request, true
}

// SetRequest sets field value
func (o *HarEntry) SetRequest(v HarEntryRequest) {
	o.Request = v
}

// GetResponse returns the Response field value
func (o *HarEntry) GetResponse() HarEntryResponse {
	if o == nil {
		var ret HarEntryResponse
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetResponseOk() (*HarEntryResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *HarEntry) SetResponse(v HarEntryResponse) {
	o.Response = v
}

// GetCache returns the Cache field value
func (o *HarEntry) GetCache() HarEntryCache {
	if o == nil {
		var ret HarEntryCache
		return ret
	}

	return o.Cache
}

// GetCacheOk returns a tuple with the Cache field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetCacheOk() (*HarEntryCache, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cache, true
}

// SetCache sets field value
func (o *HarEntry) SetCache(v HarEntryCache) {
	o.Cache = v
}

// GetTimings returns the Timings field value
func (o *HarEntry) GetTimings() HarEntryTimings {
	if o == nil {
		var ret HarEntryTimings
		return ret
	}

	return o.Timings
}

// GetTimingsOk returns a tuple with the Timings field value
// and a boolean to check if the value has been set.
func (o *HarEntry) GetTimingsOk() (*HarEntryTimings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timings, true
}

// SetTimings sets field value
func (o *HarEntry) SetTimings(v HarEntryTimings) {
	o.Timings = v
}

// GetServerIPAddress returns the ServerIPAddress field value if set, zero value otherwise.
func (o *HarEntry) GetServerIPAddress() string {
	if o == nil || IsNil(o.ServerIPAddress) {
		var ret string
		return ret
	}
	return *o.ServerIPAddress
}

// GetServerIPAddressOk returns a tuple with the ServerIPAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetServerIPAddressOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIPAddress) {
		return nil, false
	}
	return o.ServerIPAddress, true
}

// HasServerIPAddress returns a boolean if a field has been set.
func (o *HarEntry) HasServerIPAddress() bool {
	if o != nil && !IsNil(o.ServerIPAddress) {
		return true
	}

	return false
}

// SetServerIPAddress gets a reference to the given string and assigns it to the ServerIPAddress field.
func (o *HarEntry) SetServerIPAddress(v string) {
	o.ServerIPAddress = &v
}

// GetWebSocketMessages returns the WebSocketMessages field value if set, zero value otherwise.
func (o *HarEntry) GetWebSocketMessages() []WebSocketMessage {
	if o == nil || IsNil(o.WebSocketMessages) {
		var ret []WebSocketMessage
		return ret
	}
	return o.WebSocketMessages
}

// GetWebSocketMessagesOk returns a tuple with the WebSocketMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetWebSocketMessagesOk() ([]WebSocketMessage, bool) {
	if o == nil || IsNil(o.WebSocketMessages) {
		return nil, false
	}
	return o.WebSocketMessages, true
}

// HasWebSocketMessages returns a boolean if a field has been set.
func (o *HarEntry) HasWebSocketMessages() bool {
	if o != nil && !IsNil(o.WebSocketMessages) {
		return true
	}

	return false
}

// SetWebSocketMessages gets a reference to the given []WebSocketMessage and assigns it to the WebSocketMessages field.
func (o *HarEntry) SetWebSocketMessages(v []WebSocketMessage) {
	o.WebSocketMessages = v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *HarEntry) GetSpanId() string {
	if o == nil || IsNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetSpanIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *HarEntry) HasSpanId() bool {
	if o != nil && !IsNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *HarEntry) SetSpanId(v string) {
	o.SpanId = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *HarEntry) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *HarEntry) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *HarEntry) SetParentId(v string) {
	o.ParentId = &v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *HarEntry) GetTraceId() string {
	if o == nil || IsNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *HarEntry) HasTraceId() bool {
	if o != nil && !IsNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *HarEntry) SetTraceId(v string) {
	o.TraceId = &v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *HarEntry) GetConnection() string {
	if o == nil || IsNil(o.Connection) {
		var ret string
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetConnectionOk() (*string, bool) {
	if o == nil || IsNil(o.Connection) {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *HarEntry) HasConnection() bool {
	if o != nil && !IsNil(o.Connection) {
		return true
	}

	return false
}

// SetConnection gets a reference to the given string and assigns it to the Connection field.
func (o *HarEntry) SetConnection(v string) {
	o.Connection = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntry) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntry) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntry) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntry) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pageref) {
		toSerialize["pageref"] = o.Pageref
	}
	toSerialize["startedDateTime"] = o.StartedDateTime
	toSerialize["time"] = o.Time
	toSerialize["request"] = o.Request
	toSerialize["response"] = o.Response
	toSerialize["cache"] = o.Cache
	toSerialize["timings"] = o.Timings
	if !IsNil(o.ServerIPAddress) {
		toSerialize["serverIPAddress"] = o.ServerIPAddress
	}
	if !IsNil(o.WebSocketMessages) {
		toSerialize["_webSocketMessages"] = o.WebSocketMessages
	}
	if !IsNil(o.SpanId) {
		toSerialize["_span_id"] = o.SpanId
	}
	if !IsNil(o.ParentId) {
		toSerialize["_parent_id"] = o.ParentId
	}
	if !IsNil(o.TraceId) {
		toSerialize["_trace_id"] = o.TraceId
	}
	if !IsNil(o.Connection) {
		toSerialize["connection"] = o.Connection
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *HarEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startedDateTime",
		"time",
		"request",
		"response",
		"cache",
		"timings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntry := _HarEntry{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarEntry)

	if err != nil {
		return err
	}

	*o = HarEntry(varHarEntry)

	return err
}

type NullableHarEntry struct {
	value *HarEntry
	isSet bool
}

func (v NullableHarEntry) Get() *HarEntry {
	return v.value
}

func (v *NullableHarEntry) Set(val *HarEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntry(val *HarEntry) *NullableHarEntry {
	return &NullableHarEntry{value: val, isSet: true}
}

func (v NullableHarEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


