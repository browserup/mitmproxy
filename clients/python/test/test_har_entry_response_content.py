# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.25
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from BrowserUpMitmProxyClient.models.har_entry_response_content import HarEntryResponseContent

class TestHarEntryResponseContent(unittest.TestCase):
    """HarEntryResponseContent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HarEntryResponseContent:
        """Test HarEntryResponseContent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HarEntryResponseContent`
        """
        model = HarEntryResponseContent()
        if include_optional:
            return HarEntryResponseContent(
                size = 56,
                compression = 56,
                mime_type = '',
                text = '',
                encoding = '',
                video_buffered_percent = -1,
                video_stall_count = -1,
                video_decoded_byte_count = -1,
                video_waiting_count = -1,
                video_error_count = -1,
                video_dropped_frames = -1,
                video_total_frames = -1,
                video_audio_bytes_decoded = -1,
                comment = ''
            )
        else:
            return HarEntryResponseContent(
                size = 56,
                mime_type = '',
        )
        """

    def testHarEntryResponseContent(self):
        """Test HarEntryResponseContent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
