/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using BrowserUpMitmProxyClient.Api;
using BrowserUpMitmProxyClient.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace BrowserUpMitmProxyClient.Test.Api
{
    /// <summary>
    ///  Class for testing BrowserUpProxyApi
    /// </summary>
    public sealed class BrowserUpProxyApiTests : ApiTestsBase
    {
        private readonly IBrowserUpProxyApi _instance;

        public BrowserUpProxyApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IBrowserUpProxyApi>();
        }

        /// <summary>
        /// Test AddError
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddErrorAsyncTest()
        {
            Error error = default!;
            await _instance.AddErrorAsync(error);
        }

        /// <summary>
        /// Test AddMetric
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task AddMetricAsyncTest()
        {
            Metric metric = default!;
            await _instance.AddMetricAsync(metric);
        }

        /// <summary>
        /// Test GetHarLog
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetHarLogAsyncTest()
        {
            var response = await _instance.GetHarLogAsync();
            var model = response.Ok();
            Assert.IsType<Har>(model);
        }

        /// <summary>
        /// Test Healthcheck
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HealthcheckAsyncTest()
        {
            await _instance.HealthcheckAsync();
        }

        /// <summary>
        /// Test NewPage
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task NewPageAsyncTest()
        {
            string title = default!;
            var response = await _instance.NewPageAsync(title);
            var model = response.Ok();
            Assert.IsType<Har>(model);
        }

        /// <summary>
        /// Test ResetHarLog
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task ResetHarLogAsyncTest()
        {
            var response = await _instance.ResetHarLogAsync();
            var model = response.Ok();
            Assert.IsType<Har>(model);
        }

        /// <summary>
        /// Test VerifyNotPresent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyNotPresentAsyncTest()
        {
            string name = default!;
            MatchCriteria matchCriteria = default!;
            var response = await _instance.VerifyNotPresentAsync(name, matchCriteria);
            var model = response.Ok();
            Assert.IsType<VerifyResult>(model);
        }

        /// <summary>
        /// Test VerifyPresent
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifyPresentAsyncTest()
        {
            string name = default!;
            MatchCriteria matchCriteria = default!;
            var response = await _instance.VerifyPresentAsync(name, matchCriteria);
            var model = response.Ok();
            Assert.IsType<VerifyResult>(model);
        }

        /// <summary>
        /// Test VerifySLA
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifySLAAsyncTest()
        {
            int time = default!;
            string name = default!;
            MatchCriteria matchCriteria = default!;
            var response = await _instance.VerifySLAAsync(time, name, matchCriteria);
            var model = response.Ok();
            Assert.IsType<VerifyResult>(model);
        }

        /// <summary>
        /// Test VerifySize
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task VerifySizeAsyncTest()
        {
            int size = default!;
            string name = default!;
            MatchCriteria matchCriteria = default!;
            var response = await _instance.VerifySizeAsync(size, name, matchCriteria);
            var model = response.Ok();
            Assert.IsType<VerifyResult>(model);
        }
    }
}
