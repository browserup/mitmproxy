=begin
#BrowserUp MitmProxy

#___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

The version of the OpenAPI document: 1.25

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module BrowserupMitmProxy
  # A set of criteria for filtering HTTP Requests and Responses.                          Criteria are AND based, and use python regular expressions for string comparison
  class MatchCriteria
    # Request URL regexp to match
    attr_accessor :url

    # current|all
    attr_accessor :page

    # HTTP Status code to match.
    attr_accessor :status

    # Body content regexp content to match
    attr_accessor :content

    # Content type
    attr_accessor :content_type

    # Websocket message text to match
    attr_accessor :websocket_message

    attr_accessor :request_header

    attr_accessor :request_cookie

    attr_accessor :response_header

    attr_accessor :response_cookie

    # Is valid JSON
    attr_accessor :json_valid

    # Has JSON path
    attr_accessor :json_path

    # Validates against passed JSON schema
    attr_accessor :json_schema

    # If the proxy has NO traffic at all, return error
    attr_accessor :error_if_no_traffic

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'url' => :'url',
        :'page' => :'page',
        :'status' => :'status',
        :'content' => :'content',
        :'content_type' => :'content_type',
        :'websocket_message' => :'websocket_message',
        :'request_header' => :'request_header',
        :'request_cookie' => :'request_cookie',
        :'response_header' => :'response_header',
        :'response_cookie' => :'response_cookie',
        :'json_valid' => :'json_valid',
        :'json_path' => :'json_path',
        :'json_schema' => :'json_schema',
        :'error_if_no_traffic' => :'error_if_no_traffic'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'url' => :'String',
        :'page' => :'String',
        :'status' => :'String',
        :'content' => :'String',
        :'content_type' => :'String',
        :'websocket_message' => :'String',
        :'request_header' => :'NameValuePair',
        :'request_cookie' => :'NameValuePair',
        :'response_header' => :'NameValuePair',
        :'response_cookie' => :'NameValuePair',
        :'json_valid' => :'Boolean',
        :'json_path' => :'String',
        :'json_schema' => :'String',
        :'error_if_no_traffic' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BrowserupMitmProxy::MatchCriteria` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BrowserupMitmProxy::MatchCriteria`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'page')
        self.page = attributes[:'page']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      end

      if attributes.key?(:'websocket_message')
        self.websocket_message = attributes[:'websocket_message']
      end

      if attributes.key?(:'request_header')
        self.request_header = attributes[:'request_header']
      end

      if attributes.key?(:'request_cookie')
        self.request_cookie = attributes[:'request_cookie']
      end

      if attributes.key?(:'response_header')
        self.response_header = attributes[:'response_header']
      end

      if attributes.key?(:'response_cookie')
        self.response_cookie = attributes[:'response_cookie']
      end

      if attributes.key?(:'json_valid')
        self.json_valid = attributes[:'json_valid']
      end

      if attributes.key?(:'json_path')
        self.json_path = attributes[:'json_path']
      end

      if attributes.key?(:'json_schema')
        self.json_schema = attributes[:'json_schema']
      end

      if attributes.key?(:'error_if_no_traffic')
        self.error_if_no_traffic = attributes[:'error_if_no_traffic']
      else
        self.error_if_no_traffic = true
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          url == o.url &&
          page == o.page &&
          status == o.status &&
          content == o.content &&
          content_type == o.content_type &&
          websocket_message == o.websocket_message &&
          request_header == o.request_header &&
          request_cookie == o.request_cookie &&
          response_header == o.response_header &&
          response_cookie == o.response_cookie &&
          json_valid == o.json_valid &&
          json_path == o.json_path &&
          json_schema == o.json_schema &&
          error_if_no_traffic == o.error_if_no_traffic
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [url, page, status, content, content_type, websocket_message, request_header, request_cookie, response_header, response_cookie, json_valid, json_path, json_schema, error_if_no_traffic].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BrowserupMitmProxy.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
