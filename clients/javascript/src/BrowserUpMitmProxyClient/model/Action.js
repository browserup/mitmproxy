/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Action model module.
 * @module BrowserUpMitmProxyClient/model/Action
 * @version 1.27.0
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * @alias module:BrowserUpMitmProxyClient/model/Action
     */
    constructor() { 
        
        Action.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/Action} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('className')) {
                obj['className'] = ApiClient.convertToType(data['className'], 'String');
            }
            if (data.hasOwnProperty('tagName')) {
                obj['tagName'] = ApiClient.convertToType(data['tagName'], 'String');
            }
            if (data.hasOwnProperty('xpath')) {
                obj['xpath'] = ApiClient.convertToType(data['xpath'], 'String');
            }
            if (data.hasOwnProperty('dataAttributes')) {
                obj['dataAttributes'] = ApiClient.convertToType(data['dataAttributes'], 'String');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['className'] && !(typeof data['className'] === 'string' || data['className'] instanceof String)) {
            throw new Error("Expected the field `className` to be a primitive type in the JSON string but got " + data['className']);
        }
        // ensure the json data is a string
        if (data['tagName'] && !(typeof data['tagName'] === 'string' || data['tagName'] instanceof String)) {
            throw new Error("Expected the field `tagName` to be a primitive type in the JSON string but got " + data['tagName']);
        }
        // ensure the json data is a string
        if (data['xpath'] && !(typeof data['xpath'] === 'string' || data['xpath'] instanceof String)) {
            throw new Error("Expected the field `xpath` to be a primitive type in the JSON string but got " + data['xpath']);
        }
        // ensure the json data is a string
        if (data['dataAttributes'] && !(typeof data['dataAttributes'] === 'string' || data['dataAttributes'] instanceof String)) {
            throw new Error("Expected the field `dataAttributes` to be a primitive type in the JSON string but got " + data['dataAttributes']);
        }
        // ensure the json data is a string
        if (data['formName'] && !(typeof data['formName'] === 'string' || data['formName'] instanceof String)) {
            throw new Error("Expected the field `formName` to be a primitive type in the JSON string but got " + data['formName']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
Action.prototype['name'] = undefined;

/**
 * @member {String} id
 */
Action.prototype['id'] = undefined;

/**
 * @member {String} className
 */
Action.prototype['className'] = undefined;

/**
 * @member {String} tagName
 */
Action.prototype['tagName'] = undefined;

/**
 * @member {String} xpath
 */
Action.prototype['xpath'] = undefined;

/**
 * @member {String} dataAttributes
 */
Action.prototype['dataAttributes'] = undefined;

/**
 * @member {String} formName
 */
Action.prototype['formName'] = undefined;

/**
 * @member {String} content
 */
Action.prototype['content'] = undefined;






export default Action;

