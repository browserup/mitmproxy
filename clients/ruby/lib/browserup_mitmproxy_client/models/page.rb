=begin
#BrowserUp MitmProxy

#___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

The version of the OpenAPI document: 1.25

Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module BrowserupMitmProxy
  class Page
    attr_accessor :started_date_time

    attr_accessor :id

    attr_accessor :title

    attr_accessor :_verifications

    attr_accessor :_metrics

    attr_accessor :_errors

    # W3C Trace Context span ID for this page
    attr_accessor :_span_id

    # W3C Trace Context parent span ID (typically the HAR log span ID)
    attr_accessor :_parent_id

    attr_accessor :page_timings

    attr_accessor :comment

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'started_date_time' => :'startedDateTime',
        :'id' => :'id',
        :'title' => :'title',
        :'_verifications' => :'_verifications',
        :'_metrics' => :'_metrics',
        :'_errors' => :'_errors',
        :'_span_id' => :'_span_id',
        :'_parent_id' => :'_parent_id',
        :'page_timings' => :'pageTimings',
        :'comment' => :'comment'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'started_date_time' => :'Time',
        :'id' => :'String',
        :'title' => :'String',
        :'_verifications' => :'Array<VerifyResult>',
        :'_metrics' => :'Array<Metric>',
        :'_errors' => :'Array<Error>',
        :'_span_id' => :'String',
        :'_parent_id' => :'String',
        :'page_timings' => :'PageTimings',
        :'comment' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `BrowserupMitmProxy::Page` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `BrowserupMitmProxy::Page`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'started_date_time')
        self.started_date_time = attributes[:'started_date_time']
      else
        self.started_date_time = nil
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      else
        self.title = nil
      end

      if attributes.key?(:'_verifications')
        if (value = attributes[:'_verifications']).is_a?(Array)
          self._verifications = value
        end
      end

      if attributes.key?(:'_metrics')
        if (value = attributes[:'_metrics']).is_a?(Array)
          self._metrics = value
        end
      end

      if attributes.key?(:'_errors')
        if (value = attributes[:'_errors']).is_a?(Array)
          self._errors = value
        end
      end

      if attributes.key?(:'_span_id')
        self._span_id = attributes[:'_span_id']
      end

      if attributes.key?(:'_parent_id')
        self._parent_id = attributes[:'_parent_id']
      end

      if attributes.key?(:'page_timings')
        self.page_timings = attributes[:'page_timings']
      else
        self.page_timings = nil
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @started_date_time.nil?
        invalid_properties.push('invalid value for "started_date_time", started_date_time cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      if @page_timings.nil?
        invalid_properties.push('invalid value for "page_timings", page_timings cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @started_date_time.nil?
      return false if @id.nil?
      return false if @title.nil?
      return false if @page_timings.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] started_date_time Value to be assigned
    def started_date_time=(started_date_time)
      if started_date_time.nil?
        fail ArgumentError, 'started_date_time cannot be nil'
      end

      @started_date_time = started_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] title Value to be assigned
    def title=(title)
      if title.nil?
        fail ArgumentError, 'title cannot be nil'
      end

      @title = title
    end

    # Custom attribute writer method with validation
    # @param [Object] page_timings Value to be assigned
    def page_timings=(page_timings)
      if page_timings.nil?
        fail ArgumentError, 'page_timings cannot be nil'
      end

      @page_timings = page_timings
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          started_date_time == o.started_date_time &&
          id == o.id &&
          title == o.title &&
          _verifications == o._verifications &&
          _metrics == o._metrics &&
          _errors == o._errors &&
          _span_id == o._span_id &&
          _parent_id == o._parent_id &&
          page_timings == o.page_timings &&
          comment == o.comment
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [started_date_time, id, title, _verifications, _metrics, _errors, _span_id, _parent_id, page_timings, comment].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = BrowserupMitmProxy.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
