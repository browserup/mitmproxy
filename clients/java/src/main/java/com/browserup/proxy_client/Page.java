/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;
import java.util.Objects;
import com.browserup.proxy_client.Error;
import com.browserup.proxy_client.Metric;
import com.browserup.proxy_client.PageTimings;
import com.browserup.proxy_client.VerifyResult;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * Page
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.12.0")
public class Page {
  public static final String SERIALIZED_NAME_STARTED_DATE_TIME = "startedDateTime";
  @SerializedName(SERIALIZED_NAME_STARTED_DATE_TIME)
  @javax.annotation.Nonnull
  private OffsetDateTime startedDateTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private String id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  @javax.annotation.Nonnull
  private String title;

  public static final String SERIALIZED_NAME_VERIFICATIONS = "_verifications";
  @SerializedName(SERIALIZED_NAME_VERIFICATIONS)
  @javax.annotation.Nullable
  private List<VerifyResult> verifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "_metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  @javax.annotation.Nullable
  private List<Metric> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "_errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nullable
  private List<Error> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPAN_ID = "_span_id";
  @SerializedName(SERIALIZED_NAME_SPAN_ID)
  @javax.annotation.Nullable
  private String spanId;

  public static final String SERIALIZED_NAME_PARENT_ID = "_parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  @javax.annotation.Nullable
  private String parentId;

  public static final String SERIALIZED_NAME_PAGE_TIMINGS = "pageTimings";
  @SerializedName(SERIALIZED_NAME_PAGE_TIMINGS)
  @javax.annotation.Nonnull
  private PageTimings pageTimings;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  @javax.annotation.Nullable
  private String comment;

  public Page() {
  }

  public Page startedDateTime(@javax.annotation.Nonnull OffsetDateTime startedDateTime) {
    this.startedDateTime = startedDateTime;
    return this;
  }

  /**
   * Get startedDateTime
   * @return startedDateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartedDateTime() {
    return startedDateTime;
  }

  public void setStartedDateTime(@javax.annotation.Nonnull OffsetDateTime startedDateTime) {
    this.startedDateTime = startedDateTime;
  }


  public Page id(@javax.annotation.Nonnull String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull String id) {
    this.id = id;
  }


  public Page title(@javax.annotation.Nonnull String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(@javax.annotation.Nonnull String title) {
    this.title = title;
  }


  public Page verifications(@javax.annotation.Nullable List<VerifyResult> verifications) {
    this.verifications = verifications;
    return this;
  }

  public Page addVerificationsItem(VerifyResult verificationsItem) {
    if (this.verifications == null) {
      this.verifications = new ArrayList<>();
    }
    this.verifications.add(verificationsItem);
    return this;
  }

  /**
   * Get verifications
   * @return verifications
   */
  @javax.annotation.Nullable
  public List<VerifyResult> getVerifications() {
    return verifications;
  }

  public void setVerifications(@javax.annotation.Nullable List<VerifyResult> verifications) {
    this.verifications = verifications;
  }


  public Page metrics(@javax.annotation.Nullable List<Metric> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Page addMetricsItem(Metric metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<Metric> getMetrics() {
    return metrics;
  }

  public void setMetrics(@javax.annotation.Nullable List<Metric> metrics) {
    this.metrics = metrics;
  }


  public Page errors(@javax.annotation.Nullable List<Error> errors) {
    this.errors = errors;
    return this;
  }

  public Page addErrorsItem(Error errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public List<Error> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nullable List<Error> errors) {
    this.errors = errors;
  }


  public Page spanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * W3C Trace Context span ID for this page
   * @return spanId
   */
  @javax.annotation.Nullable
  public String getSpanId() {
    return spanId;
  }

  public void setSpanId(@javax.annotation.Nullable String spanId) {
    this.spanId = spanId;
  }


  public Page parentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * W3C Trace Context parent span ID (typically the HAR log span ID)
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(@javax.annotation.Nullable String parentId) {
    this.parentId = parentId;
  }


  public Page pageTimings(@javax.annotation.Nonnull PageTimings pageTimings) {
    this.pageTimings = pageTimings;
    return this;
  }

  /**
   * Get pageTimings
   * @return pageTimings
   */
  @javax.annotation.Nonnull
  public PageTimings getPageTimings() {
    return pageTimings;
  }

  public void setPageTimings(@javax.annotation.Nonnull PageTimings pageTimings) {
    this.pageTimings = pageTimings;
  }


  public Page comment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
    return this;
  }

  /**
   * Get comment
   * @return comment
   */
  @javax.annotation.Nullable
  public String getComment() {
    return comment;
  }

  public void setComment(@javax.annotation.Nullable String comment) {
    this.comment = comment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Page instance itself
   */
  public Page putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    return EqualsBuilder.reflectionEquals(this, o, false, null, true);
  }

  @Override
  public int hashCode() {
    return HashCodeBuilder.reflectionHashCode(this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Page {\n");
    sb.append("    startedDateTime: ").append(toIndentedString(startedDateTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    verifications: ").append(toIndentedString(verifications)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    pageTimings: ").append(toIndentedString(pageTimings)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startedDateTime");
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("_verifications");
    openapiFields.add("_metrics");
    openapiFields.add("_errors");
    openapiFields.add("_span_id");
    openapiFields.add("_parent_id");
    openapiFields.add("pageTimings");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startedDateTime");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("pageTimings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Page
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Page.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Page is not found in the empty JSON string", Page.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Page.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("_verifications") != null && !jsonObj.get("_verifications").isJsonNull()) {
        JsonArray jsonArrayverifications = jsonObj.getAsJsonArray("_verifications");
        if (jsonArrayverifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_verifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_verifications` to be an array in the JSON string but got `%s`", jsonObj.get("_verifications").toString()));
          }

          // validate the optional field `_verifications` (array)
          for (int i = 0; i < jsonArrayverifications.size(); i++) {
            VerifyResult.validateJsonElement(jsonArrayverifications.get(i));
          };
        }
      }
      if (jsonObj.get("_metrics") != null && !jsonObj.get("_metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("_metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_metrics` to be an array in the JSON string but got `%s`", jsonObj.get("_metrics").toString()));
          }

          // validate the optional field `_metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            Metric.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("_errors") != null && !jsonObj.get("_errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("_errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("_errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `_errors` to be an array in the JSON string but got `%s`", jsonObj.get("_errors").toString()));
          }

          // validate the optional field `_errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            Error.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("_span_id") != null && !jsonObj.get("_span_id").isJsonNull()) && !jsonObj.get("_span_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_span_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_span_id").toString()));
      }
      if ((jsonObj.get("_parent_id") != null && !jsonObj.get("_parent_id").isJsonNull()) && !jsonObj.get("_parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_parent_id").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Page.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Page' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Page> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Page.class));

       return (TypeAdapter<T>) new TypeAdapter<Page>() {
           @Override
           public void write(JsonWriter out, Page value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Page read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Page instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Page given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Page
   * @throws IOException if the JSON string is invalid with respect to Page
   */
  public static Page fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Page.class);
  }

  /**
   * Convert an instance of Page to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

