/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarLog
    /// </summary>
    [DataContract(Name = "Har_log")]
    public partial class HarLog : IEquatable<HarLog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarLog" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HarLog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HarLog" /> class.
        /// </summary>
        /// <param name="version">version (required).</param>
        /// <param name="creator">creator (required).</param>
        /// <param name="browser">browser.</param>
        /// <param name="pages">pages (required).</param>
        /// <param name="entries">entries (required).</param>
        /// <param name="comment">comment.</param>
        public HarLog(string version = default(string), HarLogCreator creator = default(HarLogCreator), HarLogCreator browser = default(HarLogCreator), List<Page> pages = default(List<Page>), List<HarEntry> entries = default(List<HarEntry>), string comment = default(string))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new ArgumentNullException("version is a required property for HarLog and cannot be null");
            }
            this._Version = version;
            // to ensure "creator" is required (not null)
            if (creator == null)
            {
                throw new ArgumentNullException("creator is a required property for HarLog and cannot be null");
            }
            this.Creator = creator;
            // to ensure "pages" is required (not null)
            if (pages == null)
            {
                throw new ArgumentNullException("pages is a required property for HarLog and cannot be null");
            }
            this.Pages = pages;
            // to ensure "entries" is required (not null)
            if (entries == null)
            {
                throw new ArgumentNullException("entries is a required property for HarLog and cannot be null");
            }
            this.Entries = entries;
            this.Browser = browser;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets _Version
        /// </summary>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string _Version { get; set; }

        /// <summary>
        /// Gets or Sets Creator
        /// </summary>
        [DataMember(Name = "creator", IsRequired = true, EmitDefaultValue = true)]
        public HarLogCreator Creator { get; set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", EmitDefaultValue = false)]
        public HarLogCreator Browser { get; set; }

        /// <summary>
        /// Gets or Sets Pages
        /// </summary>
        [DataMember(Name = "pages", IsRequired = true, EmitDefaultValue = true)]
        public List<Page> Pages { get; set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name = "entries", IsRequired = true, EmitDefaultValue = true)]
        public List<HarEntry> Entries { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarLog {\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("  Creator: ").Append(Creator).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HarLog);
        }

        /// <summary>
        /// Returns true if HarLog instances are equal
        /// </summary>
        /// <param name="input">Instance of HarLog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HarLog input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                ) && 
                (
                    this.Creator == input.Creator ||
                    (this.Creator != null &&
                    this.Creator.Equals(input.Creator))
                ) && 
                (
                    this.Browser == input.Browser ||
                    (this.Browser != null &&
                    this.Browser.Equals(input.Browser))
                ) && 
                (
                    this.Pages == input.Pages ||
                    this.Pages != null &&
                    input.Pages != null &&
                    this.Pages.SequenceEqual(input.Pages)
                ) && 
                (
                    this.Entries == input.Entries ||
                    this.Entries != null &&
                    input.Entries != null &&
                    this.Entries.SequenceEqual(input.Entries)
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Version != null)
                {
                    hashCode = (hashCode * 59) + this._Version.GetHashCode();
                }
                if (this.Creator != null)
                {
                    hashCode = (hashCode * 59) + this.Creator.GetHashCode();
                }
                if (this.Browser != null)
                {
                    hashCode = (hashCode * 59) + this.Browser.GetHashCode();
                }
                if (this.Pages != null)
                {
                    hashCode = (hashCode * 59) + this.Pages.GetHashCode();
                }
                if (this.Entries != null)
                {
                    hashCode = (hashCode * 59) + this.Entries.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
