/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"fmt"
)

// checks if the HarEntryResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryResponse{}

// HarEntryResponse struct for HarEntryResponse
type HarEntryResponse struct {
	Status int32 `json:"status"`
	StatusText string `json:"statusText"`
	HttpVersion string `json:"httpVersion"`
	Cookies []HarEntryRequestCookiesInner `json:"cookies"`
	Headers []Header `json:"headers"`
	Content HarEntryResponseContent `json:"content"`
	RedirectURL string `json:"redirectURL"`
	HeadersSize int32 `json:"headersSize"`
	BodySize int32 `json:"bodySize"`
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HarEntryResponse HarEntryResponse

// NewHarEntryResponse instantiates a new HarEntryResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryResponse(status int32, statusText string, httpVersion string, cookies []HarEntryRequestCookiesInner, headers []Header, content HarEntryResponseContent, redirectURL string, headersSize int32, bodySize int32) *HarEntryResponse {
	this := HarEntryResponse{}
	this.Status = status
	this.StatusText = statusText
	this.HttpVersion = httpVersion
	this.Cookies = cookies
	this.Headers = headers
	this.Content = content
	this.RedirectURL = redirectURL
	this.HeadersSize = headersSize
	this.BodySize = bodySize
	return &this
}

// NewHarEntryResponseWithDefaults instantiates a new HarEntryResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryResponseWithDefaults() *HarEntryResponse {
	this := HarEntryResponse{}
	return &this
}

// GetStatus returns the Status field value
func (o *HarEntryResponse) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *HarEntryResponse) SetStatus(v int32) {
	o.Status = v
}

// GetStatusText returns the StatusText field value
func (o *HarEntryResponse) GetStatusText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StatusText
}

// GetStatusTextOk returns a tuple with the StatusText field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetStatusTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StatusText, true
}

// SetStatusText sets field value
func (o *HarEntryResponse) SetStatusText(v string) {
	o.StatusText = v
}

// GetHttpVersion returns the HttpVersion field value
func (o *HarEntryResponse) GetHttpVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpVersion
}

// GetHttpVersionOk returns a tuple with the HttpVersion field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetHttpVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpVersion, true
}

// SetHttpVersion sets field value
func (o *HarEntryResponse) SetHttpVersion(v string) {
	o.HttpVersion = v
}

// GetCookies returns the Cookies field value
func (o *HarEntryResponse) GetCookies() []HarEntryRequestCookiesInner {
	if o == nil {
		var ret []HarEntryRequestCookiesInner
		return ret
	}

	return o.Cookies
}

// GetCookiesOk returns a tuple with the Cookies field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetCookiesOk() ([]HarEntryRequestCookiesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookies, true
}

// SetCookies sets field value
func (o *HarEntryResponse) SetCookies(v []HarEntryRequestCookiesInner) {
	o.Cookies = v
}

// GetHeaders returns the Headers field value
func (o *HarEntryResponse) GetHeaders() []Header {
	if o == nil {
		var ret []Header
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetHeadersOk() ([]Header, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *HarEntryResponse) SetHeaders(v []Header) {
	o.Headers = v
}

// GetContent returns the Content field value
func (o *HarEntryResponse) GetContent() HarEntryResponseContent {
	if o == nil {
		var ret HarEntryResponseContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetContentOk() (*HarEntryResponseContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *HarEntryResponse) SetContent(v HarEntryResponseContent) {
	o.Content = v
}

// GetRedirectURL returns the RedirectURL field value
func (o *HarEntryResponse) GetRedirectURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RedirectURL
}

// GetRedirectURLOk returns a tuple with the RedirectURL field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetRedirectURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RedirectURL, true
}

// SetRedirectURL sets field value
func (o *HarEntryResponse) SetRedirectURL(v string) {
	o.RedirectURL = v
}

// GetHeadersSize returns the HeadersSize field value
func (o *HarEntryResponse) GetHeadersSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HeadersSize
}

// GetHeadersSizeOk returns a tuple with the HeadersSize field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetHeadersSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HeadersSize, true
}

// SetHeadersSize sets field value
func (o *HarEntryResponse) SetHeadersSize(v int32) {
	o.HeadersSize = v
}

// GetBodySize returns the BodySize field value
func (o *HarEntryResponse) GetBodySize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BodySize
}

// GetBodySizeOk returns a tuple with the BodySize field value
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetBodySizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BodySize, true
}

// SetBodySize sets field value
func (o *HarEntryResponse) SetBodySize(v int32) {
	o.BodySize = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryResponse) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryResponse) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryResponse) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryResponse) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["statusText"] = o.StatusText
	toSerialize["httpVersion"] = o.HttpVersion
	toSerialize["cookies"] = o.Cookies
	toSerialize["headers"] = o.Headers
	toSerialize["content"] = o.Content
	toSerialize["redirectURL"] = o.RedirectURL
	toSerialize["headersSize"] = o.HeadersSize
	toSerialize["bodySize"] = o.BodySize
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HarEntryResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"statusText",
		"httpVersion",
		"cookies",
		"headers",
		"content",
		"redirectURL",
		"headersSize",
		"bodySize",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntryResponse := _HarEntryResponse{}

	err = json.Unmarshal(data, &varHarEntryResponse)

	if err != nil {
		return err
	}

	*o = HarEntryResponse(varHarEntryResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "status")
		delete(additionalProperties, "statusText")
		delete(additionalProperties, "httpVersion")
		delete(additionalProperties, "cookies")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "content")
		delete(additionalProperties, "redirectURL")
		delete(additionalProperties, "headersSize")
		delete(additionalProperties, "bodySize")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHarEntryResponse struct {
	value *HarEntryResponse
	isSet bool
}

func (v NullableHarEntryResponse) Get() *HarEntryResponse {
	return v.value
}

func (v *NullableHarEntryResponse) Set(val *HarEntryResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryResponse(val *HarEntryResponse) *NullableHarEntryResponse {
	return &NullableHarEntryResponse{value: val, isSet: true}
}

func (v NullableHarEntryResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


