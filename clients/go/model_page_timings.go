/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"fmt"
)

// checks if the PageTimings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageTimings{}

// PageTimings struct for PageTimings
type PageTimings struct {
	OnContentLoad int64 `json:"onContentLoad"`
	OnLoad int64 `json:"onLoad"`
	Href *string `json:"_href,omitempty"`
	Dns *int64 `json:"_dns,omitempty"`
	Ssl *int64 `json:"_ssl,omitempty"`
	TimeToFirstByte *int64 `json:"_timeToFirstByte,omitempty"`
	CumulativeLayoutShift *float32 `json:"_cumulativeLayoutShift,omitempty"`
	LargestContentfulPaint *LargestContentfulPaint `json:"_largestContentfulPaint,omitempty"`
	FirstPaint *int64 `json:"_firstPaint,omitempty"`
	FirstInputDelay *float32 `json:"_firstInputDelay,omitempty"`
	DomInteractive *int64 `json:"_domInteractive,omitempty"`
	FirstContentfulPaint *int64 `json:"_firstContentfulPaint,omitempty"`
	Comment *string `json:"comment,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PageTimings PageTimings

// NewPageTimings instantiates a new PageTimings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageTimings(onContentLoad int64, onLoad int64) *PageTimings {
	this := PageTimings{}
	this.OnContentLoad = onContentLoad
	this.OnLoad = onLoad
	var href string = ""
	this.Href = &href
	var dns int64 = -1
	this.Dns = &dns
	var ssl int64 = -1
	this.Ssl = &ssl
	var timeToFirstByte int64 = -1
	this.TimeToFirstByte = &timeToFirstByte
	var cumulativeLayoutShift float32 = -1
	this.CumulativeLayoutShift = &cumulativeLayoutShift
	var firstPaint int64 = -1
	this.FirstPaint = &firstPaint
	var firstInputDelay float32 = -1
	this.FirstInputDelay = &firstInputDelay
	var domInteractive int64 = -1
	this.DomInteractive = &domInteractive
	var firstContentfulPaint int64 = -1
	this.FirstContentfulPaint = &firstContentfulPaint
	return &this
}

// NewPageTimingsWithDefaults instantiates a new PageTimings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageTimingsWithDefaults() *PageTimings {
	this := PageTimings{}
	var onContentLoad int64 = -1
	this.OnContentLoad = onContentLoad
	var onLoad int64 = -1
	this.OnLoad = onLoad
	var href string = ""
	this.Href = &href
	var dns int64 = -1
	this.Dns = &dns
	var ssl int64 = -1
	this.Ssl = &ssl
	var timeToFirstByte int64 = -1
	this.TimeToFirstByte = &timeToFirstByte
	var cumulativeLayoutShift float32 = -1
	this.CumulativeLayoutShift = &cumulativeLayoutShift
	var firstPaint int64 = -1
	this.FirstPaint = &firstPaint
	var firstInputDelay float32 = -1
	this.FirstInputDelay = &firstInputDelay
	var domInteractive int64 = -1
	this.DomInteractive = &domInteractive
	var firstContentfulPaint int64 = -1
	this.FirstContentfulPaint = &firstContentfulPaint
	return &this
}

// GetOnContentLoad returns the OnContentLoad field value
func (o *PageTimings) GetOnContentLoad() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OnContentLoad
}

// GetOnContentLoadOk returns a tuple with the OnContentLoad field value
// and a boolean to check if the value has been set.
func (o *PageTimings) GetOnContentLoadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnContentLoad, true
}

// SetOnContentLoad sets field value
func (o *PageTimings) SetOnContentLoad(v int64) {
	o.OnContentLoad = v
}

// GetOnLoad returns the OnLoad field value
func (o *PageTimings) GetOnLoad() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.OnLoad
}

// GetOnLoadOk returns a tuple with the OnLoad field value
// and a boolean to check if the value has been set.
func (o *PageTimings) GetOnLoadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OnLoad, true
}

// SetOnLoad sets field value
func (o *PageTimings) SetOnLoad(v int64) {
	o.OnLoad = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *PageTimings) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *PageTimings) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *PageTimings) SetHref(v string) {
	o.Href = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *PageTimings) GetDns() int64 {
	if o == nil || IsNil(o.Dns) {
		var ret int64
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetDnsOk() (*int64, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *PageTimings) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given int64 and assigns it to the Dns field.
func (o *PageTimings) SetDns(v int64) {
	o.Dns = &v
}

// GetSsl returns the Ssl field value if set, zero value otherwise.
func (o *PageTimings) GetSsl() int64 {
	if o == nil || IsNil(o.Ssl) {
		var ret int64
		return ret
	}
	return *o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetSslOk() (*int64, bool) {
	if o == nil || IsNil(o.Ssl) {
		return nil, false
	}
	return o.Ssl, true
}

// HasSsl returns a boolean if a field has been set.
func (o *PageTimings) HasSsl() bool {
	if o != nil && !IsNil(o.Ssl) {
		return true
	}

	return false
}

// SetSsl gets a reference to the given int64 and assigns it to the Ssl field.
func (o *PageTimings) SetSsl(v int64) {
	o.Ssl = &v
}

// GetTimeToFirstByte returns the TimeToFirstByte field value if set, zero value otherwise.
func (o *PageTimings) GetTimeToFirstByte() int64 {
	if o == nil || IsNil(o.TimeToFirstByte) {
		var ret int64
		return ret
	}
	return *o.TimeToFirstByte
}

// GetTimeToFirstByteOk returns a tuple with the TimeToFirstByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetTimeToFirstByteOk() (*int64, bool) {
	if o == nil || IsNil(o.TimeToFirstByte) {
		return nil, false
	}
	return o.TimeToFirstByte, true
}

// HasTimeToFirstByte returns a boolean if a field has been set.
func (o *PageTimings) HasTimeToFirstByte() bool {
	if o != nil && !IsNil(o.TimeToFirstByte) {
		return true
	}

	return false
}

// SetTimeToFirstByte gets a reference to the given int64 and assigns it to the TimeToFirstByte field.
func (o *PageTimings) SetTimeToFirstByte(v int64) {
	o.TimeToFirstByte = &v
}

// GetCumulativeLayoutShift returns the CumulativeLayoutShift field value if set, zero value otherwise.
func (o *PageTimings) GetCumulativeLayoutShift() float32 {
	if o == nil || IsNil(o.CumulativeLayoutShift) {
		var ret float32
		return ret
	}
	return *o.CumulativeLayoutShift
}

// GetCumulativeLayoutShiftOk returns a tuple with the CumulativeLayoutShift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetCumulativeLayoutShiftOk() (*float32, bool) {
	if o == nil || IsNil(o.CumulativeLayoutShift) {
		return nil, false
	}
	return o.CumulativeLayoutShift, true
}

// HasCumulativeLayoutShift returns a boolean if a field has been set.
func (o *PageTimings) HasCumulativeLayoutShift() bool {
	if o != nil && !IsNil(o.CumulativeLayoutShift) {
		return true
	}

	return false
}

// SetCumulativeLayoutShift gets a reference to the given float32 and assigns it to the CumulativeLayoutShift field.
func (o *PageTimings) SetCumulativeLayoutShift(v float32) {
	o.CumulativeLayoutShift = &v
}

// GetLargestContentfulPaint returns the LargestContentfulPaint field value if set, zero value otherwise.
func (o *PageTimings) GetLargestContentfulPaint() LargestContentfulPaint {
	if o == nil || IsNil(o.LargestContentfulPaint) {
		var ret LargestContentfulPaint
		return ret
	}
	return *o.LargestContentfulPaint
}

// GetLargestContentfulPaintOk returns a tuple with the LargestContentfulPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetLargestContentfulPaintOk() (*LargestContentfulPaint, bool) {
	if o == nil || IsNil(o.LargestContentfulPaint) {
		return nil, false
	}
	return o.LargestContentfulPaint, true
}

// HasLargestContentfulPaint returns a boolean if a field has been set.
func (o *PageTimings) HasLargestContentfulPaint() bool {
	if o != nil && !IsNil(o.LargestContentfulPaint) {
		return true
	}

	return false
}

// SetLargestContentfulPaint gets a reference to the given LargestContentfulPaint and assigns it to the LargestContentfulPaint field.
func (o *PageTimings) SetLargestContentfulPaint(v LargestContentfulPaint) {
	o.LargestContentfulPaint = &v
}

// GetFirstPaint returns the FirstPaint field value if set, zero value otherwise.
func (o *PageTimings) GetFirstPaint() int64 {
	if o == nil || IsNil(o.FirstPaint) {
		var ret int64
		return ret
	}
	return *o.FirstPaint
}

// GetFirstPaintOk returns a tuple with the FirstPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetFirstPaintOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstPaint) {
		return nil, false
	}
	return o.FirstPaint, true
}

// HasFirstPaint returns a boolean if a field has been set.
func (o *PageTimings) HasFirstPaint() bool {
	if o != nil && !IsNil(o.FirstPaint) {
		return true
	}

	return false
}

// SetFirstPaint gets a reference to the given int64 and assigns it to the FirstPaint field.
func (o *PageTimings) SetFirstPaint(v int64) {
	o.FirstPaint = &v
}

// GetFirstInputDelay returns the FirstInputDelay field value if set, zero value otherwise.
func (o *PageTimings) GetFirstInputDelay() float32 {
	if o == nil || IsNil(o.FirstInputDelay) {
		var ret float32
		return ret
	}
	return *o.FirstInputDelay
}

// GetFirstInputDelayOk returns a tuple with the FirstInputDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetFirstInputDelayOk() (*float32, bool) {
	if o == nil || IsNil(o.FirstInputDelay) {
		return nil, false
	}
	return o.FirstInputDelay, true
}

// HasFirstInputDelay returns a boolean if a field has been set.
func (o *PageTimings) HasFirstInputDelay() bool {
	if o != nil && !IsNil(o.FirstInputDelay) {
		return true
	}

	return false
}

// SetFirstInputDelay gets a reference to the given float32 and assigns it to the FirstInputDelay field.
func (o *PageTimings) SetFirstInputDelay(v float32) {
	o.FirstInputDelay = &v
}

// GetDomInteractive returns the DomInteractive field value if set, zero value otherwise.
func (o *PageTimings) GetDomInteractive() int64 {
	if o == nil || IsNil(o.DomInteractive) {
		var ret int64
		return ret
	}
	return *o.DomInteractive
}

// GetDomInteractiveOk returns a tuple with the DomInteractive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetDomInteractiveOk() (*int64, bool) {
	if o == nil || IsNil(o.DomInteractive) {
		return nil, false
	}
	return o.DomInteractive, true
}

// HasDomInteractive returns a boolean if a field has been set.
func (o *PageTimings) HasDomInteractive() bool {
	if o != nil && !IsNil(o.DomInteractive) {
		return true
	}

	return false
}

// SetDomInteractive gets a reference to the given int64 and assigns it to the DomInteractive field.
func (o *PageTimings) SetDomInteractive(v int64) {
	o.DomInteractive = &v
}

// GetFirstContentfulPaint returns the FirstContentfulPaint field value if set, zero value otherwise.
func (o *PageTimings) GetFirstContentfulPaint() int64 {
	if o == nil || IsNil(o.FirstContentfulPaint) {
		var ret int64
		return ret
	}
	return *o.FirstContentfulPaint
}

// GetFirstContentfulPaintOk returns a tuple with the FirstContentfulPaint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetFirstContentfulPaintOk() (*int64, bool) {
	if o == nil || IsNil(o.FirstContentfulPaint) {
		return nil, false
	}
	return o.FirstContentfulPaint, true
}

// HasFirstContentfulPaint returns a boolean if a field has been set.
func (o *PageTimings) HasFirstContentfulPaint() bool {
	if o != nil && !IsNil(o.FirstContentfulPaint) {
		return true
	}

	return false
}

// SetFirstContentfulPaint gets a reference to the given int64 and assigns it to the FirstContentfulPaint field.
func (o *PageTimings) SetFirstContentfulPaint(v int64) {
	o.FirstContentfulPaint = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *PageTimings) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTimings) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *PageTimings) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *PageTimings) SetComment(v string) {
	o.Comment = &v
}

func (o PageTimings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageTimings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["onContentLoad"] = o.OnContentLoad
	toSerialize["onLoad"] = o.OnLoad
	if !IsNil(o.Href) {
		toSerialize["_href"] = o.Href
	}
	if !IsNil(o.Dns) {
		toSerialize["_dns"] = o.Dns
	}
	if !IsNil(o.Ssl) {
		toSerialize["_ssl"] = o.Ssl
	}
	if !IsNil(o.TimeToFirstByte) {
		toSerialize["_timeToFirstByte"] = o.TimeToFirstByte
	}
	if !IsNil(o.CumulativeLayoutShift) {
		toSerialize["_cumulativeLayoutShift"] = o.CumulativeLayoutShift
	}
	if !IsNil(o.LargestContentfulPaint) {
		toSerialize["_largestContentfulPaint"] = o.LargestContentfulPaint
	}
	if !IsNil(o.FirstPaint) {
		toSerialize["_firstPaint"] = o.FirstPaint
	}
	if !IsNil(o.FirstInputDelay) {
		toSerialize["_firstInputDelay"] = o.FirstInputDelay
	}
	if !IsNil(o.DomInteractive) {
		toSerialize["_domInteractive"] = o.DomInteractive
	}
	if !IsNil(o.FirstContentfulPaint) {
		toSerialize["_firstContentfulPaint"] = o.FirstContentfulPaint
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PageTimings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"onContentLoad",
		"onLoad",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageTimings := _PageTimings{}

	err = json.Unmarshal(data, &varPageTimings)

	if err != nil {
		return err
	}

	*o = PageTimings(varPageTimings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "onContentLoad")
		delete(additionalProperties, "onLoad")
		delete(additionalProperties, "_href")
		delete(additionalProperties, "_dns")
		delete(additionalProperties, "_ssl")
		delete(additionalProperties, "_timeToFirstByte")
		delete(additionalProperties, "_cumulativeLayoutShift")
		delete(additionalProperties, "_largestContentfulPaint")
		delete(additionalProperties, "_firstPaint")
		delete(additionalProperties, "_firstInputDelay")
		delete(additionalProperties, "_domInteractive")
		delete(additionalProperties, "_firstContentfulPaint")
		delete(additionalProperties, "comment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePageTimings struct {
	value *PageTimings
	isSet bool
}

func (v NullablePageTimings) Get() *PageTimings {
	return v.value
}

func (v *NullablePageTimings) Set(val *PageTimings) {
	v.value = val
	v.isSet = true
}

func (v NullablePageTimings) IsSet() bool {
	return v.isSet
}

func (v *NullablePageTimings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageTimings(val *PageTimings) *NullablePageTimings {
	return &NullablePageTimings{value: val, isSet: true}
}

func (v NullablePageTimings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageTimings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


