// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// Page
    /// </summary>
    public partial class Page : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Page" /> class.
        /// </summary>
        /// <param name="startedDateTime">startedDateTime</param>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="pageTimings">pageTimings</param>
        /// <param name="verifications">verifications</param>
        /// <param name="metrics">metrics</param>
        /// <param name="errors">errors</param>
        /// <param name="spanId">W3C Trace Context span ID for this page</param>
        /// <param name="parentId">W3C Trace Context parent span ID (typically the HAR log span ID)</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public Page(DateTime startedDateTime, string id, string title, PageTimings pageTimings, Option<List<VerifyResult>?> verifications = default, Option<List<Metric>?> metrics = default, Option<List<Error>?> errors = default, Option<string?> spanId = default, Option<string?> parentId = default, Option<string?> comment = default)
        {
            StartedDateTime = startedDateTime;
            Id = id;
            Title = title;
            PageTimings = pageTimings;
            VerificationsOption = verifications;
            MetricsOption = metrics;
            ErrorsOption = errors;
            SpanIdOption = spanId;
            ParentIdOption = parentId;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [JsonPropertyName("startedDateTime")]
        public DateTime StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets PageTimings
        /// </summary>
        [JsonPropertyName("pageTimings")]
        public PageTimings PageTimings { get; set; }

        /// <summary>
        /// Used to track the state of Verifications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<VerifyResult>?> VerificationsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Verifications
        /// </summary>
        [JsonPropertyName("_verifications")]
        public List<VerifyResult>? Verifications { get { return this.VerificationsOption; } set { this.VerificationsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metrics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Metric>?> MetricsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metrics
        /// </summary>
        [JsonPropertyName("_metrics")]
        public List<Metric>? Metrics { get { return this.MetricsOption; } set { this.MetricsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Errors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Error>?> ErrorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Errors
        /// </summary>
        [JsonPropertyName("_errors")]
        public List<Error>? Errors { get { return this.ErrorsOption; } set { this.ErrorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpanId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpanIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context span ID for this page
        /// </summary>
        /// <value>W3C Trace Context span ID for this page</value>
        [JsonPropertyName("_span_id")]
        public string? SpanId { get { return this.SpanIdOption; } set { this.SpanIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context parent span ID (typically the HAR log span ID)
        /// </summary>
        /// <value>W3C Trace Context parent span ID (typically the HAR log span ID)</value>
        [JsonPropertyName("_parent_id")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Page {\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  PageTimings: ").Append(PageTimings).Append("\n");
            sb.Append("  Verifications: ").Append(Verifications).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  SpanId: ").Append(SpanId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Page" />
    /// </summary>
    public class PageJsonConverter : JsonConverter<Page>
    {
        /// <summary>
        /// The format to use to serialize StartedDateTime
        /// </summary>
        public static string StartedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Page" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Page Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> startedDateTime = default;
            Option<string?> id = default;
            Option<string?> title = default;
            Option<PageTimings?> pageTimings = default;
            Option<List<VerifyResult>?> verifications = default;
            Option<List<Metric>?> metrics = default;
            Option<List<Error>?> errors = default;
            Option<string?> spanId = default;
            Option<string?> parentId = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "startedDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startedDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pageTimings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageTimings = new Option<PageTimings?>(JsonSerializer.Deserialize<PageTimings>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_verifications":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                verifications = new Option<List<VerifyResult>?>(JsonSerializer.Deserialize<List<VerifyResult>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_metrics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                metrics = new Option<List<Metric>?>(JsonSerializer.Deserialize<List<Metric>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_errors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                errors = new Option<List<Error>?>(JsonSerializer.Deserialize<List<Error>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_span_id":
                            spanId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!startedDateTime.IsSet)
                throw new ArgumentException("Property is required for class Page.", nameof(startedDateTime));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Page.", nameof(id));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Page.", nameof(title));

            if (!pageTimings.IsSet)
                throw new ArgumentException("Property is required for class Page.", nameof(pageTimings));

            if (startedDateTime.IsSet && startedDateTime.Value == null)
                throw new ArgumentNullException(nameof(startedDateTime), "Property is not nullable for class Page.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Page.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Page.");

            if (pageTimings.IsSet && pageTimings.Value == null)
                throw new ArgumentNullException(nameof(pageTimings), "Property is not nullable for class Page.");

            if (verifications.IsSet && verifications.Value == null)
                throw new ArgumentNullException(nameof(verifications), "Property is not nullable for class Page.");

            if (metrics.IsSet && metrics.Value == null)
                throw new ArgumentNullException(nameof(metrics), "Property is not nullable for class Page.");

            if (errors.IsSet && errors.Value == null)
                throw new ArgumentNullException(nameof(errors), "Property is not nullable for class Page.");

            if (spanId.IsSet && spanId.Value == null)
                throw new ArgumentNullException(nameof(spanId), "Property is not nullable for class Page.");

            if (parentId.IsSet && parentId.Value == null)
                throw new ArgumentNullException(nameof(parentId), "Property is not nullable for class Page.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class Page.");

            return new Page(startedDateTime.Value!.Value!, id.Value!, title.Value!, pageTimings.Value!, verifications, metrics, errors, spanId, parentId, comment);
        }

        /// <summary>
        /// Serializes a <see cref="Page" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="page"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Page page, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, page, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Page" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="page"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Page page, JsonSerializerOptions jsonSerializerOptions)
        {
            if (page.Id == null)
                throw new ArgumentNullException(nameof(page.Id), "Property is required for class Page.");

            if (page.Title == null)
                throw new ArgumentNullException(nameof(page.Title), "Property is required for class Page.");

            if (page.PageTimings == null)
                throw new ArgumentNullException(nameof(page.PageTimings), "Property is required for class Page.");

            if (page.VerificationsOption.IsSet && page.Verifications == null)
                throw new ArgumentNullException(nameof(page.Verifications), "Property is required for class Page.");

            if (page.MetricsOption.IsSet && page.Metrics == null)
                throw new ArgumentNullException(nameof(page.Metrics), "Property is required for class Page.");

            if (page.ErrorsOption.IsSet && page.Errors == null)
                throw new ArgumentNullException(nameof(page.Errors), "Property is required for class Page.");

            if (page.SpanIdOption.IsSet && page.SpanId == null)
                throw new ArgumentNullException(nameof(page.SpanId), "Property is required for class Page.");

            if (page.ParentIdOption.IsSet && page.ParentId == null)
                throw new ArgumentNullException(nameof(page.ParentId), "Property is required for class Page.");

            if (page.CommentOption.IsSet && page.Comment == null)
                throw new ArgumentNullException(nameof(page.Comment), "Property is required for class Page.");

            writer.WriteString("startedDateTime", page.StartedDateTime.ToString(StartedDateTimeFormat));

            writer.WriteString("id", page.Id);

            writer.WriteString("title", page.Title);

            writer.WritePropertyName("pageTimings");
            JsonSerializer.Serialize(writer, page.PageTimings, jsonSerializerOptions);
            if (page.VerificationsOption.IsSet)
            {
                writer.WritePropertyName("_verifications");
                JsonSerializer.Serialize(writer, page.Verifications, jsonSerializerOptions);
            }
            if (page.MetricsOption.IsSet)
            {
                writer.WritePropertyName("_metrics");
                JsonSerializer.Serialize(writer, page.Metrics, jsonSerializerOptions);
            }
            if (page.ErrorsOption.IsSet)
            {
                writer.WritePropertyName("_errors");
                JsonSerializer.Serialize(writer, page.Errors, jsonSerializerOptions);
            }
            if (page.SpanIdOption.IsSet)
                writer.WriteString("_span_id", page.SpanId);

            if (page.ParentIdOption.IsSet)
                writer.WriteString("_parent_id", page.ParentId);

            if (page.CommentOption.IsSet)
                writer.WriteString("comment", page.Comment);
        }
    }
}
