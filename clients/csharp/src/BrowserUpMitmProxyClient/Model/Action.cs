// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// Action
    /// </summary>
    public partial class Action : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Action" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="id">id</param>
        /// <param name="className">className</param>
        /// <param name="tagName">tagName</param>
        /// <param name="xpath">xpath</param>
        /// <param name="dataAttributes">dataAttributes</param>
        /// <param name="formName">formName</param>
        /// <param name="content">content</param>
        [JsonConstructor]
        public Action(Option<string?> name = default, Option<string?> id = default, Option<string?> className = default, Option<string?> tagName = default, Option<string?> xpath = default, Option<string?> dataAttributes = default, Option<string?> formName = default, Option<string?> content = default)
        {
            NameOption = name;
            IdOption = id;
            ClassNameOption = className;
            TagNameOption = tagName;
            XpathOption = xpath;
            DataAttributesOption = dataAttributes;
            FormNameOption = formName;
            ContentOption = content;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClassName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClassName
        /// </summary>
        [JsonPropertyName("className")]
        public string? ClassName { get { return this.ClassNameOption; } set { this.ClassNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of TagName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets TagName
        /// </summary>
        [JsonPropertyName("tagName")]
        public string? TagName { get { return this.TagNameOption; } set { this.TagNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Xpath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> XpathOption { get; private set; }

        /// <summary>
        /// Gets or Sets Xpath
        /// </summary>
        [JsonPropertyName("xpath")]
        public string? Xpath { get { return this.XpathOption; } set { this.XpathOption = new(value); } }

        /// <summary>
        /// Used to track the state of DataAttributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataAttributesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DataAttributes
        /// </summary>
        [JsonPropertyName("dataAttributes")]
        public string? DataAttributes { get { return this.DataAttributesOption; } set { this.DataAttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FormName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FormNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FormName
        /// </summary>
        [JsonPropertyName("formName")]
        public string? FormName { get { return this.FormNameOption; } set { this.FormNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Action {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClassName: ").Append(ClassName).Append("\n");
            sb.Append("  TagName: ").Append(TagName).Append("\n");
            sb.Append("  Xpath: ").Append(Xpath).Append("\n");
            sb.Append("  DataAttributes: ").Append(DataAttributes).Append("\n");
            sb.Append("  FormName: ").Append(FormName).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Action" />
    /// </summary>
    public class ActionJsonConverter : JsonConverter<Action>
    {
        /// <summary>
        /// Deserializes json to <see cref="Action" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Action Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> id = default;
            Option<string?> className = default;
            Option<string?> tagName = default;
            Option<string?> xpath = default;
            Option<string?> dataAttributes = default;
            Option<string?> formName = default;
            Option<string?> content = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "className":
                            className = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tagName":
                            tagName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "xpath":
                            xpath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dataAttributes":
                            dataAttributes = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "formName":
                            formName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Action.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Action.");

            if (className.IsSet && className.Value == null)
                throw new ArgumentNullException(nameof(className), "Property is not nullable for class Action.");

            if (tagName.IsSet && tagName.Value == null)
                throw new ArgumentNullException(nameof(tagName), "Property is not nullable for class Action.");

            if (xpath.IsSet && xpath.Value == null)
                throw new ArgumentNullException(nameof(xpath), "Property is not nullable for class Action.");

            if (dataAttributes.IsSet && dataAttributes.Value == null)
                throw new ArgumentNullException(nameof(dataAttributes), "Property is not nullable for class Action.");

            if (formName.IsSet && formName.Value == null)
                throw new ArgumentNullException(nameof(formName), "Property is not nullable for class Action.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class Action.");

            return new Action(name, id, className, tagName, xpath, dataAttributes, formName, content);
        }

        /// <summary>
        /// Serializes a <see cref="Action" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="action"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Action action, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, action, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Action" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="action"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Action action, JsonSerializerOptions jsonSerializerOptions)
        {
            if (action.NameOption.IsSet && action.Name == null)
                throw new ArgumentNullException(nameof(action.Name), "Property is required for class Action.");

            if (action.IdOption.IsSet && action.Id == null)
                throw new ArgumentNullException(nameof(action.Id), "Property is required for class Action.");

            if (action.ClassNameOption.IsSet && action.ClassName == null)
                throw new ArgumentNullException(nameof(action.ClassName), "Property is required for class Action.");

            if (action.TagNameOption.IsSet && action.TagName == null)
                throw new ArgumentNullException(nameof(action.TagName), "Property is required for class Action.");

            if (action.XpathOption.IsSet && action.Xpath == null)
                throw new ArgumentNullException(nameof(action.Xpath), "Property is required for class Action.");

            if (action.DataAttributesOption.IsSet && action.DataAttributes == null)
                throw new ArgumentNullException(nameof(action.DataAttributes), "Property is required for class Action.");

            if (action.FormNameOption.IsSet && action.FormName == null)
                throw new ArgumentNullException(nameof(action.FormName), "Property is required for class Action.");

            if (action.ContentOption.IsSet && action.Content == null)
                throw new ArgumentNullException(nameof(action.Content), "Property is required for class Action.");

            if (action.NameOption.IsSet)
                writer.WriteString("name", action.Name);

            if (action.IdOption.IsSet)
                writer.WriteString("id", action.Id);

            if (action.ClassNameOption.IsSet)
                writer.WriteString("className", action.ClassName);

            if (action.TagNameOption.IsSet)
                writer.WriteString("tagName", action.TagName);

            if (action.XpathOption.IsSet)
                writer.WriteString("xpath", action.Xpath);

            if (action.DataAttributesOption.IsSet)
                writer.WriteString("dataAttributes", action.DataAttributes);

            if (action.FormNameOption.IsSet)
                writer.WriteString("formName", action.FormName);

            if (action.ContentOption.IsSet)
                writer.WriteString("content", action.Content);
        }
    }
}
