/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BrowserUpMitmProxyClient.Client.OpenAPIDateConverter;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntry
    /// </summary>
    [DataContract(Name = "HarEntry")]
    public partial class HarEntry : IEquatable<HarEntry>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntry" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected HarEntry() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntry" /> class.
        /// </summary>
        /// <param name="pageref">pageref.</param>
        /// <param name="startedDateTime">startedDateTime (required).</param>
        /// <param name="time">time (required).</param>
        /// <param name="request">request (required).</param>
        /// <param name="response">response (required).</param>
        /// <param name="cache">cache (required).</param>
        /// <param name="timings">timings (required).</param>
        /// <param name="serverIPAddress">serverIPAddress.</param>
        /// <param name="webSocketMessages">webSocketMessages.</param>
        /// <param name="connection">connection.</param>
        /// <param name="comment">comment.</param>
        public HarEntry(string pageref = default(string), DateTime startedDateTime = default(DateTime), long time = default(long), HarEntryRequest request = default(HarEntryRequest), HarEntryResponse response = default(HarEntryResponse), HarEntryCache cache = default(HarEntryCache), HarEntryTimings timings = default(HarEntryTimings), string serverIPAddress = default(string), List<WebSocketMessage> webSocketMessages = default(List<WebSocketMessage>), string connection = default(string), string comment = default(string))
        {
            this.StartedDateTime = startedDateTime;
            this.Time = time;
            // to ensure "request" is required (not null)
            if (request == null)
            {
                throw new ArgumentNullException("request is a required property for HarEntry and cannot be null");
            }
            this.Request = request;
            // to ensure "response" is required (not null)
            if (response == null)
            {
                throw new ArgumentNullException("response is a required property for HarEntry and cannot be null");
            }
            this.Response = response;
            // to ensure "cache" is required (not null)
            if (cache == null)
            {
                throw new ArgumentNullException("cache is a required property for HarEntry and cannot be null");
            }
            this.Cache = cache;
            // to ensure "timings" is required (not null)
            if (timings == null)
            {
                throw new ArgumentNullException("timings is a required property for HarEntry and cannot be null");
            }
            this.Timings = timings;
            this.Pageref = pageref;
            this.ServerIPAddress = serverIPAddress;
            this.WebSocketMessages = webSocketMessages;
            this.Connection = connection;
            this.Comment = comment;
        }

        /// <summary>
        /// Gets or Sets Pageref
        /// </summary>
        [DataMember(Name = "pageref", EmitDefaultValue = false)]
        public string Pageref { get; set; }

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [DataMember(Name = "startedDateTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [DataMember(Name = "time", IsRequired = true, EmitDefaultValue = true)]
        public long Time { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [DataMember(Name = "request", IsRequired = true, EmitDefaultValue = true)]
        public HarEntryRequest Request { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name = "response", IsRequired = true, EmitDefaultValue = true)]
        public HarEntryResponse Response { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [DataMember(Name = "cache", IsRequired = true, EmitDefaultValue = true)]
        public HarEntryCache Cache { get; set; }

        /// <summary>
        /// Gets or Sets Timings
        /// </summary>
        [DataMember(Name = "timings", IsRequired = true, EmitDefaultValue = true)]
        public HarEntryTimings Timings { get; set; }

        /// <summary>
        /// Gets or Sets ServerIPAddress
        /// </summary>
        [DataMember(Name = "serverIPAddress", EmitDefaultValue = false)]
        public string ServerIPAddress { get; set; }

        /// <summary>
        /// Gets or Sets WebSocketMessages
        /// </summary>
        [DataMember(Name = "_webSocketMessages", EmitDefaultValue = false)]
        public List<WebSocketMessage> WebSocketMessages { get; set; }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [DataMember(Name = "connection", EmitDefaultValue = false)]
        public string Connection { get; set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [DataMember(Name = "comment", EmitDefaultValue = false)]
        public string Comment { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntry {\n");
            sb.Append("  Pageref: ").Append(Pageref).Append("\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  Timings: ").Append(Timings).Append("\n");
            sb.Append("  ServerIPAddress: ").Append(ServerIPAddress).Append("\n");
            sb.Append("  WebSocketMessages: ").Append(WebSocketMessages).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HarEntry);
        }

        /// <summary>
        /// Returns true if HarEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of HarEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HarEntry input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Pageref == input.Pageref ||
                    (this.Pageref != null &&
                    this.Pageref.Equals(input.Pageref))
                ) && 
                (
                    this.StartedDateTime == input.StartedDateTime ||
                    (this.StartedDateTime != null &&
                    this.StartedDateTime.Equals(input.StartedDateTime))
                ) && 
                (
                    this.Time == input.Time ||
                    this.Time.Equals(input.Time)
                ) && 
                (
                    this.Request == input.Request ||
                    (this.Request != null &&
                    this.Request.Equals(input.Request))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.Cache == input.Cache ||
                    (this.Cache != null &&
                    this.Cache.Equals(input.Cache))
                ) && 
                (
                    this.Timings == input.Timings ||
                    (this.Timings != null &&
                    this.Timings.Equals(input.Timings))
                ) && 
                (
                    this.ServerIPAddress == input.ServerIPAddress ||
                    (this.ServerIPAddress != null &&
                    this.ServerIPAddress.Equals(input.ServerIPAddress))
                ) && 
                (
                    this.WebSocketMessages == input.WebSocketMessages ||
                    this.WebSocketMessages != null &&
                    input.WebSocketMessages != null &&
                    this.WebSocketMessages.SequenceEqual(input.WebSocketMessages)
                ) && 
                (
                    this.Connection == input.Connection ||
                    (this.Connection != null &&
                    this.Connection.Equals(input.Connection))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Pageref != null)
                {
                    hashCode = (hashCode * 59) + this.Pageref.GetHashCode();
                }
                if (this.StartedDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartedDateTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Time.GetHashCode();
                if (this.Request != null)
                {
                    hashCode = (hashCode * 59) + this.Request.GetHashCode();
                }
                if (this.Response != null)
                {
                    hashCode = (hashCode * 59) + this.Response.GetHashCode();
                }
                if (this.Cache != null)
                {
                    hashCode = (hashCode * 59) + this.Cache.GetHashCode();
                }
                if (this.Timings != null)
                {
                    hashCode = (hashCode * 59) + this.Timings.GetHashCode();
                }
                if (this.ServerIPAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ServerIPAddress.GetHashCode();
                }
                if (this.WebSocketMessages != null)
                {
                    hashCode = (hashCode * 59) + this.WebSocketMessages.GetHashCode();
                }
                if (this.Connection != null)
                {
                    hashCode = (hashCode * 59) + this.Connection.GetHashCode();
                }
                if (this.Comment != null)
                {
                    hashCode = (hashCode * 59) + this.Comment.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Time (long) minimum
            if (this.Time < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Time, must be a value greater than or equal to 0.", new [] { "Time" });
            }

            yield break;
        }
    }

}
