# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.27.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from BrowserUpMitmProxyClient.models.page import Page

class TestPage(unittest.TestCase):
    """Page unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Page:
        """Test Page
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Page`
        """
        model = Page()
        if include_optional:
            return Page(
                started_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                title = '',
                verifications = [
                    BrowserUpMitmProxyClient.models.verify_result.VerifyResult(
                        result = True, 
                        name = '', 
                        type = '', )
                    ],
                metrics = [
                    BrowserUpMitmProxyClient.models.metric.Metric(
                        name = '', 
                        value = 56, )
                    ],
                errors = [
                    BrowserUpMitmProxyClient.models.error.Error(
                        name = '', 
                        details = '', )
                    ],
                span_id = '',
                parent_id = '',
                page_timings = { },
                comment = ''
            )
        else:
            return Page(
                started_date_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                id = '',
                title = '',
                page_timings = { },
        )
        """

    def testPage(self):
        """Test Page"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
