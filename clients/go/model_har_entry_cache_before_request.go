/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarEntryCacheBeforeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryCacheBeforeRequest{}

// HarEntryCacheBeforeRequest struct for HarEntryCacheBeforeRequest
type HarEntryCacheBeforeRequest struct {
	Expires *string `json:"expires,omitempty"`
	LastAccess string `json:"lastAccess"`
	ETag string `json:"eTag"`
	HitCount int32 `json:"hitCount"`
	Comment *string `json:"comment,omitempty"`
}

type _HarEntryCacheBeforeRequest HarEntryCacheBeforeRequest

// NewHarEntryCacheBeforeRequest instantiates a new HarEntryCacheBeforeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryCacheBeforeRequest(lastAccess string, eTag string, hitCount int32) *HarEntryCacheBeforeRequest {
	this := HarEntryCacheBeforeRequest{}
	this.LastAccess = lastAccess
	this.ETag = eTag
	this.HitCount = hitCount
	return &this
}

// NewHarEntryCacheBeforeRequestWithDefaults instantiates a new HarEntryCacheBeforeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryCacheBeforeRequestWithDefaults() *HarEntryCacheBeforeRequest {
	this := HarEntryCacheBeforeRequest{}
	return &this
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *HarEntryCacheBeforeRequest) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryCacheBeforeRequest) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *HarEntryCacheBeforeRequest) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *HarEntryCacheBeforeRequest) SetExpires(v string) {
	o.Expires = &v
}

// GetLastAccess returns the LastAccess field value
func (o *HarEntryCacheBeforeRequest) GetLastAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastAccess
}

// GetLastAccessOk returns a tuple with the LastAccess field value
// and a boolean to check if the value has been set.
func (o *HarEntryCacheBeforeRequest) GetLastAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastAccess, true
}

// SetLastAccess sets field value
func (o *HarEntryCacheBeforeRequest) SetLastAccess(v string) {
	o.LastAccess = v
}

// GetETag returns the ETag field value
func (o *HarEntryCacheBeforeRequest) GetETag() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ETag
}

// GetETagOk returns a tuple with the ETag field value
// and a boolean to check if the value has been set.
func (o *HarEntryCacheBeforeRequest) GetETagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ETag, true
}

// SetETag sets field value
func (o *HarEntryCacheBeforeRequest) SetETag(v string) {
	o.ETag = v
}

// GetHitCount returns the HitCount field value
func (o *HarEntryCacheBeforeRequest) GetHitCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HitCount
}

// GetHitCountOk returns a tuple with the HitCount field value
// and a boolean to check if the value has been set.
func (o *HarEntryCacheBeforeRequest) GetHitCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HitCount, true
}

// SetHitCount sets field value
func (o *HarEntryCacheBeforeRequest) SetHitCount(v int32) {
	o.HitCount = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryCacheBeforeRequest) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryCacheBeforeRequest) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryCacheBeforeRequest) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryCacheBeforeRequest) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryCacheBeforeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryCacheBeforeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	toSerialize["lastAccess"] = o.LastAccess
	toSerialize["eTag"] = o.ETag
	toSerialize["hitCount"] = o.HitCount
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *HarEntryCacheBeforeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lastAccess",
		"eTag",
		"hitCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarEntryCacheBeforeRequest := _HarEntryCacheBeforeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarEntryCacheBeforeRequest)

	if err != nil {
		return err
	}

	*o = HarEntryCacheBeforeRequest(varHarEntryCacheBeforeRequest)

	return err
}

type NullableHarEntryCacheBeforeRequest struct {
	value *HarEntryCacheBeforeRequest
	isSet bool
}

func (v NullableHarEntryCacheBeforeRequest) Get() *HarEntryCacheBeforeRequest {
	return v.value
}

func (v *NullableHarEntryCacheBeforeRequest) Set(val *HarEntryCacheBeforeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryCacheBeforeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryCacheBeforeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryCacheBeforeRequest(val *HarEntryCacheBeforeRequest) *NullableHarEntryCacheBeforeRequest {
	return &NullableHarEntryCacheBeforeRequest{value: val, isSet: true}
}

func (v NullableHarEntryCacheBeforeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryCacheBeforeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


