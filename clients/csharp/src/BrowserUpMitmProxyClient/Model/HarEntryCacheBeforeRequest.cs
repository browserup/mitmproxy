// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryCacheBeforeRequest
    /// </summary>
    public partial class HarEntryCacheBeforeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryCacheBeforeRequest" /> class.
        /// </summary>
        /// <param name="lastAccess">lastAccess</param>
        /// <param name="eTag">eTag</param>
        /// <param name="hitCount">hitCount</param>
        /// <param name="expires">expires</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryCacheBeforeRequest(string lastAccess, string eTag, int hitCount, Option<string?> expires = default, Option<string?> comment = default)
        {
            LastAccess = lastAccess;
            ETag = eTag;
            HitCount = hitCount;
            ExpiresOption = expires;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets LastAccess
        /// </summary>
        [JsonPropertyName("lastAccess")]
        public string LastAccess { get; set; }

        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [JsonPropertyName("eTag")]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or Sets HitCount
        /// </summary>
        [JsonPropertyName("hitCount")]
        public int HitCount { get; set; }

        /// <summary>
        /// Used to track the state of Expires
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpiresOption { get; private set; }

        /// <summary>
        /// Gets or Sets Expires
        /// </summary>
        [JsonPropertyName("expires")]
        public string? Expires { get { return this.ExpiresOption; } set { this.ExpiresOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryCacheBeforeRequest {\n");
            sb.Append("  LastAccess: ").Append(LastAccess).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("  HitCount: ").Append(HitCount).Append("\n");
            sb.Append("  Expires: ").Append(Expires).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryCacheBeforeRequest" />
    /// </summary>
    public class HarEntryCacheBeforeRequestJsonConverter : JsonConverter<HarEntryCacheBeforeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryCacheBeforeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryCacheBeforeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> lastAccess = default;
            Option<string?> eTag = default;
            Option<int?> hitCount = default;
            Option<string?> expires = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "lastAccess":
                            lastAccess = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "eTag":
                            eTag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hitCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hitCount = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "expires":
                            expires = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!lastAccess.IsSet)
                throw new ArgumentException("Property is required for class HarEntryCacheBeforeRequest.", nameof(lastAccess));

            if (!eTag.IsSet)
                throw new ArgumentException("Property is required for class HarEntryCacheBeforeRequest.", nameof(eTag));

            if (!hitCount.IsSet)
                throw new ArgumentException("Property is required for class HarEntryCacheBeforeRequest.", nameof(hitCount));

            if (lastAccess.IsSet && lastAccess.Value == null)
                throw new ArgumentNullException(nameof(lastAccess), "Property is not nullable for class HarEntryCacheBeforeRequest.");

            if (eTag.IsSet && eTag.Value == null)
                throw new ArgumentNullException(nameof(eTag), "Property is not nullable for class HarEntryCacheBeforeRequest.");

            if (hitCount.IsSet && hitCount.Value == null)
                throw new ArgumentNullException(nameof(hitCount), "Property is not nullable for class HarEntryCacheBeforeRequest.");

            if (expires.IsSet && expires.Value == null)
                throw new ArgumentNullException(nameof(expires), "Property is not nullable for class HarEntryCacheBeforeRequest.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryCacheBeforeRequest.");

            return new HarEntryCacheBeforeRequest(lastAccess.Value!, eTag.Value!, hitCount.Value!.Value!, expires, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryCacheBeforeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryCacheBeforeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryCacheBeforeRequest harEntryCacheBeforeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryCacheBeforeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryCacheBeforeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryCacheBeforeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryCacheBeforeRequest harEntryCacheBeforeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryCacheBeforeRequest.LastAccess == null)
                throw new ArgumentNullException(nameof(harEntryCacheBeforeRequest.LastAccess), "Property is required for class HarEntryCacheBeforeRequest.");

            if (harEntryCacheBeforeRequest.ETag == null)
                throw new ArgumentNullException(nameof(harEntryCacheBeforeRequest.ETag), "Property is required for class HarEntryCacheBeforeRequest.");

            if (harEntryCacheBeforeRequest.ExpiresOption.IsSet && harEntryCacheBeforeRequest.Expires == null)
                throw new ArgumentNullException(nameof(harEntryCacheBeforeRequest.Expires), "Property is required for class HarEntryCacheBeforeRequest.");

            if (harEntryCacheBeforeRequest.CommentOption.IsSet && harEntryCacheBeforeRequest.Comment == null)
                throw new ArgumentNullException(nameof(harEntryCacheBeforeRequest.Comment), "Property is required for class HarEntryCacheBeforeRequest.");

            writer.WriteString("lastAccess", harEntryCacheBeforeRequest.LastAccess);

            writer.WriteString("eTag", harEntryCacheBeforeRequest.ETag);

            writer.WriteNumber("hitCount", harEntryCacheBeforeRequest.HitCount);

            if (harEntryCacheBeforeRequest.ExpiresOption.IsSet)
                writer.WriteString("expires", harEntryCacheBeforeRequest.Expires);

            if (harEntryCacheBeforeRequest.CommentOption.IsSet)
                writer.WriteString("comment", harEntryCacheBeforeRequest.Comment);
        }
    }
}
