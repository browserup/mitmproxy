/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.26.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarLogCreator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarLogCreator{}

// HarLogCreator struct for HarLogCreator
type HarLogCreator struct {
	Name string `json:"name"`
	Version string `json:"version"`
	Comment *string `json:"comment,omitempty"`
}

type _HarLogCreator HarLogCreator

// NewHarLogCreator instantiates a new HarLogCreator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarLogCreator(name string, version string) *HarLogCreator {
	this := HarLogCreator{}
	this.Name = name
	this.Version = version
	return &this
}

// NewHarLogCreatorWithDefaults instantiates a new HarLogCreator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarLogCreatorWithDefaults() *HarLogCreator {
	this := HarLogCreator{}
	return &this
}

// GetName returns the Name field value
func (o *HarLogCreator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *HarLogCreator) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *HarLogCreator) SetName(v string) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *HarLogCreator) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HarLogCreator) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HarLogCreator) SetVersion(v string) {
	o.Version = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarLogCreator) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarLogCreator) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarLogCreator) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarLogCreator) SetComment(v string) {
	o.Comment = &v
}

func (o HarLogCreator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarLogCreator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *HarLogCreator) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarLogCreator := _HarLogCreator{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarLogCreator)

	if err != nil {
		return err
	}

	*o = HarLogCreator(varHarLogCreator)

	return err
}

type NullableHarLogCreator struct {
	value *HarLogCreator
	isSet bool
}

func (v NullableHarLogCreator) Get() *HarLogCreator {
	return v.value
}

func (v *NullableHarLogCreator) Set(val *HarLogCreator) {
	v.value = val
	v.isSet = true
}

func (v NullableHarLogCreator) IsSet() bool {
	return v.isSet
}

func (v *NullableHarLogCreator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarLogCreator(val *HarLogCreator) *NullableHarLogCreator {
	return &NullableHarLogCreator{value: val, isSet: true}
}

func (v NullableHarLogCreator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarLogCreator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


