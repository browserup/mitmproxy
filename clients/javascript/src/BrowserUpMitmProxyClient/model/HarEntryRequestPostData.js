/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarEntryRequestPostDataParamsInner from './HarEntryRequestPostDataParamsInner';

/**
 * The HarEntryRequestPostData model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryRequestPostData
 * @version 1.27.0
 */
class HarEntryRequestPostData {
    /**
     * Constructs a new <code>HarEntryRequestPostData</code>.
     * Posted data info.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryRequestPostData
     * @param mimeType {String} 
     */
    constructor(mimeType) { 
        
        HarEntryRequestPostData.initialize(this, mimeType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mimeType) { 
        obj['mimeType'] = mimeType;
    }

    /**
     * Constructs a <code>HarEntryRequestPostData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryRequestPostData} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryRequestPostData} The populated <code>HarEntryRequestPostData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HarEntryRequestPostData();

            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('params')) {
                obj['params'] = ApiClient.convertToType(data['params'], [HarEntryRequestPostDataParamsInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HarEntryRequestPostData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HarEntryRequestPostData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HarEntryRequestPostData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        if (data['params']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['params'])) {
                throw new Error("Expected the field `params` to be an array in the JSON data but got " + data['params']);
            }
            // validate the optional field `params` (array)
            for (const item of data['params']) {
                HarEntryRequestPostDataParamsInner.validateJSON(item);
            };
        }

        return true;
    }


}

HarEntryRequestPostData.RequiredProperties = ["mimeType"];

/**
 * @member {String} mimeType
 */
HarEntryRequestPostData.prototype['mimeType'] = undefined;

/**
 * @member {String} text
 */
HarEntryRequestPostData.prototype['text'] = undefined;

/**
 * @member {Array.<module:BrowserUpMitmProxyClient/model/HarEntryRequestPostDataParamsInner>} params
 */
HarEntryRequestPostData.prototype['params'] = undefined;






export default HarEntryRequestPostData;

