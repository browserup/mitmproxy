/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"fmt"
)

// checks if the Har type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Har{}

// Har struct for Har
type Har struct {
	Log HarLog `json:"log"`
	AdditionalProperties map[string]interface{}
}

type _Har Har

// NewHar instantiates a new Har object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHar(log HarLog) *Har {
	this := Har{}
	this.Log = log
	return &this
}

// NewHarWithDefaults instantiates a new Har object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarWithDefaults() *Har {
	this := Har{}
	return &this
}

// GetLog returns the Log field value
func (o *Har) GetLog() HarLog {
	if o == nil {
		var ret HarLog
		return ret
	}

	return o.Log
}

// GetLogOk returns a tuple with the Log field value
// and a boolean to check if the value has been set.
func (o *Har) GetLogOk() (*HarLog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Log, true
}

// SetLog sets field value
func (o *Har) SetLog(v HarLog) {
	o.Log = v
}

func (o Har) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Har) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["log"] = o.Log

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Har) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"log",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHar := _Har{}

	err = json.Unmarshal(data, &varHar)

	if err != nil {
		return err
	}

	*o = Har(varHar)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "log")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHar struct {
	value *Har
	isSet bool
}

func (v NullableHar) Get() *Har {
	return v.value
}

func (v *NullableHar) Set(val *Har) {
	v.value = val
	v.isSet = true
}

func (v NullableHar) IsSet() bool {
	return v.isSet
}

func (v *NullableHar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHar(val *Har) *NullableHar {
	return &NullableHar{value: val, isSet: true}
}

func (v NullableHar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


