/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using BrowserUpMitmProxyClient.Client;
using BrowserUpMitmProxyClient.Api;
// uncomment below to import models
//using BrowserUpMitmProxyClient.Model;

namespace BrowserUpMitmProxyClient.Test.Api
{
    /// <summary>
    ///  Class for testing BrowserUpProxyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BrowserUpProxyApiTests : IDisposable
    {
        private BrowserUpProxyApi instance;

        public BrowserUpProxyApiTests()
        {
            instance = new BrowserUpProxyApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BrowserUpProxyApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' BrowserUpProxyApi
            //Assert.IsType<BrowserUpProxyApi>(instance);
        }

        /// <summary>
        /// Test AddError
        /// </summary>
        [Fact]
        public void AddErrorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Error error = null;
            //instance.AddError(error);
        }

        /// <summary>
        /// Test AddMetric
        /// </summary>
        [Fact]
        public void AddMetricTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Metric metric = null;
            //instance.AddMetric(metric);
        }

        /// <summary>
        /// Test GetHarLog
        /// </summary>
        [Fact]
        public void GetHarLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetHarLog();
            //Assert.IsType<Har>(response);
        }

        /// <summary>
        /// Test Healthcheck
        /// </summary>
        [Fact]
        public void HealthcheckTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Healthcheck();
        }

        /// <summary>
        /// Test NewPage
        /// </summary>
        [Fact]
        public void NewPageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string title = null;
            //var response = instance.NewPage(title);
            //Assert.IsType<Har>(response);
        }

        /// <summary>
        /// Test ResetHarLog
        /// </summary>
        [Fact]
        public void ResetHarLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ResetHarLog();
            //Assert.IsType<Har>(response);
        }

        /// <summary>
        /// Test VerifyNotPresent
        /// </summary>
        [Fact]
        public void VerifyNotPresentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //MatchCriteria matchCriteria = null;
            //var response = instance.VerifyNotPresent(name, matchCriteria);
            //Assert.IsType<VerifyResult>(response);
        }

        /// <summary>
        /// Test VerifyPresent
        /// </summary>
        [Fact]
        public void VerifyPresentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //MatchCriteria matchCriteria = null;
            //var response = instance.VerifyPresent(name, matchCriteria);
            //Assert.IsType<VerifyResult>(response);
        }

        /// <summary>
        /// Test VerifySLA
        /// </summary>
        [Fact]
        public void VerifySLATest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int time = null;
            //string name = null;
            //MatchCriteria matchCriteria = null;
            //var response = instance.VerifySLA(time, name, matchCriteria);
            //Assert.IsType<VerifyResult>(response);
        }

        /// <summary>
        /// Test VerifySize
        /// </summary>
        [Fact]
        public void VerifySizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int size = null;
            //string name = null;
            //MatchCriteria matchCriteria = null;
            //var response = instance.VerifySize(size, name, matchCriteria);
            //Assert.IsType<VerifyResult>(response);
        }
    }
}
