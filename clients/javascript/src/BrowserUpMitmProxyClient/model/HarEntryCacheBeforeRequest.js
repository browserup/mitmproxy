/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarEntryCacheBeforeRequestOneOf from './HarEntryCacheBeforeRequestOneOf';

/**
 * The HarEntryCacheBeforeRequest model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequest
 * @version 1.0.0
 */
class HarEntryCacheBeforeRequest {
    /**
     * Constructs a new <code>HarEntryCacheBeforeRequest</code>.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequest
     * @param {(module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequestOneOf|module:BrowserUpMitmProxyClient/model/Null)} instance The actual instance to initialize HarEntryCacheBeforeRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "Null") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                Null.validateJSON(instance); // throw an exception if no match
                // create Null from JS object
                this.actualInstance = Null.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into Null
            errorMessages.push("Failed to construct Null: " + err)
        }

        try {
            if (typeof instance === "HarEntryCacheBeforeRequestOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HarEntryCacheBeforeRequestOneOf.validateJSON(instance); // throw an exception if no match
                // create HarEntryCacheBeforeRequestOneOf from JS object
                this.actualInstance = HarEntryCacheBeforeRequestOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HarEntryCacheBeforeRequestOneOf
            errorMessages.push("Failed to construct HarEntryCacheBeforeRequestOneOf: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `HarEntryCacheBeforeRequest` with oneOf schemas HarEntryCacheBeforeRequestOneOf, Null. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `HarEntryCacheBeforeRequest` with oneOf schemas HarEntryCacheBeforeRequestOneOf, Null. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>HarEntryCacheBeforeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequest} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequest} The populated <code>HarEntryCacheBeforeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new HarEntryCacheBeforeRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>HarEntryCacheBeforeRequestOneOf</code>, <code>Null</code>.
     * @return {(module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequestOneOf|module:BrowserUpMitmProxyClient/model/Null)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>HarEntryCacheBeforeRequestOneOf</code>, <code>Null</code>.
     * @param {(module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequestOneOf|module:BrowserUpMitmProxyClient/model/Null)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = HarEntryCacheBeforeRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of HarEntryCacheBeforeRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryCacheBeforeRequest} An instance of HarEntryCacheBeforeRequest.
     */
    static fromJSON = function(json_string){
        return HarEntryCacheBeforeRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {String} expires
 */
HarEntryCacheBeforeRequest.prototype['expires'] = undefined;

/**
 * @member {String} lastAccess
 */
HarEntryCacheBeforeRequest.prototype['lastAccess'] = undefined;

/**
 * @member {String} eTag
 */
HarEntryCacheBeforeRequest.prototype['eTag'] = undefined;

/**
 * @member {Number} hitCount
 */
HarEntryCacheBeforeRequest.prototype['hitCount'] = undefined;

/**
 * @member {String} comment
 */
HarEntryCacheBeforeRequest.prototype['comment'] = undefined;


HarEntryCacheBeforeRequest.OneOf = ["HarEntryCacheBeforeRequestOneOf", "Null"];

export default HarEntryCacheBeforeRequest;

