// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntryRequestPostDataParamsInner
    /// </summary>
    public partial class HarEntryRequestPostDataParamsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryRequestPostDataParamsInner" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="value">value</param>
        /// <param name="fileName">fileName</param>
        /// <param name="contentType">contentType</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntryRequestPostDataParamsInner(Option<string?> name = default, Option<string?> value = default, Option<string?> fileName = default, Option<string?> contentType = default, Option<string?> comment = default)
        {
            NameOption = name;
            ValueOption = value;
            FileNameOption = fileName;
            ContentTypeOption = contentType;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this.ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Used to track the state of FileName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FileNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FileName
        /// </summary>
        [JsonPropertyName("fileName")]
        public string? FileName { get { return this.FileNameOption; } set { this.FileNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [JsonPropertyName("contentType")]
        public string? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryRequestPostDataParamsInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryRequestPostDataParamsInner" />
    /// </summary>
    public class HarEntryRequestPostDataParamsInnerJsonConverter : JsonConverter<HarEntryRequestPostDataParamsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryRequestPostDataParamsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryRequestPostDataParamsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> value = default;
            Option<string?> fileName = default;
            Option<string?> contentType = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fileName":
                            fileName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contentType":
                            contentType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class HarEntryRequestPostDataParamsInner.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class HarEntryRequestPostDataParamsInner.");

            if (fileName.IsSet && fileName.Value == null)
                throw new ArgumentNullException(nameof(fileName), "Property is not nullable for class HarEntryRequestPostDataParamsInner.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class HarEntryRequestPostDataParamsInner.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntryRequestPostDataParamsInner.");

            return new HarEntryRequestPostDataParamsInner(name, value, fileName, contentType, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryRequestPostDataParamsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequestPostDataParamsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryRequestPostDataParamsInner harEntryRequestPostDataParamsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryRequestPostDataParamsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryRequestPostDataParamsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequestPostDataParamsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryRequestPostDataParamsInner harEntryRequestPostDataParamsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryRequestPostDataParamsInner.NameOption.IsSet && harEntryRequestPostDataParamsInner.Name == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostDataParamsInner.Name), "Property is required for class HarEntryRequestPostDataParamsInner.");

            if (harEntryRequestPostDataParamsInner.ValueOption.IsSet && harEntryRequestPostDataParamsInner.Value == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostDataParamsInner.Value), "Property is required for class HarEntryRequestPostDataParamsInner.");

            if (harEntryRequestPostDataParamsInner.FileNameOption.IsSet && harEntryRequestPostDataParamsInner.FileName == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostDataParamsInner.FileName), "Property is required for class HarEntryRequestPostDataParamsInner.");

            if (harEntryRequestPostDataParamsInner.ContentTypeOption.IsSet && harEntryRequestPostDataParamsInner.ContentType == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostDataParamsInner.ContentType), "Property is required for class HarEntryRequestPostDataParamsInner.");

            if (harEntryRequestPostDataParamsInner.CommentOption.IsSet && harEntryRequestPostDataParamsInner.Comment == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostDataParamsInner.Comment), "Property is required for class HarEntryRequestPostDataParamsInner.");

            if (harEntryRequestPostDataParamsInner.NameOption.IsSet)
                writer.WriteString("name", harEntryRequestPostDataParamsInner.Name);

            if (harEntryRequestPostDataParamsInner.ValueOption.IsSet)
                writer.WriteString("value", harEntryRequestPostDataParamsInner.Value);

            if (harEntryRequestPostDataParamsInner.FileNameOption.IsSet)
                writer.WriteString("fileName", harEntryRequestPostDataParamsInner.FileName);

            if (harEntryRequestPostDataParamsInner.ContentTypeOption.IsSet)
                writer.WriteString("contentType", harEntryRequestPostDataParamsInner.ContentType);

            if (harEntryRequestPostDataParamsInner.CommentOption.IsSet)
                writer.WriteString("comment", harEntryRequestPostDataParamsInner.Comment);
        }
    }
}
