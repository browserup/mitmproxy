// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// LargestContentfulPaint
    /// </summary>
    public partial class LargestContentfulPaint : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LargestContentfulPaint" /> class.
        /// </summary>
        /// <param name="startTime">startTime (default to -1)</param>
        /// <param name="size">size (default to -1)</param>
        /// <param name="domPath">domPath (default to &quot;&quot;)</param>
        /// <param name="tag">tag (default to &quot;&quot;)</param>
        [JsonConstructor]
        public LargestContentfulPaint(Option<long?> startTime = default, Option<long?> size = default, Option<string?> domPath = default, Option<string?> tag = default)
        {
            StartTimeOption = startTime;
            SizeOption = size;
            DomPathOption = domPath;
            TagOption = tag;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public long? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Size
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [JsonPropertyName("size")]
        public long? Size { get { return this.SizeOption; } set { this.SizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomPathOption { get; private set; }

        /// <summary>
        /// Gets or Sets DomPath
        /// </summary>
        [JsonPropertyName("domPath")]
        public string? DomPath { get { return this.DomPathOption; } set { this.DomPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of Tag
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TagOption { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string? Tag { get { return this.TagOption; } set { this.TagOption = new(value); } }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public Dictionary<string, JsonElement> AdditionalProperties { get; } = new Dictionary<string, JsonElement>();

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LargestContentfulPaint {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  DomPath: ").Append(DomPath).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartTime (long) minimum
            if (this.StartTimeOption.IsSet && this.StartTimeOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for StartTime, must be a value greater than or equal to -1.", new [] { "StartTime" });
            }

            // Size (long) minimum
            if (this.SizeOption.IsSet && this.SizeOption.Value < (long)-1)
            {
                yield return new ValidationResult("Invalid value for Size, must be a value greater than or equal to -1.", new [] { "Size" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="LargestContentfulPaint" />
    /// </summary>
    public class LargestContentfulPaintJsonConverter : JsonConverter<LargestContentfulPaint>
    {
        /// <summary>
        /// Deserializes json to <see cref="LargestContentfulPaint" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LargestContentfulPaint Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> startTime = default;
            Option<long?> size = default;
            Option<string?> domPath = default;
            Option<string?> tag = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "startTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startTime = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "domPath":
                            domPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class LargestContentfulPaint.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class LargestContentfulPaint.");

            if (domPath.IsSet && domPath.Value == null)
                throw new ArgumentNullException(nameof(domPath), "Property is not nullable for class LargestContentfulPaint.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class LargestContentfulPaint.");

            return new LargestContentfulPaint(startTime, size, domPath, tag);
        }

        /// <summary>
        /// Serializes a <see cref="LargestContentfulPaint" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="largestContentfulPaint"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LargestContentfulPaint largestContentfulPaint, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, largestContentfulPaint, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="LargestContentfulPaint" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="largestContentfulPaint"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, LargestContentfulPaint largestContentfulPaint, JsonSerializerOptions jsonSerializerOptions)
        {
            if (largestContentfulPaint.DomPathOption.IsSet && largestContentfulPaint.DomPath == null)
                throw new ArgumentNullException(nameof(largestContentfulPaint.DomPath), "Property is required for class LargestContentfulPaint.");

            if (largestContentfulPaint.TagOption.IsSet && largestContentfulPaint.Tag == null)
                throw new ArgumentNullException(nameof(largestContentfulPaint.Tag), "Property is required for class LargestContentfulPaint.");

            if (largestContentfulPaint.StartTimeOption.IsSet)
                writer.WriteNumber("startTime", largestContentfulPaint.StartTimeOption.Value!.Value);

            if (largestContentfulPaint.SizeOption.IsSet)
                writer.WriteNumber("size", largestContentfulPaint.SizeOption.Value!.Value);

            if (largestContentfulPaint.DomPathOption.IsSet)
                writer.WriteString("domPath", largestContentfulPaint.DomPath);

            if (largestContentfulPaint.TagOption.IsSet)
                writer.WriteString("tag", largestContentfulPaint.Tag);
        }
    }
}
