/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
)

// checks if the HarEntryCache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryCache{}

// HarEntryCache struct for HarEntryCache
type HarEntryCache struct {
	BeforeRequest NullableHarEntryCacheBeforeRequest `json:"beforeRequest,omitempty"`
	AfterRequest NullableHarEntryCacheBeforeRequest `json:"afterRequest,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewHarEntryCache instantiates a new HarEntryCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryCache() *HarEntryCache {
	this := HarEntryCache{}
	return &this
}

// NewHarEntryCacheWithDefaults instantiates a new HarEntryCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryCacheWithDefaults() *HarEntryCache {
	this := HarEntryCache{}
	return &this
}

// GetBeforeRequest returns the BeforeRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HarEntryCache) GetBeforeRequest() HarEntryCacheBeforeRequest {
	if o == nil || IsNil(o.BeforeRequest.Get()) {
		var ret HarEntryCacheBeforeRequest
		return ret
	}
	return *o.BeforeRequest.Get()
}

// GetBeforeRequestOk returns a tuple with the BeforeRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HarEntryCache) GetBeforeRequestOk() (*HarEntryCacheBeforeRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.BeforeRequest.Get(), o.BeforeRequest.IsSet()
}

// HasBeforeRequest returns a boolean if a field has been set.
func (o *HarEntryCache) HasBeforeRequest() bool {
	if o != nil && o.BeforeRequest.IsSet() {
		return true
	}

	return false
}

// SetBeforeRequest gets a reference to the given NullableHarEntryCacheBeforeRequest and assigns it to the BeforeRequest field.
func (o *HarEntryCache) SetBeforeRequest(v HarEntryCacheBeforeRequest) {
	o.BeforeRequest.Set(&v)
}
// SetBeforeRequestNil sets the value for BeforeRequest to be an explicit nil
func (o *HarEntryCache) SetBeforeRequestNil() {
	o.BeforeRequest.Set(nil)
}

// UnsetBeforeRequest ensures that no value is present for BeforeRequest, not even an explicit nil
func (o *HarEntryCache) UnsetBeforeRequest() {
	o.BeforeRequest.Unset()
}

// GetAfterRequest returns the AfterRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HarEntryCache) GetAfterRequest() HarEntryCacheBeforeRequest {
	if o == nil || IsNil(o.AfterRequest.Get()) {
		var ret HarEntryCacheBeforeRequest
		return ret
	}
	return *o.AfterRequest.Get()
}

// GetAfterRequestOk returns a tuple with the AfterRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HarEntryCache) GetAfterRequestOk() (*HarEntryCacheBeforeRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.AfterRequest.Get(), o.AfterRequest.IsSet()
}

// HasAfterRequest returns a boolean if a field has been set.
func (o *HarEntryCache) HasAfterRequest() bool {
	if o != nil && o.AfterRequest.IsSet() {
		return true
	}

	return false
}

// SetAfterRequest gets a reference to the given NullableHarEntryCacheBeforeRequest and assigns it to the AfterRequest field.
func (o *HarEntryCache) SetAfterRequest(v HarEntryCacheBeforeRequest) {
	o.AfterRequest.Set(&v)
}
// SetAfterRequestNil sets the value for AfterRequest to be an explicit nil
func (o *HarEntryCache) SetAfterRequestNil() {
	o.AfterRequest.Set(nil)
}

// UnsetAfterRequest ensures that no value is present for AfterRequest, not even an explicit nil
func (o *HarEntryCache) UnsetAfterRequest() {
	o.AfterRequest.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryCache) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryCache) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryCache) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryCache) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryCache) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryCache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BeforeRequest.IsSet() {
		toSerialize["beforeRequest"] = o.BeforeRequest.Get()
	}
	if o.AfterRequest.IsSet() {
		toSerialize["afterRequest"] = o.AfterRequest.Get()
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableHarEntryCache struct {
	value *HarEntryCache
	isSet bool
}

func (v NullableHarEntryCache) Get() *HarEntryCache {
	return v.value
}

func (v *NullableHarEntryCache) Set(val *HarEntryCache) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryCache) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryCache(val *HarEntryCache) *NullableHarEntryCache {
	return &NullableHarEntryCache{value: val, isSet: true}
}

func (v NullableHarEntryCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


