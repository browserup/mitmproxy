/*
BrowserUp MitmProxy

Testing BrowserUpProxyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package BrowserUpMitmProxyClient

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_BrowserUpMitmProxyClient_BrowserUpProxyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BrowserUpProxyAPIService AddError", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BrowserUpProxyAPI.AddError(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService AddMetric", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BrowserUpProxyAPI.AddMetric(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService GetHarLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.GetHarLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService Healthcheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.BrowserUpProxyAPI.Healthcheck(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService NewPage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var title string

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.NewPage(context.Background(), title).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService ResetHarLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.ResetHarLog(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService VerifyNotPresent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.VerifyNotPresent(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService VerifyPresent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.VerifyPresent(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService VerifySLA", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var time int32
		var name string

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.VerifySLA(context.Background(), time, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BrowserUpProxyAPIService VerifySize", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var size int32
		var name string

		resp, httpRes, err := apiClient.BrowserUpProxyAPI.VerifySize(context.Background(), size, name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
