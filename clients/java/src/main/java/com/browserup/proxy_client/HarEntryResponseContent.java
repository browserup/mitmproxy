/*
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.browserup.proxy_client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.browserup.proxy_client.JSON;

/**
 * HarEntryResponseContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class HarEntryResponseContent {
  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_COMPRESSION = "compression";
  @SerializedName(SERIALIZED_NAME_COMPRESSION)
  private Integer compression;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_ENCODING = "encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_VIDEO_BUFFERED_PERCENT = "_videoBufferedPercent";
  @SerializedName(SERIALIZED_NAME_VIDEO_BUFFERED_PERCENT)
  private Long videoBufferedPercent = -1l;

  public static final String SERIALIZED_NAME_VIDEO_STALL_COUNT = "_videoStallCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_STALL_COUNT)
  private Long videoStallCount = -1l;

  public static final String SERIALIZED_NAME_VIDEO_DECODED_BYTE_COUNT = "_videoDecodedByteCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_DECODED_BYTE_COUNT)
  private Long videoDecodedByteCount = -1l;

  public static final String SERIALIZED_NAME_VIDEO_WAITING_COUNT = "_videoWaitingCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_WAITING_COUNT)
  private Long videoWaitingCount = -1l;

  public static final String SERIALIZED_NAME_VIDEO_ERROR_COUNT = "_videoErrorCount";
  @SerializedName(SERIALIZED_NAME_VIDEO_ERROR_COUNT)
  private Long videoErrorCount = -1l;

  public static final String SERIALIZED_NAME_VIDEO_DROPPED_FRAMES = "_videoDroppedFrames";
  @SerializedName(SERIALIZED_NAME_VIDEO_DROPPED_FRAMES)
  private Long videoDroppedFrames = -1l;

  public static final String SERIALIZED_NAME_VIDEO_TOTAL_FRAMES = "_videoTotalFrames";
  @SerializedName(SERIALIZED_NAME_VIDEO_TOTAL_FRAMES)
  private Long videoTotalFrames = -1l;

  public static final String SERIALIZED_NAME_VIDEO_AUDIO_BYTES_DECODED = "_videoAudioBytesDecoded";
  @SerializedName(SERIALIZED_NAME_VIDEO_AUDIO_BYTES_DECODED)
  private Long videoAudioBytesDecoded = -1l;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public HarEntryResponseContent() {
  }

  public HarEntryResponseContent size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nonnull

  public Integer getSize() {
    return size;
  }


  public void setSize(Integer size) {
    this.size = size;
  }


  public HarEntryResponseContent compression(Integer compression) {
    
    this.compression = compression;
    return this;
  }

   /**
   * Get compression
   * @return compression
  **/
  @javax.annotation.Nullable

  public Integer getCompression() {
    return compression;
  }


  public void setCompression(Integer compression) {
    this.compression = compression;
  }


  public HarEntryResponseContent mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @javax.annotation.Nonnull

  public String getMimeType() {
    return mimeType;
  }


  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public HarEntryResponseContent text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public HarEntryResponseContent encoding(String encoding) {
    
    this.encoding = encoding;
    return this;
  }

   /**
   * Get encoding
   * @return encoding
  **/
  @javax.annotation.Nullable

  public String getEncoding() {
    return encoding;
  }


  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public HarEntryResponseContent videoBufferedPercent(Long videoBufferedPercent) {
    
    this.videoBufferedPercent = videoBufferedPercent;
    return this;
  }

   /**
   * Get videoBufferedPercent
   * minimum: -1
   * @return videoBufferedPercent
  **/
  @javax.annotation.Nullable

  public Long getVideoBufferedPercent() {
    return videoBufferedPercent;
  }


  public void setVideoBufferedPercent(Long videoBufferedPercent) {
    this.videoBufferedPercent = videoBufferedPercent;
  }


  public HarEntryResponseContent videoStallCount(Long videoStallCount) {
    
    this.videoStallCount = videoStallCount;
    return this;
  }

   /**
   * Get videoStallCount
   * minimum: -1
   * @return videoStallCount
  **/
  @javax.annotation.Nullable

  public Long getVideoStallCount() {
    return videoStallCount;
  }


  public void setVideoStallCount(Long videoStallCount) {
    this.videoStallCount = videoStallCount;
  }


  public HarEntryResponseContent videoDecodedByteCount(Long videoDecodedByteCount) {
    
    this.videoDecodedByteCount = videoDecodedByteCount;
    return this;
  }

   /**
   * Get videoDecodedByteCount
   * minimum: -1
   * @return videoDecodedByteCount
  **/
  @javax.annotation.Nullable

  public Long getVideoDecodedByteCount() {
    return videoDecodedByteCount;
  }


  public void setVideoDecodedByteCount(Long videoDecodedByteCount) {
    this.videoDecodedByteCount = videoDecodedByteCount;
  }


  public HarEntryResponseContent videoWaitingCount(Long videoWaitingCount) {
    
    this.videoWaitingCount = videoWaitingCount;
    return this;
  }

   /**
   * Get videoWaitingCount
   * minimum: -1
   * @return videoWaitingCount
  **/
  @javax.annotation.Nullable

  public Long getVideoWaitingCount() {
    return videoWaitingCount;
  }


  public void setVideoWaitingCount(Long videoWaitingCount) {
    this.videoWaitingCount = videoWaitingCount;
  }


  public HarEntryResponseContent videoErrorCount(Long videoErrorCount) {
    
    this.videoErrorCount = videoErrorCount;
    return this;
  }

   /**
   * Get videoErrorCount
   * minimum: -1
   * @return videoErrorCount
  **/
  @javax.annotation.Nullable

  public Long getVideoErrorCount() {
    return videoErrorCount;
  }


  public void setVideoErrorCount(Long videoErrorCount) {
    this.videoErrorCount = videoErrorCount;
  }


  public HarEntryResponseContent videoDroppedFrames(Long videoDroppedFrames) {
    
    this.videoDroppedFrames = videoDroppedFrames;
    return this;
  }

   /**
   * Get videoDroppedFrames
   * minimum: -1
   * @return videoDroppedFrames
  **/
  @javax.annotation.Nullable

  public Long getVideoDroppedFrames() {
    return videoDroppedFrames;
  }


  public void setVideoDroppedFrames(Long videoDroppedFrames) {
    this.videoDroppedFrames = videoDroppedFrames;
  }


  public HarEntryResponseContent videoTotalFrames(Long videoTotalFrames) {
    
    this.videoTotalFrames = videoTotalFrames;
    return this;
  }

   /**
   * Get videoTotalFrames
   * minimum: -1
   * @return videoTotalFrames
  **/
  @javax.annotation.Nullable

  public Long getVideoTotalFrames() {
    return videoTotalFrames;
  }


  public void setVideoTotalFrames(Long videoTotalFrames) {
    this.videoTotalFrames = videoTotalFrames;
  }


  public HarEntryResponseContent videoAudioBytesDecoded(Long videoAudioBytesDecoded) {
    
    this.videoAudioBytesDecoded = videoAudioBytesDecoded;
    return this;
  }

   /**
   * Get videoAudioBytesDecoded
   * minimum: -1
   * @return videoAudioBytesDecoded
  **/
  @javax.annotation.Nullable

  public Long getVideoAudioBytesDecoded() {
    return videoAudioBytesDecoded;
  }


  public void setVideoAudioBytesDecoded(Long videoAudioBytesDecoded) {
    this.videoAudioBytesDecoded = videoAudioBytesDecoded;
  }


  public HarEntryResponseContent comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HarEntryResponseContent harEntryResponseContent = (HarEntryResponseContent) o;
    return Objects.equals(this.size, harEntryResponseContent.size) &&
        Objects.equals(this.compression, harEntryResponseContent.compression) &&
        Objects.equals(this.mimeType, harEntryResponseContent.mimeType) &&
        Objects.equals(this.text, harEntryResponseContent.text) &&
        Objects.equals(this.encoding, harEntryResponseContent.encoding) &&
        Objects.equals(this.videoBufferedPercent, harEntryResponseContent.videoBufferedPercent) &&
        Objects.equals(this.videoStallCount, harEntryResponseContent.videoStallCount) &&
        Objects.equals(this.videoDecodedByteCount, harEntryResponseContent.videoDecodedByteCount) &&
        Objects.equals(this.videoWaitingCount, harEntryResponseContent.videoWaitingCount) &&
        Objects.equals(this.videoErrorCount, harEntryResponseContent.videoErrorCount) &&
        Objects.equals(this.videoDroppedFrames, harEntryResponseContent.videoDroppedFrames) &&
        Objects.equals(this.videoTotalFrames, harEntryResponseContent.videoTotalFrames) &&
        Objects.equals(this.videoAudioBytesDecoded, harEntryResponseContent.videoAudioBytesDecoded) &&
        Objects.equals(this.comment, harEntryResponseContent.comment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(size, compression, mimeType, text, encoding, videoBufferedPercent, videoStallCount, videoDecodedByteCount, videoWaitingCount, videoErrorCount, videoDroppedFrames, videoTotalFrames, videoAudioBytesDecoded, comment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HarEntryResponseContent {\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    compression: ").append(toIndentedString(compression)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    videoBufferedPercent: ").append(toIndentedString(videoBufferedPercent)).append("\n");
    sb.append("    videoStallCount: ").append(toIndentedString(videoStallCount)).append("\n");
    sb.append("    videoDecodedByteCount: ").append(toIndentedString(videoDecodedByteCount)).append("\n");
    sb.append("    videoWaitingCount: ").append(toIndentedString(videoWaitingCount)).append("\n");
    sb.append("    videoErrorCount: ").append(toIndentedString(videoErrorCount)).append("\n");
    sb.append("    videoDroppedFrames: ").append(toIndentedString(videoDroppedFrames)).append("\n");
    sb.append("    videoTotalFrames: ").append(toIndentedString(videoTotalFrames)).append("\n");
    sb.append("    videoAudioBytesDecoded: ").append(toIndentedString(videoAudioBytesDecoded)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("size");
    openapiFields.add("compression");
    openapiFields.add("mimeType");
    openapiFields.add("text");
    openapiFields.add("encoding");
    openapiFields.add("_videoBufferedPercent");
    openapiFields.add("_videoStallCount");
    openapiFields.add("_videoDecodedByteCount");
    openapiFields.add("_videoWaitingCount");
    openapiFields.add("_videoErrorCount");
    openapiFields.add("_videoDroppedFrames");
    openapiFields.add("_videoTotalFrames");
    openapiFields.add("_videoAudioBytesDecoded");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("mimeType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to HarEntryResponseContent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!HarEntryResponseContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HarEntryResponseContent is not found in the empty JSON string", HarEntryResponseContent.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!HarEntryResponseContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HarEntryResponseContent` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HarEntryResponseContent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("encoding") != null && !jsonObj.get("encoding").isJsonNull()) && !jsonObj.get("encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HarEntryResponseContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HarEntryResponseContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HarEntryResponseContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HarEntryResponseContent.class));

       return (TypeAdapter<T>) new TypeAdapter<HarEntryResponseContent>() {
           @Override
           public void write(JsonWriter out, HarEntryResponseContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HarEntryResponseContent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HarEntryResponseContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HarEntryResponseContent
  * @throws IOException if the JSON string is invalid with respect to HarEntryResponseContent
  */
  public static HarEntryResponseContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HarEntryResponseContent.class);
  }

 /**
  * Convert an instance of HarEntryResponseContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

