# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.24
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class HarEntryResponseContent(BaseModel):
    """
    HarEntryResponseContent
    """ # noqa: E501
    size: StrictInt
    compression: Optional[StrictInt] = None
    mime_type: StrictStr = Field(alias="mimeType")
    text: Optional[StrictStr] = None
    encoding: Optional[StrictStr] = None
    video_buffered_percent: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoBufferedPercent")
    video_stall_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoStallCount")
    video_decoded_byte_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoDecodedByteCount")
    video_waiting_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoWaitingCount")
    video_error_count: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoErrorCount")
    video_dropped_frames: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoDroppedFrames")
    video_total_frames: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoTotalFrames")
    video_audio_bytes_decoded: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_videoAudioBytesDecoded")
    comment: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["size", "compression", "mimeType", "text", "encoding", "_videoBufferedPercent", "_videoStallCount", "_videoDecodedByteCount", "_videoWaitingCount", "_videoErrorCount", "_videoDroppedFrames", "_videoTotalFrames", "_videoAudioBytesDecoded", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HarEntryResponseContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HarEntryResponseContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "size": obj.get("size"),
            "compression": obj.get("compression"),
            "mimeType": obj.get("mimeType"),
            "text": obj.get("text"),
            "encoding": obj.get("encoding"),
            "_videoBufferedPercent": obj.get("_videoBufferedPercent") if obj.get("_videoBufferedPercent") is not None else -1,
            "_videoStallCount": obj.get("_videoStallCount") if obj.get("_videoStallCount") is not None else -1,
            "_videoDecodedByteCount": obj.get("_videoDecodedByteCount") if obj.get("_videoDecodedByteCount") is not None else -1,
            "_videoWaitingCount": obj.get("_videoWaitingCount") if obj.get("_videoWaitingCount") is not None else -1,
            "_videoErrorCount": obj.get("_videoErrorCount") if obj.get("_videoErrorCount") is not None else -1,
            "_videoDroppedFrames": obj.get("_videoDroppedFrames") if obj.get("_videoDroppedFrames") is not None else -1,
            "_videoTotalFrames": obj.get("_videoTotalFrames") if obj.get("_videoTotalFrames") is not None else -1,
            "_videoAudioBytesDecoded": obj.get("_videoAudioBytesDecoded") if obj.get("_videoAudioBytesDecoded") is not None else -1,
            "comment": obj.get("comment")
        })
        return _obj


