// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// Posted data info.
    /// </summary>
    public partial class HarEntryRequestPostData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntryRequestPostData" /> class.
        /// </summary>
        /// <param name="mimeType">mimeType</param>
        /// <param name="text">text</param>
        /// <param name="params">params</param>
        [JsonConstructor]
        public HarEntryRequestPostData(string mimeType, Option<string?> text = default, Option<List<HarEntryRequestPostDataParamsInner>?> @params = default)
        {
            MimeType = mimeType;
            TextOption = text;
            ParamsOption = @params;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets MimeType
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Used to track the state of Text
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TextOption { get; private set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [JsonPropertyName("text")]
        public string? Text { get { return this.TextOption; } set { this.TextOption = new(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HarEntryRequestPostDataParamsInner>?> ParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [JsonPropertyName("params")]
        public List<HarEntryRequestPostDataParamsInner>? Params { get { return this.ParamsOption; } set { this.ParamsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntryRequestPostData {\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntryRequestPostData" />
    /// </summary>
    public class HarEntryRequestPostDataJsonConverter : JsonConverter<HarEntryRequestPostData>
    {
        /// <summary>
        /// Deserializes json to <see cref="HarEntryRequestPostData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntryRequestPostData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mimeType = default;
            Option<string?> text = default;
            Option<List<HarEntryRequestPostDataParamsInner>?> varParams = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mimeType":
                            mimeType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "text":
                            text = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "params":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varParams = new Option<List<HarEntryRequestPostDataParamsInner>?>(JsonSerializer.Deserialize<List<HarEntryRequestPostDataParamsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mimeType.IsSet)
                throw new ArgumentException("Property is required for class HarEntryRequestPostData.", nameof(mimeType));

            if (mimeType.IsSet && mimeType.Value == null)
                throw new ArgumentNullException(nameof(mimeType), "Property is not nullable for class HarEntryRequestPostData.");

            if (text.IsSet && text.Value == null)
                throw new ArgumentNullException(nameof(text), "Property is not nullable for class HarEntryRequestPostData.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class HarEntryRequestPostData.");

            return new HarEntryRequestPostData(mimeType.Value!, text, varParams);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntryRequestPostData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequestPostData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntryRequestPostData harEntryRequestPostData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntryRequestPostData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntryRequestPostData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntryRequestPostData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntryRequestPostData harEntryRequestPostData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntryRequestPostData.MimeType == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostData.MimeType), "Property is required for class HarEntryRequestPostData.");

            if (harEntryRequestPostData.TextOption.IsSet && harEntryRequestPostData.Text == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostData.Text), "Property is required for class HarEntryRequestPostData.");

            if (harEntryRequestPostData.ParamsOption.IsSet && harEntryRequestPostData.Params == null)
                throw new ArgumentNullException(nameof(harEntryRequestPostData.Params), "Property is required for class HarEntryRequestPostData.");

            writer.WriteString("mimeType", harEntryRequestPostData.MimeType);

            if (harEntryRequestPostData.TextOption.IsSet)
                writer.WriteString("text", harEntryRequestPostData.Text);

            if (harEntryRequestPostData.ParamsOption.IsSet)
            {
                writer.WritePropertyName("params");
                JsonSerializer.Serialize(writer, harEntryRequestPostData.Params, jsonSerializerOptions);
            }
        }
    }
}
