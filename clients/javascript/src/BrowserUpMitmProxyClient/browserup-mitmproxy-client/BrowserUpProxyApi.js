/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Har from '../model/Har';
import MatchCriteria from '../model/MatchCriteria';
import Metric from '../model/Metric';
import VerifyResult from '../model/VerifyResult';

/**
* BrowserUpProxy service.
* @module BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi
* @version 1.0.0
*/
export default class BrowserUpProxyApi {

    /**
    * Constructs a new BrowserUpProxyApi. 
    * @alias module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi
    * @class
    * @param {module:BrowserUpMitmProxyClient/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:BrowserUpMitmProxyClient/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addError operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~addErrorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Custom Error to the captured traffic har
     * @param {module:BrowserUpMitmProxyClient/model/Error} error Receives an error to track. Internally, the error is stored in an array in the har under the _errors key
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~addErrorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addError(error, callback) {
      let postBody = error;
      // verify the required parameter 'error' is set
      if (error === undefined || error === null) {
        throw new Error("Missing the required parameter 'error' when calling addError");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/har/errors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addMetric operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~addMetricCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Custom Metric to the captured traffic har
     * @param {module:BrowserUpMitmProxyClient/model/Metric} metric Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~addMetricCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMetric(metric, callback) {
      let postBody = metric;
      // verify the required parameter 'metric' is set
      if (metric === undefined || metric === null) {
        throw new Error("Missing the required parameter 'metric' when calling addMetric");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/har/metrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHarLog operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~getHarLogCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the current HAR.
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~getHarLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/Har}
     */
    getHarLog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the healthcheck operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~healthcheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the healthcheck
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~healthcheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    healthcheck(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/healthcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the newPage operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~newPageCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a fresh HAR Page (Step) in the current active HAR to group requests.
     * @param {String} title The unique title for this har page/step.
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~newPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/Har}
     */
    newPage(title, callback) {
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling newPage");
      }

      let pathParams = {
        'title': title
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har/page', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetHarLog operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~resetHarLogCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/Har} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a fresh HAR capture session.
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~resetHarLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/Har}
     */
    resetHarLog(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Har;
      return this.apiClient.callApi(
        '/har', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyNotPresent operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifyNotPresentCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/VerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify no matching items are present in the captured traffic
     * @param {String} name The unique name for this verification operation
     * @param {module:BrowserUpMitmProxyClient/model/MatchCriteria} matchCriteria Match criteria to select requests - response pairs for size tests
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifyNotPresentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/VerifyResult}
     */
    verifyNotPresent(name, matchCriteria, callback) {
      let postBody = matchCriteria;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling verifyNotPresent");
      }
      // verify the required parameter 'matchCriteria' is set
      if (matchCriteria === undefined || matchCriteria === null) {
        throw new Error("Missing the required parameter 'matchCriteria' when calling verifyNotPresent");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyResult;
      return this.apiClient.callApi(
        '/verify/not_present/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyPresent operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifyPresentCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/VerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify at least one matching item is present in the captured traffic
     * @param {String} name The unique name for this verification operation
     * @param {module:BrowserUpMitmProxyClient/model/MatchCriteria} matchCriteria Match criteria to select requests - response pairs for size tests
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifyPresentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/VerifyResult}
     */
    verifyPresent(name, matchCriteria, callback) {
      let postBody = matchCriteria;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling verifyPresent");
      }
      // verify the required parameter 'matchCriteria' is set
      if (matchCriteria === undefined || matchCriteria === null) {
        throw new Error("Missing the required parameter 'matchCriteria' when calling verifyPresent");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyResult;
      return this.apiClient.callApi(
        '/verify/present/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySLA operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifySLACallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/VerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify each traffic item matching the criteria meets is below SLA time
     * @param {Number} time The time used for comparison
     * @param {String} name The unique name for this verification operation
     * @param {module:BrowserUpMitmProxyClient/model/MatchCriteria} matchCriteria Match criteria to select requests - response pairs for size tests
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifySLACallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/VerifyResult}
     */
    verifySLA(time, name, matchCriteria, callback) {
      let postBody = matchCriteria;
      // verify the required parameter 'time' is set
      if (time === undefined || time === null) {
        throw new Error("Missing the required parameter 'time' when calling verifySLA");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling verifySLA");
      }
      // verify the required parameter 'matchCriteria' is set
      if (matchCriteria === undefined || matchCriteria === null) {
        throw new Error("Missing the required parameter 'matchCriteria' when calling verifySLA");
      }

      let pathParams = {
        'time': time,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyResult;
      return this.apiClient.callApi(
        '/verify/sla/{time}/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySize operation.
     * @callback module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifySizeCallback
     * @param {String} error Error message, if any.
     * @param {module:BrowserUpMitmProxyClient/model/VerifyResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify matching items in the captured traffic meet the size criteria
     * @param {Number} size The size used for comparison, in kilobytes
     * @param {String} name The unique name for this verification operation
     * @param {module:BrowserUpMitmProxyClient/model/MatchCriteria} matchCriteria Match criteria to select requests - response pairs for size tests
     * @param {module:BrowserUpMitmProxyClient/browserup-mitmproxy-client/BrowserUpProxyApi~verifySizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:BrowserUpMitmProxyClient/model/VerifyResult}
     */
    verifySize(size, name, matchCriteria, callback) {
      let postBody = matchCriteria;
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling verifySize");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling verifySize");
      }
      // verify the required parameter 'matchCriteria' is set
      if (matchCriteria === undefined || matchCriteria === null) {
        throw new Error("Missing the required parameter 'matchCriteria' when calling verifySize");
      }

      let pathParams = {
        'size': size,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyResult;
      return this.apiClient.callApi(
        '/verify/size/{size}/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
