# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.26.0
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from BrowserUpMitmProxyClient.models.har_entry_request import HarEntryRequest

class TestHarEntryRequest(unittest.TestCase):
    """HarEntryRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> HarEntryRequest:
        """Test HarEntryRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `HarEntryRequest`
        """
        model = HarEntryRequest()
        if include_optional:
            return HarEntryRequest(
                method = '',
                url = '',
                http_version = '',
                cookies = [
                    BrowserUpMitmProxyClient.models.har_entry_request_cookies_inner.HarEntry_request_cookies_inner(
                        name = '', 
                        value = '', 
                        path = '', 
                        domain = '', 
                        expires = '', 
                        http_only = True, 
                        secure = True, 
                        comment = '', )
                    ],
                headers = [
                    BrowserUpMitmProxyClient.models.header.Header(
                        name = '', 
                        value = '', 
                        comment = '', )
                    ],
                query_string = [
                    BrowserUpMitmProxyClient.models.har_entry_request_query_string_inner.HarEntry_request_queryString_inner(
                        name = '', 
                        value = '', 
                        comment = '', )
                    ],
                post_data = BrowserUpMitmProxyClient.models.har_entry_request_post_data.HarEntry_request_postData(
                    mime_type = '', 
                    text = '', 
                    params = [
                        BrowserUpMitmProxyClient.models.har_entry_request_post_data_params_inner.HarEntry_request_postData_params_inner(
                            name = '', 
                            value = '', 
                            file_name = '', 
                            content_type = '', 
                            comment = '', )
                        ], ),
                headers_size = 56,
                body_size = 56,
                comment = ''
            )
        else:
            return HarEntryRequest(
                method = '',
                url = '',
                http_version = '',
                cookies = [
                    BrowserUpMitmProxyClient.models.har_entry_request_cookies_inner.HarEntry_request_cookies_inner(
                        name = '', 
                        value = '', 
                        path = '', 
                        domain = '', 
                        expires = '', 
                        http_only = True, 
                        secure = True, 
                        comment = '', )
                    ],
                headers = [
                    BrowserUpMitmProxyClient.models.header.Header(
                        name = '', 
                        value = '', 
                        comment = '', )
                    ],
                query_string = [
                    BrowserUpMitmProxyClient.models.har_entry_request_query_string_inner.HarEntry_request_queryString_inner(
                        name = '', 
                        value = '', 
                        comment = '', )
                    ],
                headers_size = 56,
                body_size = 56,
        )
        """

    def testHarEntryRequest(self):
        """Test HarEntryRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
