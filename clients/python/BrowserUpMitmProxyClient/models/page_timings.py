# coding: utf-8

"""
    BrowserUp MitmProxy

    ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

    The version of the OpenAPI document: 1.25
    Contact: developers@browserup.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from BrowserUpMitmProxyClient.models.largest_contentful_paint import LargestContentfulPaint
from typing import Optional, Set
from typing_extensions import Self

class PageTimings(BaseModel):
    """
    PageTimings
    """ # noqa: E501
    on_content_load: Annotated[int, Field(strict=True, ge=-1)] = Field(alias="onContentLoad")
    on_load: Annotated[int, Field(strict=True, ge=-1)] = Field(alias="onLoad")
    href: Optional[StrictStr] = Field(default='', alias="_href")
    dns: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_dns")
    ssl: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_ssl")
    time_to_first_byte: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_timeToFirstByte")
    cumulative_layout_shift: Optional[Union[Annotated[float, Field(strict=True, ge=-1)], Annotated[int, Field(strict=True, ge=-1)]]] = Field(default=-1, alias="_cumulativeLayoutShift")
    largest_contentful_paint: Optional[LargestContentfulPaint] = Field(default=None, alias="_largestContentfulPaint")
    first_paint: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_firstPaint")
    first_input_delay: Optional[Union[Annotated[float, Field(strict=True, ge=-1)], Annotated[int, Field(strict=True, ge=-1)]]] = Field(default=-1, alias="_firstInputDelay")
    dom_interactive: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_domInteractive")
    first_contentful_paint: Optional[Annotated[int, Field(strict=True, ge=-1)]] = Field(default=-1, alias="_firstContentfulPaint")
    comment: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["onContentLoad", "onLoad", "_href", "_dns", "_ssl", "_timeToFirstByte", "_cumulativeLayoutShift", "_largestContentfulPaint", "_firstPaint", "_firstInputDelay", "_domInteractive", "_firstContentfulPaint", "comment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PageTimings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of largest_contentful_paint
        if self.largest_contentful_paint:
            _dict['_largestContentfulPaint'] = self.largest_contentful_paint.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PageTimings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "onContentLoad": obj.get("onContentLoad") if obj.get("onContentLoad") is not None else -1,
            "onLoad": obj.get("onLoad") if obj.get("onLoad") is not None else -1,
            "_href": obj.get("_href") if obj.get("_href") is not None else '',
            "_dns": obj.get("_dns") if obj.get("_dns") is not None else -1,
            "_ssl": obj.get("_ssl") if obj.get("_ssl") is not None else -1,
            "_timeToFirstByte": obj.get("_timeToFirstByte") if obj.get("_timeToFirstByte") is not None else -1,
            "_cumulativeLayoutShift": obj.get("_cumulativeLayoutShift") if obj.get("_cumulativeLayoutShift") is not None else -1,
            "_largestContentfulPaint": LargestContentfulPaint.from_dict(obj["_largestContentfulPaint"]) if obj.get("_largestContentfulPaint") is not None else None,
            "_firstPaint": obj.get("_firstPaint") if obj.get("_firstPaint") is not None else -1,
            "_firstInputDelay": obj.get("_firstInputDelay") if obj.get("_firstInputDelay") is not None else -1,
            "_domInteractive": obj.get("_domInteractive") if obj.get("_domInteractive") is not None else -1,
            "_firstContentfulPaint": obj.get("_firstContentfulPaint") if obj.get("_firstContentfulPaint") is not None else -1,
            "comment": obj.get("comment")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


