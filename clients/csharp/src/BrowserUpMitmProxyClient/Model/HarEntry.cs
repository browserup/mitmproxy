// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// HarEntry
    /// </summary>
    public partial class HarEntry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HarEntry" /> class.
        /// </summary>
        /// <param name="startedDateTime">startedDateTime</param>
        /// <param name="time">time</param>
        /// <param name="request">request</param>
        /// <param name="response">response</param>
        /// <param name="cache">cache</param>
        /// <param name="timings">timings</param>
        /// <param name="pageref">pageref</param>
        /// <param name="serverIPAddress">serverIPAddress</param>
        /// <param name="webSocketMessages">webSocketMessages</param>
        /// <param name="spanId">W3C Trace Context span ID for this entry</param>
        /// <param name="parentId">W3C Trace Context parent span ID (typically the page span ID)</param>
        /// <param name="traceId">W3C Trace Context trace ID for distributed tracing</param>
        /// <param name="connection">connection</param>
        /// <param name="comment">comment</param>
        [JsonConstructor]
        public HarEntry(DateTime startedDateTime, long time, HarEntryRequest request, HarEntryResponse response, HarEntryCache cache, HarEntryTimings timings, Option<string?> pageref = default, Option<string?> serverIPAddress = default, Option<List<WebSocketMessage>?> webSocketMessages = default, Option<string?> spanId = default, Option<string?> parentId = default, Option<string?> traceId = default, Option<string?> connection = default, Option<string?> comment = default)
        {
            StartedDateTime = startedDateTime;
            Time = time;
            Request = request;
            Response = response;
            Cache = cache;
            Timings = timings;
            PagerefOption = pageref;
            ServerIPAddressOption = serverIPAddress;
            WebSocketMessagesOption = webSocketMessages;
            SpanIdOption = spanId;
            ParentIdOption = parentId;
            TraceIdOption = traceId;
            ConnectionOption = connection;
            CommentOption = comment;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets StartedDateTime
        /// </summary>
        [JsonPropertyName("startedDateTime")]
        public DateTime StartedDateTime { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [JsonPropertyName("time")]
        public long Time { get; set; }

        /// <summary>
        /// Gets or Sets Request
        /// </summary>
        [JsonPropertyName("request")]
        public HarEntryRequest Request { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [JsonPropertyName("response")]
        public HarEntryResponse Response { get; set; }

        /// <summary>
        /// Gets or Sets Cache
        /// </summary>
        [JsonPropertyName("cache")]
        public HarEntryCache Cache { get; set; }

        /// <summary>
        /// Gets or Sets Timings
        /// </summary>
        [JsonPropertyName("timings")]
        public HarEntryTimings Timings { get; set; }

        /// <summary>
        /// Used to track the state of Pageref
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PagerefOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pageref
        /// </summary>
        [JsonPropertyName("pageref")]
        public string? Pageref { get { return this.PagerefOption; } set { this.PagerefOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServerIPAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServerIPAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServerIPAddress
        /// </summary>
        [JsonPropertyName("serverIPAddress")]
        public string? ServerIPAddress { get { return this.ServerIPAddressOption; } set { this.ServerIPAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebSocketMessages
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<WebSocketMessage>?> WebSocketMessagesOption { get; private set; }

        /// <summary>
        /// Gets or Sets WebSocketMessages
        /// </summary>
        [JsonPropertyName("_webSocketMessages")]
        public List<WebSocketMessage>? WebSocketMessages { get { return this.WebSocketMessagesOption; } set { this.WebSocketMessagesOption = new(value); } }

        /// <summary>
        /// Used to track the state of SpanId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SpanIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context span ID for this entry
        /// </summary>
        /// <value>W3C Trace Context span ID for this entry</value>
        [JsonPropertyName("_span_id")]
        public string? SpanId { get { return this.SpanIdOption; } set { this.SpanIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context parent span ID (typically the page span ID)
        /// </summary>
        /// <value>W3C Trace Context parent span ID (typically the page span ID)</value>
        [JsonPropertyName("_parent_id")]
        public string? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of TraceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TraceIdOption { get; private set; }

        /// <summary>
        /// W3C Trace Context trace ID for distributed tracing
        /// </summary>
        /// <value>W3C Trace Context trace ID for distributed tracing</value>
        [JsonPropertyName("_trace_id")]
        public string? TraceId { get { return this.TraceIdOption; } set { this.TraceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Connection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ConnectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Connection
        /// </summary>
        [JsonPropertyName("connection")]
        public string? Connection { get { return this.ConnectionOption; } set { this.ConnectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Comment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommentOption { get; private set; }

        /// <summary>
        /// Gets or Sets Comment
        /// </summary>
        [JsonPropertyName("comment")]
        public string? Comment { get { return this.CommentOption; } set { this.CommentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HarEntry {\n");
            sb.Append("  StartedDateTime: ").Append(StartedDateTime).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Cache: ").Append(Cache).Append("\n");
            sb.Append("  Timings: ").Append(Timings).Append("\n");
            sb.Append("  Pageref: ").Append(Pageref).Append("\n");
            sb.Append("  ServerIPAddress: ").Append(ServerIPAddress).Append("\n");
            sb.Append("  WebSocketMessages: ").Append(WebSocketMessages).Append("\n");
            sb.Append("  SpanId: ").Append(SpanId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Connection: ").Append(Connection).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Time (long) minimum
            if (this.Time < (long)0)
            {
                yield return new ValidationResult("Invalid value for Time, must be a value greater than or equal to 0.", new [] { "Time" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HarEntry" />
    /// </summary>
    public class HarEntryJsonConverter : JsonConverter<HarEntry>
    {
        /// <summary>
        /// The format to use to serialize StartedDateTime
        /// </summary>
        public static string StartedDateTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="HarEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HarEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DateTime?> startedDateTime = default;
            Option<long?> time = default;
            Option<HarEntryRequest?> request = default;
            Option<HarEntryResponse?> response = default;
            Option<HarEntryCache?> cache = default;
            Option<HarEntryTimings?> timings = default;
            Option<string?> pageref = default;
            Option<string?> serverIPAddress = default;
            Option<List<WebSocketMessage>?> webSocketMessages = default;
            Option<string?> spanId = default;
            Option<string?> parentId = default;
            Option<string?> traceId = default;
            Option<string?> connection = default;
            Option<string?> comment = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "startedDateTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startedDateTime = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                time = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "request":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                request = new Option<HarEntryRequest?>(JsonSerializer.Deserialize<HarEntryRequest>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "response":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                response = new Option<HarEntryResponse?>(JsonSerializer.Deserialize<HarEntryResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "cache":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cache = new Option<HarEntryCache?>(JsonSerializer.Deserialize<HarEntryCache>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "timings":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timings = new Option<HarEntryTimings?>(JsonSerializer.Deserialize<HarEntryTimings>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "pageref":
                            pageref = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "serverIPAddress":
                            serverIPAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_webSocketMessages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                webSocketMessages = new Option<List<WebSocketMessage>?>(JsonSerializer.Deserialize<List<WebSocketMessage>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_span_id":
                            spanId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_parent_id":
                            parentId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_trace_id":
                            traceId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "connection":
                            connection = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "comment":
                            comment = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!startedDateTime.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(startedDateTime));

            if (!time.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(time));

            if (!request.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(request));

            if (!response.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(response));

            if (!cache.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(cache));

            if (!timings.IsSet)
                throw new ArgumentException("Property is required for class HarEntry.", nameof(timings));

            if (startedDateTime.IsSet && startedDateTime.Value == null)
                throw new ArgumentNullException(nameof(startedDateTime), "Property is not nullable for class HarEntry.");

            if (time.IsSet && time.Value == null)
                throw new ArgumentNullException(nameof(time), "Property is not nullable for class HarEntry.");

            if (request.IsSet && request.Value == null)
                throw new ArgumentNullException(nameof(request), "Property is not nullable for class HarEntry.");

            if (response.IsSet && response.Value == null)
                throw new ArgumentNullException(nameof(response), "Property is not nullable for class HarEntry.");

            if (cache.IsSet && cache.Value == null)
                throw new ArgumentNullException(nameof(cache), "Property is not nullable for class HarEntry.");

            if (timings.IsSet && timings.Value == null)
                throw new ArgumentNullException(nameof(timings), "Property is not nullable for class HarEntry.");

            if (pageref.IsSet && pageref.Value == null)
                throw new ArgumentNullException(nameof(pageref), "Property is not nullable for class HarEntry.");

            if (serverIPAddress.IsSet && serverIPAddress.Value == null)
                throw new ArgumentNullException(nameof(serverIPAddress), "Property is not nullable for class HarEntry.");

            if (webSocketMessages.IsSet && webSocketMessages.Value == null)
                throw new ArgumentNullException(nameof(webSocketMessages), "Property is not nullable for class HarEntry.");

            if (spanId.IsSet && spanId.Value == null)
                throw new ArgumentNullException(nameof(spanId), "Property is not nullable for class HarEntry.");

            if (parentId.IsSet && parentId.Value == null)
                throw new ArgumentNullException(nameof(parentId), "Property is not nullable for class HarEntry.");

            if (traceId.IsSet && traceId.Value == null)
                throw new ArgumentNullException(nameof(traceId), "Property is not nullable for class HarEntry.");

            if (connection.IsSet && connection.Value == null)
                throw new ArgumentNullException(nameof(connection), "Property is not nullable for class HarEntry.");

            if (comment.IsSet && comment.Value == null)
                throw new ArgumentNullException(nameof(comment), "Property is not nullable for class HarEntry.");

            return new HarEntry(startedDateTime.Value!.Value!, time.Value!.Value!, request.Value!, response.Value!, cache.Value!, timings.Value!, pageref, serverIPAddress, webSocketMessages, spanId, parentId, traceId, connection, comment);
        }

        /// <summary>
        /// Serializes a <see cref="HarEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HarEntry harEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, harEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HarEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="harEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HarEntry harEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (harEntry.Request == null)
                throw new ArgumentNullException(nameof(harEntry.Request), "Property is required for class HarEntry.");

            if (harEntry.Response == null)
                throw new ArgumentNullException(nameof(harEntry.Response), "Property is required for class HarEntry.");

            if (harEntry.Cache == null)
                throw new ArgumentNullException(nameof(harEntry.Cache), "Property is required for class HarEntry.");

            if (harEntry.Timings == null)
                throw new ArgumentNullException(nameof(harEntry.Timings), "Property is required for class HarEntry.");

            if (harEntry.PagerefOption.IsSet && harEntry.Pageref == null)
                throw new ArgumentNullException(nameof(harEntry.Pageref), "Property is required for class HarEntry.");

            if (harEntry.ServerIPAddressOption.IsSet && harEntry.ServerIPAddress == null)
                throw new ArgumentNullException(nameof(harEntry.ServerIPAddress), "Property is required for class HarEntry.");

            if (harEntry.WebSocketMessagesOption.IsSet && harEntry.WebSocketMessages == null)
                throw new ArgumentNullException(nameof(harEntry.WebSocketMessages), "Property is required for class HarEntry.");

            if (harEntry.SpanIdOption.IsSet && harEntry.SpanId == null)
                throw new ArgumentNullException(nameof(harEntry.SpanId), "Property is required for class HarEntry.");

            if (harEntry.ParentIdOption.IsSet && harEntry.ParentId == null)
                throw new ArgumentNullException(nameof(harEntry.ParentId), "Property is required for class HarEntry.");

            if (harEntry.TraceIdOption.IsSet && harEntry.TraceId == null)
                throw new ArgumentNullException(nameof(harEntry.TraceId), "Property is required for class HarEntry.");

            if (harEntry.ConnectionOption.IsSet && harEntry.Connection == null)
                throw new ArgumentNullException(nameof(harEntry.Connection), "Property is required for class HarEntry.");

            if (harEntry.CommentOption.IsSet && harEntry.Comment == null)
                throw new ArgumentNullException(nameof(harEntry.Comment), "Property is required for class HarEntry.");

            writer.WriteString("startedDateTime", harEntry.StartedDateTime.ToString(StartedDateTimeFormat));

            writer.WriteNumber("time", harEntry.Time);

            writer.WritePropertyName("request");
            JsonSerializer.Serialize(writer, harEntry.Request, jsonSerializerOptions);
            writer.WritePropertyName("response");
            JsonSerializer.Serialize(writer, harEntry.Response, jsonSerializerOptions);
            writer.WritePropertyName("cache");
            JsonSerializer.Serialize(writer, harEntry.Cache, jsonSerializerOptions);
            writer.WritePropertyName("timings");
            JsonSerializer.Serialize(writer, harEntry.Timings, jsonSerializerOptions);
            if (harEntry.PagerefOption.IsSet)
                writer.WriteString("pageref", harEntry.Pageref);

            if (harEntry.ServerIPAddressOption.IsSet)
                writer.WriteString("serverIPAddress", harEntry.ServerIPAddress);

            if (harEntry.WebSocketMessagesOption.IsSet)
            {
                writer.WritePropertyName("_webSocketMessages");
                JsonSerializer.Serialize(writer, harEntry.WebSocketMessages, jsonSerializerOptions);
            }
            if (harEntry.SpanIdOption.IsSet)
                writer.WriteString("_span_id", harEntry.SpanId);

            if (harEntry.ParentIdOption.IsSet)
                writer.WriteString("_parent_id", harEntry.ParentId);

            if (harEntry.TraceIdOption.IsSet)
                writer.WriteString("_trace_id", harEntry.TraceId);

            if (harEntry.ConnectionOption.IsSet)
                writer.WriteString("connection", harEntry.Connection);

            if (harEntry.CommentOption.IsSet)
                writer.WriteString("comment", harEntry.Comment);
        }
    }
}
