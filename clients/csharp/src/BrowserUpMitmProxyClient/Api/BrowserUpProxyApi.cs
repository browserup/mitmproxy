// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.27.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BrowserUpMitmProxyClient.Client;
using BrowserUpMitmProxyClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BrowserUpMitmProxyClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBrowserUpProxyApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BrowserUpProxyApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddErrorApiResponse"/>&gt;</returns>
        Task<IAddErrorApiResponse> AddErrorAsync(Error error, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Error to the captured traffic har
        /// </remarks>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddErrorApiResponse"/>?&gt;</returns>
        Task<IAddErrorApiResponse?> AddErrorOrDefaultAsync(Error error, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMetricApiResponse"/>&gt;</returns>
        Task<IAddMetricApiResponse> AddMetricAsync(Metric metric, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add Custom Metric to the captured traffic har
        /// </remarks>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMetricApiResponse"/>?&gt;</returns>
        Task<IAddMetricApiResponse?> AddMetricOrDefaultAsync(Metric metric, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHarLogApiResponse"/>&gt;</returns>
        Task<IGetHarLogApiResponse> GetHarLogAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the current HAR.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHarLogApiResponse"/>?&gt;</returns>
        Task<IGetHarLogApiResponse?> GetHarLogOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHealthcheckApiResponse"/>&gt;</returns>
        Task<IHealthcheckApiResponse> HealthcheckAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the healthcheck
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHealthcheckApiResponse"/>?&gt;</returns>
        Task<IHealthcheckApiResponse?> HealthcheckOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="INewPageApiResponse"/>&gt;</returns>
        Task<INewPageApiResponse> NewPageAsync(string title, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </remarks>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="INewPageApiResponse"/>?&gt;</returns>
        Task<INewPageApiResponse?> NewPageOrDefaultAsync(string title, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetHarLogApiResponse"/>&gt;</returns>
        Task<IResetHarLogApiResponse> ResetHarLogAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Starts a fresh HAR capture session.
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetHarLogApiResponse"/>?&gt;</returns>
        Task<IResetHarLogApiResponse?> ResetHarLogOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyNotPresentApiResponse"/>&gt;</returns>
        Task<IVerifyNotPresentApiResponse> VerifyNotPresentAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify no matching items are present in the captured traffic
        /// </remarks>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyNotPresentApiResponse"/>?&gt;</returns>
        Task<IVerifyNotPresentApiResponse?> VerifyNotPresentOrDefaultAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyPresentApiResponse"/>&gt;</returns>
        Task<IVerifyPresentApiResponse> VerifyPresentAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify at least one matching item is present in the captured traffic
        /// </remarks>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyPresentApiResponse"/>?&gt;</returns>
        Task<IVerifyPresentApiResponse?> VerifyPresentOrDefaultAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySLAApiResponse"/>&gt;</returns>
        Task<IVerifySLAApiResponse> VerifySLAAsync(int time, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify each traffic item matching the criteria meets is below SLA time
        /// </remarks>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySLAApiResponse"/>?&gt;</returns>
        Task<IVerifySLAApiResponse?> VerifySLAOrDefaultAsync(int time, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySizeApiResponse"/>&gt;</returns>
        Task<IVerifySizeApiResponse> VerifySizeAsync(int size, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify matching items in the captured traffic meet the size criteria
        /// </remarks>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySizeApiResponse"/>?&gt;</returns>
        Task<IVerifySizeApiResponse?> VerifySizeOrDefaultAsync(int size, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddErrorApiResponse"/>
    /// </summary>
    public interface IAddErrorApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IAddMetricApiResponse"/>
    /// </summary>
    public interface IAddMetricApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IGetHarLogApiResponse"/>
    /// </summary>
    public interface IGetHarLogApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.Har?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IHealthcheckApiResponse"/>
    /// </summary>
    public interface IHealthcheckApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="INewPageApiResponse"/>
    /// </summary>
    public interface INewPageApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.Har?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IResetHarLogApiResponse"/>
    /// </summary>
    public interface IResetHarLogApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.Har?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyNotPresentApiResponse"/>
    /// </summary>
    public interface IVerifyNotPresentApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.VerifyResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyPresentApiResponse"/>
    /// </summary>
    public interface IVerifyPresentApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.VerifyResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifySLAApiResponse"/>
    /// </summary>
    public interface IVerifySLAApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.VerifyResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// The <see cref="IVerifySizeApiResponse"/>
    /// </summary>
    public interface IVerifySizeApiResponse : BrowserUpMitmProxyClient.Client.IApiResponse, IOk<BrowserUpMitmProxyClient.Model.VerifyResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BrowserUpProxyApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddError;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddError;

        internal void ExecuteOnAddError(BrowserUpProxyApi.AddErrorApiResponse apiResponse)
        {
            OnAddError?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddError(Exception exception)
        {
            OnErrorAddError?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMetric;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMetric;

        internal void ExecuteOnAddMetric(BrowserUpProxyApi.AddMetricApiResponse apiResponse)
        {
            OnAddMetric?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMetric(Exception exception)
        {
            OnErrorAddMetric?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetHarLog;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetHarLog;

        internal void ExecuteOnGetHarLog(BrowserUpProxyApi.GetHarLogApiResponse apiResponse)
        {
            OnGetHarLog?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetHarLog(Exception exception)
        {
            OnErrorGetHarLog?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnHealthcheck;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorHealthcheck;

        internal void ExecuteOnHealthcheck(BrowserUpProxyApi.HealthcheckApiResponse apiResponse)
        {
            OnHealthcheck?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorHealthcheck(Exception exception)
        {
            OnErrorHealthcheck?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnNewPage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorNewPage;

        internal void ExecuteOnNewPage(BrowserUpProxyApi.NewPageApiResponse apiResponse)
        {
            OnNewPage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorNewPage(Exception exception)
        {
            OnErrorNewPage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnResetHarLog;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorResetHarLog;

        internal void ExecuteOnResetHarLog(BrowserUpProxyApi.ResetHarLogApiResponse apiResponse)
        {
            OnResetHarLog?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorResetHarLog(Exception exception)
        {
            OnErrorResetHarLog?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyNotPresent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyNotPresent;

        internal void ExecuteOnVerifyNotPresent(BrowserUpProxyApi.VerifyNotPresentApiResponse apiResponse)
        {
            OnVerifyNotPresent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyNotPresent(Exception exception)
        {
            OnErrorVerifyNotPresent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyPresent;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyPresent;

        internal void ExecuteOnVerifyPresent(BrowserUpProxyApi.VerifyPresentApiResponse apiResponse)
        {
            OnVerifyPresent?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyPresent(Exception exception)
        {
            OnErrorVerifyPresent?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifySLA;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifySLA;

        internal void ExecuteOnVerifySLA(BrowserUpProxyApi.VerifySLAApiResponse apiResponse)
        {
            OnVerifySLA?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifySLA(Exception exception)
        {
            OnErrorVerifySLA?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifySize;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifySize;

        internal void ExecuteOnVerifySize(BrowserUpProxyApi.VerifySizeApiResponse apiResponse)
        {
            OnVerifySize?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifySize(Exception exception)
        {
            OnErrorVerifySize?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BrowserUpProxyApi : IBrowserUpProxyApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BrowserUpProxyApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BrowserUpProxyApiEvents Events { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BrowserUpProxyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BrowserUpProxyApi(ILogger<BrowserUpProxyApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BrowserUpProxyApiEvents browserUpProxyApiEvents)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BrowserUpProxyApi>();
            HttpClient = httpClient;
            Events = browserUpProxyApiEvents;
        }

        partial void FormatAddError(Error error);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        private void ValidateAddError(Error error)
        {
            if (error == null)
                throw new ArgumentNullException(nameof(error));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="error"></param>
        private void AfterAddErrorDefaultImplementation(IAddErrorApiResponse apiResponseLocalVar, Error error)
        {
            bool suppressDefaultLog = false;
            AfterAddError(ref suppressDefaultLog, apiResponseLocalVar, error);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="error"></param>
        partial void AfterAddError(ref bool suppressDefaultLog, IAddErrorApiResponse apiResponseLocalVar, Error error);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="error"></param>
        private void OnErrorAddErrorDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Error error)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddError(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, error);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="error"></param>
        partial void OnErrorAddError(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Error error);

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddErrorApiResponse"/>&gt;</returns>
        public async Task<IAddErrorApiResponse?> AddErrorOrDefaultAsync(Error error, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddErrorAsync(error, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Add Custom Error to the captured traffic har
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="error">Receives an error to track. Internally, the error is stored in an array in the har under the _errors key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddErrorApiResponse"/>&gt;</returns>
        public async Task<IAddErrorApiResponse> AddErrorAsync(Error error, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddError(error);

                FormatAddError(error);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/har/errors";

                    httpRequestMessageLocalVar.Content = (error as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(error, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddErrorApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddErrorApiResponse>();

                        AddErrorApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/har/errors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddErrorDefaultImplementation(apiResponseLocalVar, error);

                        Events.ExecuteOnAddError(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddErrorDefaultImplementation(e, "/har/errors", uriBuilderLocalVar.Path, error);
                Events.ExecuteOnErrorAddError(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddErrorApiResponse"/>
        /// </summary>
        public partial class AddErrorApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IAddErrorApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddErrorApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddErrorApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddErrorApiResponse(ILogger<AddErrorApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddMetric(Metric metric);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="metric"></param>
        /// <returns></returns>
        private void ValidateAddMetric(Metric metric)
        {
            if (metric == null)
                throw new ArgumentNullException(nameof(metric));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metric"></param>
        private void AfterAddMetricDefaultImplementation(IAddMetricApiResponse apiResponseLocalVar, Metric metric)
        {
            bool suppressDefaultLog = false;
            AfterAddMetric(ref suppressDefaultLog, apiResponseLocalVar, metric);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="metric"></param>
        partial void AfterAddMetric(ref bool suppressDefaultLog, IAddMetricApiResponse apiResponseLocalVar, Metric metric);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metric"></param>
        private void OnErrorAddMetricDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Metric metric)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAddMetric(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, metric);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="metric"></param>
        partial void OnErrorAddMetric(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Metric metric);

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMetricApiResponse"/>&gt;</returns>
        public async Task<IAddMetricApiResponse?> AddMetricOrDefaultAsync(Metric metric, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMetricAsync(metric, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Add Custom Metric to the captured traffic har
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="metric">Receives a new metric to add. The metric is stored, under the hood, in an array in the har under the _metrics key</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMetricApiResponse"/>&gt;</returns>
        public async Task<IAddMetricApiResponse> AddMetricAsync(Metric metric, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMetric(metric);

                FormatAddMetric(metric);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/har/metrics";

                    httpRequestMessageLocalVar.Content = (metric as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(metric, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMetricApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMetricApiResponse>();

                        AddMetricApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/har/metrics", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMetricDefaultImplementation(apiResponseLocalVar, metric);

                        Events.ExecuteOnAddMetric(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMetricDefaultImplementation(e, "/har/metrics", uriBuilderLocalVar.Path, metric);
                Events.ExecuteOnErrorAddMetric(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMetricApiResponse"/>
        /// </summary>
        public partial class AddMetricApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IAddMetricApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMetricApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMetricApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMetricApiResponse(ILogger<AddMetricApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetHarLogDefaultImplementation(IGetHarLogApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetHarLog(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetHarLog(ref bool suppressDefaultLog, IGetHarLogApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetHarLogDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetHarLog(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetHarLog(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHarLogApiResponse"/>&gt;</returns>
        public async Task<IGetHarLogApiResponse?> GetHarLogOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetHarLogAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get the current HAR.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetHarLogApiResponse"/>&gt;</returns>
        public async Task<IGetHarLogApiResponse> GetHarLogAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/har";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetHarLogApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetHarLogApiResponse>();

                        GetHarLogApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/har", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetHarLogDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetHarLog(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetHarLogDefaultImplementation(e, "/har", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetHarLog(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetHarLogApiResponse"/>
        /// </summary>
        public partial class GetHarLogApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IGetHarLogApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetHarLogApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetHarLogApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetHarLogApiResponse(ILogger<GetHarLogApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.Har? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.Har>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.Har? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterHealthcheckDefaultImplementation(IHealthcheckApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterHealthcheck(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterHealthcheck(ref bool suppressDefaultLog, IHealthcheckApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorHealthcheckDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorHealthcheck(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorHealthcheck(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHealthcheckApiResponse"/>&gt;</returns>
        public async Task<IHealthcheckApiResponse?> HealthcheckOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await HealthcheckAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get the healthcheck
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IHealthcheckApiResponse"/>&gt;</returns>
        public async Task<IHealthcheckApiResponse> HealthcheckAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/healthcheck";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<HealthcheckApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<HealthcheckApiResponse>();

                        HealthcheckApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/healthcheck", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterHealthcheckDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnHealthcheck(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorHealthcheckDefaultImplementation(e, "/healthcheck", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorHealthcheck(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="HealthcheckApiResponse"/>
        /// </summary>
        public partial class HealthcheckApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IHealthcheckApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<HealthcheckApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="HealthcheckApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public HealthcheckApiResponse(ILogger<HealthcheckApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatNewPage(ref string title);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="title"></param>
        /// <returns></returns>
        private void ValidateNewPage(string title)
        {
            if (title == null)
                throw new ArgumentNullException(nameof(title));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="title"></param>
        private void AfterNewPageDefaultImplementation(INewPageApiResponse apiResponseLocalVar, string title)
        {
            bool suppressDefaultLog = false;
            AfterNewPage(ref suppressDefaultLog, apiResponseLocalVar, title);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="title"></param>
        partial void AfterNewPage(ref bool suppressDefaultLog, INewPageApiResponse apiResponseLocalVar, string title);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="title"></param>
        private void OnErrorNewPageDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string title)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorNewPage(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, title);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="title"></param>
        partial void OnErrorNewPage(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string title);

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="INewPageApiResponse"/>&gt;</returns>
        public async Task<INewPageApiResponse?> NewPageOrDefaultAsync(string title, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await NewPageAsync(title, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Starts a fresh HAR Page (Step) in the current active HAR to group requests.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The unique title for this har page/step.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="INewPageApiResponse"/>&gt;</returns>
        public async Task<INewPageApiResponse> NewPageAsync(string title, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateNewPage(title);

                FormatNewPage(ref title);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/har/page";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btitle%7D", Uri.EscapeDataString(title.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<NewPageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<NewPageApiResponse>();

                        NewPageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/har/page", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterNewPageDefaultImplementation(apiResponseLocalVar, title);

                        Events.ExecuteOnNewPage(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorNewPageDefaultImplementation(e, "/har/page", uriBuilderLocalVar.Path, title);
                Events.ExecuteOnErrorNewPage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="NewPageApiResponse"/>
        /// </summary>
        public partial class NewPageApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, INewPageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<NewPageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="NewPageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public NewPageApiResponse(ILogger<NewPageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.Har? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.Har>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.Har? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterResetHarLogDefaultImplementation(IResetHarLogApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterResetHarLog(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterResetHarLog(ref bool suppressDefaultLog, IResetHarLogApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorResetHarLogDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorResetHarLog(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorResetHarLog(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetHarLogApiResponse"/>&gt;</returns>
        public async Task<IResetHarLogApiResponse?> ResetHarLogOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ResetHarLogAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Starts a fresh HAR capture session.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IResetHarLogApiResponse"/>&gt;</returns>
        public async Task<IResetHarLogApiResponse> ResetHarLogAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/har";

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ResetHarLogApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ResetHarLogApiResponse>();

                        ResetHarLogApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/har", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterResetHarLogDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnResetHarLog(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorResetHarLogDefaultImplementation(e, "/har", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorResetHarLog(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ResetHarLogApiResponse"/>
        /// </summary>
        public partial class ResetHarLogApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IResetHarLogApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ResetHarLogApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ResetHarLogApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ResetHarLogApiResponse(ILogger<ResetHarLogApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.Har? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.Har>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.Har? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyNotPresent(ref string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        /// <returns></returns>
        private void ValidateVerifyNotPresent(string name, MatchCriteria matchCriteria)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (matchCriteria == null)
                throw new ArgumentNullException(nameof(matchCriteria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void AfterVerifyNotPresentDefaultImplementation(IVerifyNotPresentApiResponse apiResponseLocalVar, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLog = false;
            AfterVerifyNotPresent(ref suppressDefaultLog, apiResponseLocalVar, name, matchCriteria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void AfterVerifyNotPresent(ref bool suppressDefaultLog, IVerifyNotPresentApiResponse apiResponseLocalVar, string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void OnErrorVerifyNotPresentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyNotPresent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name, matchCriteria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void OnErrorVerifyNotPresent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, MatchCriteria matchCriteria);

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyNotPresentApiResponse"/>&gt;</returns>
        public async Task<IVerifyNotPresentApiResponse?> VerifyNotPresentOrDefaultAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyNotPresentAsync(name, matchCriteria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Verify no matching items are present in the captured traffic
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyNotPresentApiResponse"/>&gt;</returns>
        public async Task<IVerifyNotPresentApiResponse> VerifyNotPresentAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyNotPresent(name, matchCriteria);

                FormatVerifyNotPresent(ref name, matchCriteria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/verify/not_present/{name}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    httpRequestMessageLocalVar.Content = (matchCriteria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(matchCriteria, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyNotPresentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyNotPresentApiResponse>();

                        VerifyNotPresentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/verify/not_present/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyNotPresentDefaultImplementation(apiResponseLocalVar, name, matchCriteria);

                        Events.ExecuteOnVerifyNotPresent(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyNotPresentDefaultImplementation(e, "/verify/not_present/{name}", uriBuilderLocalVar.Path, name, matchCriteria);
                Events.ExecuteOnErrorVerifyNotPresent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyNotPresentApiResponse"/>
        /// </summary>
        public partial class VerifyNotPresentApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IVerifyNotPresentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyNotPresentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyNotPresentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyNotPresentApiResponse(ILogger<VerifyNotPresentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.VerifyResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.VerifyResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.VerifyResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyPresent(ref string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        /// <returns></returns>
        private void ValidateVerifyPresent(string name, MatchCriteria matchCriteria)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (matchCriteria == null)
                throw new ArgumentNullException(nameof(matchCriteria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void AfterVerifyPresentDefaultImplementation(IVerifyPresentApiResponse apiResponseLocalVar, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLog = false;
            AfterVerifyPresent(ref suppressDefaultLog, apiResponseLocalVar, name, matchCriteria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void AfterVerifyPresent(ref bool suppressDefaultLog, IVerifyPresentApiResponse apiResponseLocalVar, string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void OnErrorVerifyPresentDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifyPresent(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, name, matchCriteria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void OnErrorVerifyPresent(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string name, MatchCriteria matchCriteria);

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyPresentApiResponse"/>&gt;</returns>
        public async Task<IVerifyPresentApiResponse?> VerifyPresentOrDefaultAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyPresentAsync(name, matchCriteria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Verify at least one matching item is present in the captured traffic
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyPresentApiResponse"/>&gt;</returns>
        public async Task<IVerifyPresentApiResponse> VerifyPresentAsync(string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyPresent(name, matchCriteria);

                FormatVerifyPresent(ref name, matchCriteria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/verify/present/{name}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    httpRequestMessageLocalVar.Content = (matchCriteria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(matchCriteria, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyPresentApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyPresentApiResponse>();

                        VerifyPresentApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/verify/present/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyPresentDefaultImplementation(apiResponseLocalVar, name, matchCriteria);

                        Events.ExecuteOnVerifyPresent(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyPresentDefaultImplementation(e, "/verify/present/{name}", uriBuilderLocalVar.Path, name, matchCriteria);
                Events.ExecuteOnErrorVerifyPresent(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyPresentApiResponse"/>
        /// </summary>
        public partial class VerifyPresentApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IVerifyPresentApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyPresentApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyPresentApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyPresentApiResponse(ILogger<VerifyPresentApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.VerifyResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.VerifyResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.VerifyResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifySLA(ref int time, ref string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        /// <returns></returns>
        private void ValidateVerifySLA(string name, MatchCriteria matchCriteria)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (matchCriteria == null)
                throw new ArgumentNullException(nameof(matchCriteria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="time"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void AfterVerifySLADefaultImplementation(IVerifySLAApiResponse apiResponseLocalVar, int time, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLog = false;
            AfterVerifySLA(ref suppressDefaultLog, apiResponseLocalVar, time, name, matchCriteria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="time"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void AfterVerifySLA(ref bool suppressDefaultLog, IVerifySLAApiResponse apiResponseLocalVar, int time, string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="time"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void OnErrorVerifySLADefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int time, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifySLA(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, time, name, matchCriteria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="time"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void OnErrorVerifySLA(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int time, string name, MatchCriteria matchCriteria);

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySLAApiResponse"/>&gt;</returns>
        public async Task<IVerifySLAApiResponse?> VerifySLAOrDefaultAsync(int time, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifySLAAsync(time, name, matchCriteria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Verify each traffic item matching the criteria meets is below SLA time
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="time">The time used for comparison</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySLAApiResponse"/>&gt;</returns>
        public async Task<IVerifySLAApiResponse> VerifySLAAsync(int time, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifySLA(name, matchCriteria);

                FormatVerifySLA(ref time, ref name, matchCriteria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/verify/sla/{time}/{name}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Btime%7D", Uri.EscapeDataString(time.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    httpRequestMessageLocalVar.Content = (matchCriteria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(matchCriteria, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifySLAApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifySLAApiResponse>();

                        VerifySLAApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/verify/sla/{time}/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifySLADefaultImplementation(apiResponseLocalVar, time, name, matchCriteria);

                        Events.ExecuteOnVerifySLA(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifySLADefaultImplementation(e, "/verify/sla/{time}/{name}", uriBuilderLocalVar.Path, time, name, matchCriteria);
                Events.ExecuteOnErrorVerifySLA(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifySLAApiResponse"/>
        /// </summary>
        public partial class VerifySLAApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IVerifySLAApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifySLAApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifySLAApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifySLAApiResponse(ILogger<VerifySLAApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.VerifyResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.VerifyResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.VerifyResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifySize(ref int size, ref string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        /// <returns></returns>
        private void ValidateVerifySize(string name, MatchCriteria matchCriteria)
        {
            if (name == null)
                throw new ArgumentNullException(nameof(name));

            if (matchCriteria == null)
                throw new ArgumentNullException(nameof(matchCriteria));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void AfterVerifySizeDefaultImplementation(IVerifySizeApiResponse apiResponseLocalVar, int size, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLog = false;
            AfterVerifySize(ref suppressDefaultLog, apiResponseLocalVar, size, name, matchCriteria);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void AfterVerifySize(ref bool suppressDefaultLog, IVerifySizeApiResponse apiResponseLocalVar, int size, string name, MatchCriteria matchCriteria);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        private void OnErrorVerifySizeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int size, string name, MatchCriteria matchCriteria)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorVerifySize(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, size, name, matchCriteria);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="size"></param>
        /// <param name="name"></param>
        /// <param name="matchCriteria"></param>
        partial void OnErrorVerifySize(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int size, string name, MatchCriteria matchCriteria);

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySizeApiResponse"/>&gt;</returns>
        public async Task<IVerifySizeApiResponse?> VerifySizeOrDefaultAsync(int size, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifySizeAsync(size, name, matchCriteria, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Verify matching items in the captured traffic meet the size criteria
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="size">The size used for comparison, in kilobytes</param>
        /// <param name="name">The unique name for this verification operation</param>
        /// <param name="matchCriteria">Match criteria to select requests - response pairs for size tests</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifySizeApiResponse"/>&gt;</returns>
        public async Task<IVerifySizeApiResponse> VerifySizeAsync(int size, string name, MatchCriteria matchCriteria, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifySize(name, matchCriteria);

                FormatVerifySize(ref size, ref name, matchCriteria);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/verify/size/{size}/{name}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bsize%7D", Uri.EscapeDataString(size.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bname%7D", Uri.EscapeDataString(name.ToString()));

                    httpRequestMessageLocalVar.Content = (matchCriteria as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(matchCriteria, _jsonSerializerOptions));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifySizeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifySizeApiResponse>();

                        VerifySizeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/verify/size/{size}/{name}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifySizeDefaultImplementation(apiResponseLocalVar, size, name, matchCriteria);

                        Events.ExecuteOnVerifySize(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifySizeDefaultImplementation(e, "/verify/size/{size}/{name}", uriBuilderLocalVar.Path, size, name, matchCriteria);
                Events.ExecuteOnErrorVerifySize(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifySizeApiResponse"/>
        /// </summary>
        public partial class VerifySizeApiResponse : BrowserUpMitmProxyClient.Client.ApiResponse, IVerifySizeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifySizeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifySizeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifySizeApiResponse(ILogger<VerifySizeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BrowserUpMitmProxyClient.Model.VerifyResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BrowserUpMitmProxyClient.Model.VerifyResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BrowserUpMitmProxyClient.Model.VerifyResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
