/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HarLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarLog{}

// HarLog struct for HarLog
type HarLog struct {
	Version string `json:"version"`
	Creator HarLogCreator `json:"creator"`
	Browser *HarLogCreator `json:"browser,omitempty"`
	Pages []Page `json:"pages"`
	Entries []HarEntry `json:"entries"`
	// W3C Trace Context trace ID for distributed tracing
	TraceId *string `json:"_trace_id,omitempty"`
	// W3C Trace Context span ID for this HAR trace root
	SpanId *string `json:"_span_id,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

type _HarLog HarLog

// NewHarLog instantiates a new HarLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarLog(version string, creator HarLogCreator, pages []Page, entries []HarEntry) *HarLog {
	this := HarLog{}
	this.Version = version
	this.Creator = creator
	this.Pages = pages
	this.Entries = entries
	return &this
}

// NewHarLogWithDefaults instantiates a new HarLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarLogWithDefaults() *HarLog {
	this := HarLog{}
	return &this
}

// GetVersion returns the Version field value
func (o *HarLog) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *HarLog) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *HarLog) SetVersion(v string) {
	o.Version = v
}

// GetCreator returns the Creator field value
func (o *HarLog) GetCreator() HarLogCreator {
	if o == nil {
		var ret HarLogCreator
		return ret
	}

	return o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value
// and a boolean to check if the value has been set.
func (o *HarLog) GetCreatorOk() (*HarLogCreator, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Creator, true
}

// SetCreator sets field value
func (o *HarLog) SetCreator(v HarLogCreator) {
	o.Creator = v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *HarLog) GetBrowser() HarLogCreator {
	if o == nil || IsNil(o.Browser) {
		var ret HarLogCreator
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarLog) GetBrowserOk() (*HarLogCreator, bool) {
	if o == nil || IsNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *HarLog) HasBrowser() bool {
	if o != nil && !IsNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given HarLogCreator and assigns it to the Browser field.
func (o *HarLog) SetBrowser(v HarLogCreator) {
	o.Browser = &v
}

// GetPages returns the Pages field value
func (o *HarLog) GetPages() []Page {
	if o == nil {
		var ret []Page
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *HarLog) GetPagesOk() ([]Page, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *HarLog) SetPages(v []Page) {
	o.Pages = v
}

// GetEntries returns the Entries field value
func (o *HarLog) GetEntries() []HarEntry {
	if o == nil {
		var ret []HarEntry
		return ret
	}

	return o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value
// and a boolean to check if the value has been set.
func (o *HarLog) GetEntriesOk() ([]HarEntry, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries, true
}

// SetEntries sets field value
func (o *HarLog) SetEntries(v []HarEntry) {
	o.Entries = v
}

// GetTraceId returns the TraceId field value if set, zero value otherwise.
func (o *HarLog) GetTraceId() string {
	if o == nil || IsNil(o.TraceId) {
		var ret string
		return ret
	}
	return *o.TraceId
}

// GetTraceIdOk returns a tuple with the TraceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarLog) GetTraceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TraceId) {
		return nil, false
	}
	return o.TraceId, true
}

// HasTraceId returns a boolean if a field has been set.
func (o *HarLog) HasTraceId() bool {
	if o != nil && !IsNil(o.TraceId) {
		return true
	}

	return false
}

// SetTraceId gets a reference to the given string and assigns it to the TraceId field.
func (o *HarLog) SetTraceId(v string) {
	o.TraceId = &v
}

// GetSpanId returns the SpanId field value if set, zero value otherwise.
func (o *HarLog) GetSpanId() string {
	if o == nil || IsNil(o.SpanId) {
		var ret string
		return ret
	}
	return *o.SpanId
}

// GetSpanIdOk returns a tuple with the SpanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarLog) GetSpanIdOk() (*string, bool) {
	if o == nil || IsNil(o.SpanId) {
		return nil, false
	}
	return o.SpanId, true
}

// HasSpanId returns a boolean if a field has been set.
func (o *HarLog) HasSpanId() bool {
	if o != nil && !IsNil(o.SpanId) {
		return true
	}

	return false
}

// SetSpanId gets a reference to the given string and assigns it to the SpanId field.
func (o *HarLog) SetSpanId(v string) {
	o.SpanId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarLog) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarLog) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarLog) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarLog) SetComment(v string) {
	o.Comment = &v
}

func (o HarLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["version"] = o.Version
	toSerialize["creator"] = o.Creator
	if !IsNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	toSerialize["pages"] = o.Pages
	toSerialize["entries"] = o.Entries
	if !IsNil(o.TraceId) {
		toSerialize["_trace_id"] = o.TraceId
	}
	if !IsNil(o.SpanId) {
		toSerialize["_span_id"] = o.SpanId
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

func (o *HarLog) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"version",
		"creator",
		"pages",
		"entries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHarLog := _HarLog{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHarLog)

	if err != nil {
		return err
	}

	*o = HarLog(varHarLog)

	return err
}

type NullableHarLog struct {
	value *HarLog
	isSet bool
}

func (v NullableHarLog) Get() *HarLog {
	return v.value
}

func (v *NullableHarLog) Set(val *HarLog) {
	v.value = val
	v.isSet = true
}

func (v NullableHarLog) IsSet() bool {
	return v.isSet
}

func (v *NullableHarLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarLog(val *HarLog) *NullableHarLog {
	return &NullableHarLog{value: val, isSet: true}
}

func (v NullableHarLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


