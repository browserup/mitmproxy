// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// A set of criteria for filtering HTTP Requests and Responses.                          Criteria are AND based, and use python regular expressions for string comparison
    /// </summary>
    public partial class MatchCriteria : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MatchCriteria" /> class.
        /// </summary>
        /// <param name="url">Request URL regexp to match</param>
        /// <param name="page">current|all</param>
        /// <param name="status">HTTP Status code to match.</param>
        /// <param name="content">Body content regexp content to match</param>
        /// <param name="contentType">Content type</param>
        /// <param name="websocketMessage">Websocket message text to match</param>
        /// <param name="requestHeader">requestHeader</param>
        /// <param name="requestCookie">requestCookie</param>
        /// <param name="responseHeader">responseHeader</param>
        /// <param name="responseCookie">responseCookie</param>
        /// <param name="jsonValid">Is valid JSON</param>
        /// <param name="jsonPath">Has JSON path</param>
        /// <param name="jsonSchema">Validates against passed JSON schema</param>
        /// <param name="errorIfNoTraffic">If the proxy has NO traffic at all, return error (default to true)</param>
        [JsonConstructor]
        public MatchCriteria(Option<string?> url = default, Option<string?> page = default, Option<string?> status = default, Option<string?> content = default, Option<string?> contentType = default, Option<string?> websocketMessage = default, Option<NameValuePair?> requestHeader = default, Option<NameValuePair?> requestCookie = default, Option<NameValuePair?> responseHeader = default, Option<NameValuePair?> responseCookie = default, Option<bool?> jsonValid = default, Option<string?> jsonPath = default, Option<string?> jsonSchema = default, Option<bool?> errorIfNoTraffic = default)
        {
            UrlOption = url;
            PageOption = page;
            StatusOption = status;
            ContentOption = content;
            ContentTypeOption = contentType;
            WebsocketMessageOption = websocketMessage;
            RequestHeaderOption = requestHeader;
            RequestCookieOption = requestCookie;
            ResponseHeaderOption = responseHeader;
            ResponseCookieOption = responseCookie;
            JsonValidOption = jsonValid;
            JsonPathOption = jsonPath;
            JsonSchemaOption = jsonSchema;
            ErrorIfNoTrafficOption = errorIfNoTraffic;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Request URL regexp to match
        /// </summary>
        /// <value>Request URL regexp to match</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Page
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PageOption { get; private set; }

        /// <summary>
        /// current|all
        /// </summary>
        /// <value>current|all</value>
        [JsonPropertyName("page")]
        public string? Page { get { return this.PageOption; } set { this.PageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// HTTP Status code to match.
        /// </summary>
        /// <value>HTTP Status code to match.</value>
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Content
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentOption { get; private set; }

        /// <summary>
        /// Body content regexp content to match
        /// </summary>
        /// <value>Body content regexp content to match</value>
        [JsonPropertyName("content")]
        public string? Content { get { return this.ContentOption; } set { this.ContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContentType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContentTypeOption { get; private set; }

        /// <summary>
        /// Content type
        /// </summary>
        /// <value>Content type</value>
        [JsonPropertyName("content_type")]
        public string? ContentType { get { return this.ContentTypeOption; } set { this.ContentTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebsocketMessage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WebsocketMessageOption { get; private set; }

        /// <summary>
        /// Websocket message text to match
        /// </summary>
        /// <value>Websocket message text to match</value>
        [JsonPropertyName("websocket_message")]
        public string? WebsocketMessage { get { return this.WebsocketMessageOption; } set { this.WebsocketMessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NameValuePair?> RequestHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequestHeader
        /// </summary>
        [JsonPropertyName("request_header")]
        public NameValuePair? RequestHeader { get { return this.RequestHeaderOption; } set { this.RequestHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of RequestCookie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NameValuePair?> RequestCookieOption { get; private set; }

        /// <summary>
        /// Gets or Sets RequestCookie
        /// </summary>
        [JsonPropertyName("request_cookie")]
        public NameValuePair? RequestCookie { get { return this.RequestCookieOption; } set { this.RequestCookieOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NameValuePair?> ResponseHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [JsonPropertyName("response_header")]
        public NameValuePair? ResponseHeader { get { return this.ResponseHeaderOption; } set { this.ResponseHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseCookie
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NameValuePair?> ResponseCookieOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResponseCookie
        /// </summary>
        [JsonPropertyName("response_cookie")]
        public NameValuePair? ResponseCookie { get { return this.ResponseCookieOption; } set { this.ResponseCookieOption = new(value); } }

        /// <summary>
        /// Used to track the state of JsonValid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JsonValidOption { get; private set; }

        /// <summary>
        /// Is valid JSON
        /// </summary>
        /// <value>Is valid JSON</value>
        [JsonPropertyName("json_valid")]
        public bool? JsonValid { get { return this.JsonValidOption; } set { this.JsonValidOption = new(value); } }

        /// <summary>
        /// Used to track the state of JsonPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JsonPathOption { get; private set; }

        /// <summary>
        /// Has JSON path
        /// </summary>
        /// <value>Has JSON path</value>
        [JsonPropertyName("json_path")]
        public string? JsonPath { get { return this.JsonPathOption; } set { this.JsonPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of JsonSchema
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JsonSchemaOption { get; private set; }

        /// <summary>
        /// Validates against passed JSON schema
        /// </summary>
        /// <value>Validates against passed JSON schema</value>
        [JsonPropertyName("json_schema")]
        public string? JsonSchema { get { return this.JsonSchemaOption; } set { this.JsonSchemaOption = new(value); } }

        /// <summary>
        /// Used to track the state of ErrorIfNoTraffic
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ErrorIfNoTrafficOption { get; private set; }

        /// <summary>
        /// If the proxy has NO traffic at all, return error
        /// </summary>
        /// <value>If the proxy has NO traffic at all, return error</value>
        [JsonPropertyName("error_if_no_traffic")]
        public bool? ErrorIfNoTraffic { get { return this.ErrorIfNoTrafficOption; } set { this.ErrorIfNoTrafficOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MatchCriteria {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  WebsocketMessage: ").Append(WebsocketMessage).Append("\n");
            sb.Append("  RequestHeader: ").Append(RequestHeader).Append("\n");
            sb.Append("  RequestCookie: ").Append(RequestCookie).Append("\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  ResponseCookie: ").Append(ResponseCookie).Append("\n");
            sb.Append("  JsonValid: ").Append(JsonValid).Append("\n");
            sb.Append("  JsonPath: ").Append(JsonPath).Append("\n");
            sb.Append("  JsonSchema: ").Append(JsonSchema).Append("\n");
            sb.Append("  ErrorIfNoTraffic: ").Append(ErrorIfNoTraffic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MatchCriteria" />
    /// </summary>
    public class MatchCriteriaJsonConverter : JsonConverter<MatchCriteria>
    {
        /// <summary>
        /// Deserializes json to <see cref="MatchCriteria" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MatchCriteria Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> page = default;
            Option<string?> status = default;
            Option<string?> content = default;
            Option<string?> contentType = default;
            Option<string?> websocketMessage = default;
            Option<NameValuePair?> requestHeader = default;
            Option<NameValuePair?> requestCookie = default;
            Option<NameValuePair?> responseHeader = default;
            Option<NameValuePair?> responseCookie = default;
            Option<bool?> jsonValid = default;
            Option<string?> jsonPath = default;
            Option<string?> jsonSchema = default;
            Option<bool?> errorIfNoTraffic = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "page":
                            page = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "content_type":
                            contentType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "websocket_message":
                            websocketMessage = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "request_header":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requestHeader = new Option<NameValuePair?>(JsonSerializer.Deserialize<NameValuePair>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "request_cookie":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requestCookie = new Option<NameValuePair?>(JsonSerializer.Deserialize<NameValuePair>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "response_header":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responseHeader = new Option<NameValuePair?>(JsonSerializer.Deserialize<NameValuePair>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "response_cookie":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                responseCookie = new Option<NameValuePair?>(JsonSerializer.Deserialize<NameValuePair>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "json_valid":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jsonValid = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "json_path":
                            jsonPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "json_schema":
                            jsonSchema = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "error_if_no_traffic":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                errorIfNoTraffic = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class MatchCriteria.");

            if (page.IsSet && page.Value == null)
                throw new ArgumentNullException(nameof(page), "Property is not nullable for class MatchCriteria.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class MatchCriteria.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class MatchCriteria.");

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType), "Property is not nullable for class MatchCriteria.");

            if (websocketMessage.IsSet && websocketMessage.Value == null)
                throw new ArgumentNullException(nameof(websocketMessage), "Property is not nullable for class MatchCriteria.");

            if (requestHeader.IsSet && requestHeader.Value == null)
                throw new ArgumentNullException(nameof(requestHeader), "Property is not nullable for class MatchCriteria.");

            if (requestCookie.IsSet && requestCookie.Value == null)
                throw new ArgumentNullException(nameof(requestCookie), "Property is not nullable for class MatchCriteria.");

            if (responseHeader.IsSet && responseHeader.Value == null)
                throw new ArgumentNullException(nameof(responseHeader), "Property is not nullable for class MatchCriteria.");

            if (responseCookie.IsSet && responseCookie.Value == null)
                throw new ArgumentNullException(nameof(responseCookie), "Property is not nullable for class MatchCriteria.");

            if (jsonValid.IsSet && jsonValid.Value == null)
                throw new ArgumentNullException(nameof(jsonValid), "Property is not nullable for class MatchCriteria.");

            if (jsonPath.IsSet && jsonPath.Value == null)
                throw new ArgumentNullException(nameof(jsonPath), "Property is not nullable for class MatchCriteria.");

            if (jsonSchema.IsSet && jsonSchema.Value == null)
                throw new ArgumentNullException(nameof(jsonSchema), "Property is not nullable for class MatchCriteria.");

            if (errorIfNoTraffic.IsSet && errorIfNoTraffic.Value == null)
                throw new ArgumentNullException(nameof(errorIfNoTraffic), "Property is not nullable for class MatchCriteria.");

            return new MatchCriteria(url, page, status, content, contentType, websocketMessage, requestHeader, requestCookie, responseHeader, responseCookie, jsonValid, jsonPath, jsonSchema, errorIfNoTraffic);
        }

        /// <summary>
        /// Serializes a <see cref="MatchCriteria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchCriteria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MatchCriteria matchCriteria, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, matchCriteria, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MatchCriteria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="matchCriteria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MatchCriteria matchCriteria, JsonSerializerOptions jsonSerializerOptions)
        {
            if (matchCriteria.UrlOption.IsSet && matchCriteria.Url == null)
                throw new ArgumentNullException(nameof(matchCriteria.Url), "Property is required for class MatchCriteria.");

            if (matchCriteria.PageOption.IsSet && matchCriteria.Page == null)
                throw new ArgumentNullException(nameof(matchCriteria.Page), "Property is required for class MatchCriteria.");

            if (matchCriteria.StatusOption.IsSet && matchCriteria.Status == null)
                throw new ArgumentNullException(nameof(matchCriteria.Status), "Property is required for class MatchCriteria.");

            if (matchCriteria.ContentOption.IsSet && matchCriteria.Content == null)
                throw new ArgumentNullException(nameof(matchCriteria.Content), "Property is required for class MatchCriteria.");

            if (matchCriteria.ContentTypeOption.IsSet && matchCriteria.ContentType == null)
                throw new ArgumentNullException(nameof(matchCriteria.ContentType), "Property is required for class MatchCriteria.");

            if (matchCriteria.WebsocketMessageOption.IsSet && matchCriteria.WebsocketMessage == null)
                throw new ArgumentNullException(nameof(matchCriteria.WebsocketMessage), "Property is required for class MatchCriteria.");

            if (matchCriteria.RequestHeaderOption.IsSet && matchCriteria.RequestHeader == null)
                throw new ArgumentNullException(nameof(matchCriteria.RequestHeader), "Property is required for class MatchCriteria.");

            if (matchCriteria.RequestCookieOption.IsSet && matchCriteria.RequestCookie == null)
                throw new ArgumentNullException(nameof(matchCriteria.RequestCookie), "Property is required for class MatchCriteria.");

            if (matchCriteria.ResponseHeaderOption.IsSet && matchCriteria.ResponseHeader == null)
                throw new ArgumentNullException(nameof(matchCriteria.ResponseHeader), "Property is required for class MatchCriteria.");

            if (matchCriteria.ResponseCookieOption.IsSet && matchCriteria.ResponseCookie == null)
                throw new ArgumentNullException(nameof(matchCriteria.ResponseCookie), "Property is required for class MatchCriteria.");

            if (matchCriteria.JsonPathOption.IsSet && matchCriteria.JsonPath == null)
                throw new ArgumentNullException(nameof(matchCriteria.JsonPath), "Property is required for class MatchCriteria.");

            if (matchCriteria.JsonSchemaOption.IsSet && matchCriteria.JsonSchema == null)
                throw new ArgumentNullException(nameof(matchCriteria.JsonSchema), "Property is required for class MatchCriteria.");

            if (matchCriteria.UrlOption.IsSet)
                writer.WriteString("url", matchCriteria.Url);

            if (matchCriteria.PageOption.IsSet)
                writer.WriteString("page", matchCriteria.Page);

            if (matchCriteria.StatusOption.IsSet)
                writer.WriteString("status", matchCriteria.Status);

            if (matchCriteria.ContentOption.IsSet)
                writer.WriteString("content", matchCriteria.Content);

            if (matchCriteria.ContentTypeOption.IsSet)
                writer.WriteString("content_type", matchCriteria.ContentType);

            if (matchCriteria.WebsocketMessageOption.IsSet)
                writer.WriteString("websocket_message", matchCriteria.WebsocketMessage);

            if (matchCriteria.RequestHeaderOption.IsSet)
            {
                writer.WritePropertyName("request_header");
                JsonSerializer.Serialize(writer, matchCriteria.RequestHeader, jsonSerializerOptions);
            }
            if (matchCriteria.RequestCookieOption.IsSet)
            {
                writer.WritePropertyName("request_cookie");
                JsonSerializer.Serialize(writer, matchCriteria.RequestCookie, jsonSerializerOptions);
            }
            if (matchCriteria.ResponseHeaderOption.IsSet)
            {
                writer.WritePropertyName("response_header");
                JsonSerializer.Serialize(writer, matchCriteria.ResponseHeader, jsonSerializerOptions);
            }
            if (matchCriteria.ResponseCookieOption.IsSet)
            {
                writer.WritePropertyName("response_cookie");
                JsonSerializer.Serialize(writer, matchCriteria.ResponseCookie, jsonSerializerOptions);
            }
            if (matchCriteria.JsonValidOption.IsSet)
                writer.WriteBoolean("json_valid", matchCriteria.JsonValidOption.Value!.Value);

            if (matchCriteria.JsonPathOption.IsSet)
                writer.WriteString("json_path", matchCriteria.JsonPath);

            if (matchCriteria.JsonSchemaOption.IsSet)
                writer.WriteString("json_schema", matchCriteria.JsonSchema);

            if (matchCriteria.ErrorIfNoTrafficOption.IsSet)
                writer.WriteBoolean("error_if_no_traffic", matchCriteria.ErrorIfNoTrafficOption.Value!.Value);
        }
    }
}
