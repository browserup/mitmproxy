// <auto-generated>
/*
 * BrowserUp MitmProxy
 *
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.26.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BrowserUpMitmProxyClient.Client;

namespace BrowserUpMitmProxyClient.Model
{
    /// <summary>
    /// WebSocketMessage
    /// </summary>
    public partial class WebSocketMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebSocketMessage" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="opcode">opcode</param>
        /// <param name="data">data</param>
        /// <param name="time">time</param>
        [JsonConstructor]
        public WebSocketMessage(string type, decimal opcode, string data, decimal time)
        {
            Type = type;
            Opcode = opcode;
            Data = data;
            Time = time;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Opcode
        /// </summary>
        [JsonPropertyName("opcode")]
        public decimal Opcode { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets Time
        /// </summary>
        [JsonPropertyName("time")]
        public decimal Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebSocketMessage {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Opcode: ").Append(Opcode).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebSocketMessage" />
    /// </summary>
    public class WebSocketMessageJsonConverter : JsonConverter<WebSocketMessage>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebSocketMessage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebSocketMessage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<decimal?> opcode = default;
            Option<string?> data = default;
            Option<decimal?> time = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "opcode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                opcode = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "data":
                            data = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "time":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                time = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class WebSocketMessage.", nameof(type));

            if (!opcode.IsSet)
                throw new ArgumentException("Property is required for class WebSocketMessage.", nameof(opcode));

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class WebSocketMessage.", nameof(data));

            if (!time.IsSet)
                throw new ArgumentException("Property is required for class WebSocketMessage.", nameof(time));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class WebSocketMessage.");

            if (opcode.IsSet && opcode.Value == null)
                throw new ArgumentNullException(nameof(opcode), "Property is not nullable for class WebSocketMessage.");

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class WebSocketMessage.");

            if (time.IsSet && time.Value == null)
                throw new ArgumentNullException(nameof(time), "Property is not nullable for class WebSocketMessage.");

            return new WebSocketMessage(type.Value!, opcode.Value!.Value!, data.Value!, time.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WebSocketMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webSocketMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebSocketMessage webSocketMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webSocketMessage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebSocketMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webSocketMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebSocketMessage webSocketMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webSocketMessage.Type == null)
                throw new ArgumentNullException(nameof(webSocketMessage.Type), "Property is required for class WebSocketMessage.");

            if (webSocketMessage.Data == null)
                throw new ArgumentNullException(nameof(webSocketMessage.Data), "Property is required for class WebSocketMessage.");

            writer.WriteString("type", webSocketMessage.Type);

            writer.WriteNumber("opcode", webSocketMessage.Opcode);

            writer.WriteString("data", webSocketMessage.Data);

            writer.WriteNumber("time", webSocketMessage.Time);
        }
    }
}
