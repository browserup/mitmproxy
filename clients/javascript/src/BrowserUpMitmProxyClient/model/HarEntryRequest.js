/**
 * BrowserUp MitmProxy
 * ___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 
 *
 * The version of the OpenAPI document: 1.24
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HarEntryRequestCookiesInner from './HarEntryRequestCookiesInner';
import HarEntryRequestPostData from './HarEntryRequestPostData';
import HarEntryRequestQueryStringInner from './HarEntryRequestQueryStringInner';
import Header from './Header';

/**
 * The HarEntryRequest model module.
 * @module BrowserUpMitmProxyClient/model/HarEntryRequest
 * @version 1.0.0
 */
class HarEntryRequest {
    /**
     * Constructs a new <code>HarEntryRequest</code>.
     * @alias module:BrowserUpMitmProxyClient/model/HarEntryRequest
     * @extends Object
     * @param method {String} 
     * @param url {String} 
     * @param httpVersion {String} 
     * @param cookies {Array.<module:BrowserUpMitmProxyClient/model/HarEntryRequestCookiesInner>} 
     * @param headers {Array.<module:BrowserUpMitmProxyClient/model/Header>} 
     * @param queryString {Array.<module:BrowserUpMitmProxyClient/model/HarEntryRequestQueryStringInner>} 
     * @param headersSize {Number} 
     * @param bodySize {Number} 
     */
    constructor(method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize) { 
        
        HarEntryRequest.initialize(this, method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, url, httpVersion, cookies, headers, queryString, headersSize, bodySize) { 
        obj['method'] = method;
        obj['url'] = url;
        obj['httpVersion'] = httpVersion;
        obj['cookies'] = cookies;
        obj['headers'] = headers;
        obj['queryString'] = queryString;
        obj['headersSize'] = headersSize;
        obj['bodySize'] = bodySize;
    }

    /**
     * Constructs a <code>HarEntryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:BrowserUpMitmProxyClient/model/HarEntryRequest} obj Optional instance to populate.
     * @return {module:BrowserUpMitmProxyClient/model/HarEntryRequest} The populated <code>HarEntryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HarEntryRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('httpVersion')) {
                obj['httpVersion'] = ApiClient.convertToType(data['httpVersion'], 'String');
            }
            if (data.hasOwnProperty('cookies')) {
                obj['cookies'] = ApiClient.convertToType(data['cookies'], [HarEntryRequestCookiesInner]);
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], [Header]);
            }
            if (data.hasOwnProperty('queryString')) {
                obj['queryString'] = ApiClient.convertToType(data['queryString'], [HarEntryRequestQueryStringInner]);
            }
            if (data.hasOwnProperty('postData')) {
                obj['postData'] = HarEntryRequestPostData.constructFromObject(data['postData']);
            }
            if (data.hasOwnProperty('headersSize')) {
                obj['headersSize'] = ApiClient.convertToType(data['headersSize'], 'Number');
            }
            if (data.hasOwnProperty('bodySize')) {
                obj['bodySize'] = ApiClient.convertToType(data['bodySize'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HarEntryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HarEntryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of HarEntryRequest.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['httpVersion'] && !(typeof data['httpVersion'] === 'string' || data['httpVersion'] instanceof String)) {
            throw new Error("Expected the field `httpVersion` to be a primitive type in the JSON string but got " + data['httpVersion']);
        }
        if (data['cookies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['cookies'])) {
                throw new Error("Expected the field `cookies` to be an array in the JSON data but got " + data['cookies']);
            }
            // validate the optional field `cookies` (array)
            for (const item of data['cookies']) {
                HarEntryRequestCookiesInner.validateJSON(item);
            };
        }
        if (data['headers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['headers'])) {
                throw new Error("Expected the field `headers` to be an array in the JSON data but got " + data['headers']);
            }
            // validate the optional field `headers` (array)
            for (const item of data['headers']) {
                Header.validateJSON(item);
            };
        }
        if (data['queryString']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['queryString'])) {
                throw new Error("Expected the field `queryString` to be an array in the JSON data but got " + data['queryString']);
            }
            // validate the optional field `queryString` (array)
            for (const item of data['queryString']) {
                HarEntryRequestQueryStringInner.validateJSON(item);
            };
        }
        // validate the optional field `postData`
        if (data['postData']) { // data not null
          HarEntryRequestPostData.validateJSON(data['postData']);
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

HarEntryRequest.RequiredProperties = ["method", "url", "httpVersion", "cookies", "headers", "queryString", "headersSize", "bodySize"];

/**
 * @member {String} method
 */
HarEntryRequest.prototype['method'] = undefined;

/**
 * @member {String} url
 */
HarEntryRequest.prototype['url'] = undefined;

/**
 * @member {String} httpVersion
 */
HarEntryRequest.prototype['httpVersion'] = undefined;

/**
 * @member {Array.<module:BrowserUpMitmProxyClient/model/HarEntryRequestCookiesInner>} cookies
 */
HarEntryRequest.prototype['cookies'] = undefined;

/**
 * @member {Array.<module:BrowserUpMitmProxyClient/model/Header>} headers
 */
HarEntryRequest.prototype['headers'] = undefined;

/**
 * @member {Array.<module:BrowserUpMitmProxyClient/model/HarEntryRequestQueryStringInner>} queryString
 */
HarEntryRequest.prototype['queryString'] = undefined;

/**
 * @member {module:BrowserUpMitmProxyClient/model/HarEntryRequestPostData} postData
 */
HarEntryRequest.prototype['postData'] = undefined;

/**
 * @member {Number} headersSize
 */
HarEntryRequest.prototype['headersSize'] = undefined;

/**
 * @member {Number} bodySize
 */
HarEntryRequest.prototype['bodySize'] = undefined;

/**
 * @member {String} comment
 */
HarEntryRequest.prototype['comment'] = undefined;






export default HarEntryRequest;

