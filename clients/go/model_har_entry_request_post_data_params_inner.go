/*
BrowserUp MitmProxy

___ This is the REST API for controlling the BrowserUp MitmProxy. The BrowserUp MitmProxy is a swiss army knife for automated testing that captures HTTP traffic in HAR files. It is also useful for Selenium/Cypress tests. ___ 

API version: 1.27.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package BrowserUpMitmProxyClient

import (
	"encoding/json"
)

// checks if the HarEntryRequestPostDataParamsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HarEntryRequestPostDataParamsInner{}

// HarEntryRequestPostDataParamsInner struct for HarEntryRequestPostDataParamsInner
type HarEntryRequestPostDataParamsInner struct {
	Name *string `json:"name,omitempty"`
	Value *string `json:"value,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	Comment *string `json:"comment,omitempty"`
}

// NewHarEntryRequestPostDataParamsInner instantiates a new HarEntryRequestPostDataParamsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHarEntryRequestPostDataParamsInner() *HarEntryRequestPostDataParamsInner {
	this := HarEntryRequestPostDataParamsInner{}
	return &this
}

// NewHarEntryRequestPostDataParamsInnerWithDefaults instantiates a new HarEntryRequestPostDataParamsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHarEntryRequestPostDataParamsInnerWithDefaults() *HarEntryRequestPostDataParamsInner {
	this := HarEntryRequestPostDataParamsInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HarEntryRequestPostDataParamsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostDataParamsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HarEntryRequestPostDataParamsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HarEntryRequestPostDataParamsInner) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *HarEntryRequestPostDataParamsInner) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostDataParamsInner) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *HarEntryRequestPostDataParamsInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *HarEntryRequestPostDataParamsInner) SetValue(v string) {
	o.Value = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *HarEntryRequestPostDataParamsInner) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostDataParamsInner) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *HarEntryRequestPostDataParamsInner) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *HarEntryRequestPostDataParamsInner) SetFileName(v string) {
	o.FileName = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *HarEntryRequestPostDataParamsInner) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostDataParamsInner) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *HarEntryRequestPostDataParamsInner) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *HarEntryRequestPostDataParamsInner) SetContentType(v string) {
	o.ContentType = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *HarEntryRequestPostDataParamsInner) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HarEntryRequestPostDataParamsInner) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *HarEntryRequestPostDataParamsInner) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *HarEntryRequestPostDataParamsInner) SetComment(v string) {
	o.Comment = &v
}

func (o HarEntryRequestPostDataParamsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HarEntryRequestPostDataParamsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	return toSerialize, nil
}

type NullableHarEntryRequestPostDataParamsInner struct {
	value *HarEntryRequestPostDataParamsInner
	isSet bool
}

func (v NullableHarEntryRequestPostDataParamsInner) Get() *HarEntryRequestPostDataParamsInner {
	return v.value
}

func (v *NullableHarEntryRequestPostDataParamsInner) Set(val *HarEntryRequestPostDataParamsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableHarEntryRequestPostDataParamsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableHarEntryRequestPostDataParamsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHarEntryRequestPostDataParamsInner(val *HarEntryRequestPostDataParamsInner) *NullableHarEntryRequestPostDataParamsInner {
	return &NullableHarEntryRequestPostDataParamsInner{value: val, isSet: true}
}

func (v NullableHarEntryRequestPostDataParamsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHarEntryRequestPostDataParamsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


